{"config":{"indexing":"full","lang":["en"],"min_search_length":3,"prebuild_index":false,"separator":"[\\s\\-]+"},"docs":[{"location":"","text":"Hume Python SDK Requirements Python versions between 3.8 and 3.10 are supported Installation pip install hume Basic Usage Submit a new batch job Note: Your personal API key can be found in the profile section of beta.hume.ai from hume import HumeBatchClient client = HumeBatchClient(\"<your-api-key>\") urls = [\"https://tinyurl.com/hume-img\"] job = client.submit_face(urls) print(job) print(\"Running...\") result = job.await_complete() result.download_predictions(\"predictions.json\") print(\"Predictions downloaded!\") Rehydrate a batch job from a job ID from hume import HumeBatchClient client = HumeBatchClient(\"<your-api-key>\") job_id = \"<your-job-id>\" job = client.get_job(job_id) print(job) Other Resources Hume AI Homepage Platform Documentation API Reference Support The Python SDK is open source! More details can be found on GitHub . If you've found a bug with this SDK please open an issue !","title":"Home"},{"location":"#hume-python-sdk","text":"","title":"Hume Python SDK"},{"location":"#requirements","text":"Python versions between 3.8 and 3.10 are supported","title":"Requirements"},{"location":"#installation","text":"pip install hume","title":"Installation"},{"location":"#basic-usage","text":"","title":"Basic Usage"},{"location":"#submit-a-new-batch-job","text":"Note: Your personal API key can be found in the profile section of beta.hume.ai from hume import HumeBatchClient client = HumeBatchClient(\"<your-api-key>\") urls = [\"https://tinyurl.com/hume-img\"] job = client.submit_face(urls) print(job) print(\"Running...\") result = job.await_complete() result.download_predictions(\"predictions.json\") print(\"Predictions downloaded!\")","title":"Submit a new batch job"},{"location":"#rehydrate-a-batch-job-from-a-job-id","text":"from hume import HumeBatchClient client = HumeBatchClient(\"<your-api-key>\") job_id = \"<your-job-id>\" job = client.get_job(job_id) print(job)","title":"Rehydrate a batch job from a job ID"},{"location":"#other-resources","text":"Hume AI Homepage Platform Documentation API Reference","title":"Other Resources"},{"location":"#support","text":"The Python SDK is open source! More details can be found on GitHub . If you've found a bug with this SDK please open an issue !","title":"Support"},{"location":"batch-reference/","text":"Batch API Client Batch API client. HumeBatchClient Bases: ClientBase Batch API client. Source code in hume/batch/hume_batch_client.pyclass HumeBatchClient ( ClientBase ): \"\"\"Batch API client.\"\"\" _DEFAULT_API_TIMEOUT = 10 def __init__ ( self , * args : Any , ** kwargs : Any ): \"\"\"Construct a HumeBatchClient. Args: api_key (str): Hume API key. \"\"\" super () . __init__ ( * args , ** kwargs ) def get_job_result ( self , job_id : str ) -> BatchJobResult : \"\"\"Get the result of the batch job. Args: job_id (str): Job ID. Raises: HumeClientError: If the job result cannot be loaded. Returns: BatchJobResult: Batch job result. \"\"\" endpoint = ( f \" { self . _api_base_url } / { self . _api_version } / { ApiType . BATCH . value } /jobs/ { job_id } \" f \"?apikey= { self . _api_key } \" ) response = requests . get ( endpoint , timeout = self . _DEFAULT_API_TIMEOUT ) body = response . json () return BatchJobResult . from_response ( body ) def submit_face ( self , urls : List [ str ], fps_pred : Optional [ float ] = None , prob_threshold : Optional [ float ] = None , identify_faces : Optional [ bool ] = None , min_face_size : Optional [ float ] = None , ) -> BatchJob : \"\"\"Submit a new job for facial expression. Args: urls (List[str]): URLs to process. fps_pred (Optional[float]): Number of frames per second to process. Other frames will be omitted from the response. prob_threshold (Optional[float]): Face detection probability threshold. Faces detected with a probability less than this threshold will be omitted from the response. identify_faces (Optional[bool]): Whether to return identifiers for faces across frames. If true, unique identifiers will be assigned to face bounding boxes to differentiate different faces. If false, all faces will be tagged with an \"unknown\" ID. min_face_size (Optional[float]): Minimum bounding box side length in pixels to treat as a face. Faces detected with a bounding box side length in pixels less than this threshold will be omitted from the response. Raises: HumeClientError: If the job fails. Returns: BatchJob: Batch job. \"\"\" config = FaceConfig ( fps_pred = fps_pred , prob_threshold = prob_threshold , identify_faces = identify_faces , min_face_size = min_face_size , ) return self . _submit ( urls , [ config ]) def submit_burst ( self , urls : List [ str ], ) -> BatchJob : \"\"\"Submit a new job for vocal bursts. Args: urls (List[str]): URLs to process. Raises: HumeClientError: If the job fails. Returns: BatchJob: Batch job. \"\"\" config = BurstConfig () return self . _submit ( urls , [ config ]) def submit_prosody ( self , urls : List [ str ], identify_speakers : Optional [ bool ] = None , ) -> BatchJob : \"\"\"Submit a new job for vocal bursts. Args: urls (List[str]): URLs to process. identify_speakers (Optional[bool]): Whether to return identifiers for speakers over time. If true, unique identifiers will be assigned to spoken words to differentiate different speakers. If false, all speakers will be tagged with an \"unknown\" ID. Raises: HumeClientError: If the job fails. Returns: BatchJob: Batch job. \"\"\" config = ProsodyConfig ( identify_speakers = identify_speakers ) return self . _submit ( urls , [ config ]) def submit_language ( self , urls : List [ str ], sliding_window : Optional [ bool ] = None , identify_speakers : Optional [ bool ] = None , ) -> BatchJob : \"\"\"Submit a new job for language emotion. Args: urls (List[str]): URLs to process. sliding_window (Optional[float]): Whether to generate predictions for each word in the text or for the entire text in aggregate. identify_speakers (Optional[bool]): Whether to return identifiers for speakers over time. If true, unique identifiers will be assigned to spoken words to differentiate different speakers. If false, all speakers will be tagged with an \"unknown\" ID. Raises: HumeClientError: If the job fails. Returns: BatchJob: Batch job. \"\"\" config = LanguageConfig ( sliding_window = sliding_window , identify_speakers = identify_speakers , ) return self . _submit ( urls , [ config ]) def _submit ( self , urls : List [ str ], configs : List [ JobConfigBase ]) -> BatchJob : request = self . _get_request ( configs , urls ) return self . start_job ( request ) def get_job ( self , job_id : str ) -> BatchJob : \"\"\"Rehydrate a job based on a Job ID. Args: job_id (str): ID of the job to rehydrate. Returns: BatchJob: Job associated with the given ID. \"\"\" return BatchJob ( self , job_id ) def start_job ( self , request_body : Any ) -> BatchJob : \"\"\"Start a batch job. Args: request_body (Any): JSON request body to be passed to the batch API. Raises: HumeClientError: If the batch job fails to start. Returns: BatchJob: A `BatchJob` that wraps the batch computation. \"\"\" endpoint = ( f \" { self . _api_base_url } / { self . _api_version } / { ApiType . BATCH . value } /jobs\" f \"?apikey= { self . _api_key } \" ) response = requests . post ( endpoint , json = request_body , timeout = self . _DEFAULT_API_TIMEOUT ) try : body = response . json () except json . decoder . JSONDecodeError : # pylint: disable=raise-missing-from raise HumeClientError ( f \"Failed batch request: { response . text } \" ) if \"job_id\" not in body : if \"fault\" in body and \"faultstring\" in body [ \"fault\" ]: fault_string = body [ \"fault\" ][ \"faultstring\" ] raise HumeClientError ( f \"Could not start batch job: { fault_string } \" ) raise HumeClientError ( \"Unexpected error when starting batch job\" ) return BatchJob ( self , body [ \"job_id\" ]) @classmethod def _get_request ( cls , configs : List [ JobConfigBase ], urls : List [ str ]) -> Dict [ str , Any ]: model_requests = {} for config in configs : model_requests [ config . get_model_type () . value ] = config . serialize () return { \"models\" : model_requests , \"urls\" : urls , } __init__ ( * args , ** kwargs ) Construct a HumeBatchClient. Parameters: Name Type Description Default api_key str Hume API key. required Source code in hume/batch/hume_batch_client.py 23 24 25 26 27 28 29 def __init__ ( self , * args : Any , ** kwargs : Any ): \"\"\"Construct a HumeBatchClient. Args: api_key (str): Hume API key. \"\"\" super () . __init__ ( * args , ** kwargs ) get_job ( job_id ) Rehydrate a job based on a Job ID. Parameters: Name Type Description Default job_id str ID of the job to rehydrate. required Returns: Name Type Description BatchJob BatchJob Job associated with the given ID. Source code in hume/batch/hume_batch_client.py 158 159 160 161 162 163 164 165 166 167 def get_job ( self , job_id : str ) -> BatchJob : \"\"\"Rehydrate a job based on a Job ID. Args: job_id (str): ID of the job to rehydrate. Returns: BatchJob: Job associated with the given ID. \"\"\" return BatchJob ( self , job_id ) get_job_result ( job_id ) Get the result of the batch job. Parameters: Name Type Description Default job_id str Job ID. required Raises: Type Description HumeClientError If the job result cannot be loaded. Returns: Name Type Description BatchJobResult BatchJobResult Batch job result. Source code in hume/batch/hume_batch_client.py 31 32 33 34 35 36 37 38 39 40 41 42 43 44 45 46 47 def get_job_result ( self , job_id : str ) -> BatchJobResult : \"\"\"Get the result of the batch job. Args: job_id (str): Job ID. Raises: HumeClientError: If the job result cannot be loaded. Returns: BatchJobResult: Batch job result. \"\"\" endpoint = ( f \" { self . _api_base_url } / { self . _api_version } / { ApiType . BATCH . value } /jobs/ { job_id } \" f \"?apikey= { self . _api_key } \" ) response = requests . get ( endpoint , timeout = self . _DEFAULT_API_TIMEOUT ) body = response . json () return BatchJobResult . from_response ( body ) start_job ( request_body ) Start a batch job. Parameters: Name Type Description Default request_body Any JSON request body to be passed to the batch API. required Raises: Type Description HumeClientError If the batch job fails to start. Returns: Name Type Description BatchJob BatchJob A BatchJob that wraps the batch computation. Source code in hume/batch/hume_batch_client.py 169 170 171 172 173 174 175 176 177 178 179 180 181 182 183 184 185 186 187 188 189 190 191 192 193 194 195 196 197 def start_job ( self , request_body : Any ) -> BatchJob : \"\"\"Start a batch job. Args: request_body (Any): JSON request body to be passed to the batch API. Raises: HumeClientError: If the batch job fails to start. Returns: BatchJob: A `BatchJob` that wraps the batch computation. \"\"\" endpoint = ( f \" { self . _api_base_url } / { self . _api_version } / { ApiType . BATCH . value } /jobs\" f \"?apikey= { self . _api_key } \" ) response = requests . post ( endpoint , json = request_body , timeout = self . _DEFAULT_API_TIMEOUT ) try : body = response . json () except json . decoder . JSONDecodeError : # pylint: disable=raise-missing-from raise HumeClientError ( f \"Failed batch request: { response . text } \" ) if \"job_id\" not in body : if \"fault\" in body and \"faultstring\" in body [ \"fault\" ]: fault_string = body [ \"fault\" ][ \"faultstring\" ] raise HumeClientError ( f \"Could not start batch job: { fault_string } \" ) raise HumeClientError ( \"Unexpected error when starting batch job\" ) return BatchJob ( self , body [ \"job_id\" ]) submit_burst ( urls ) Submit a new job for vocal bursts. Parameters: Name Type Description Default urls List [ str ] URLs to process. required Raises: Type Description HumeClientError If the job fails. Returns: Name Type Description BatchJob BatchJob Batch job. Source code in hume/batch/hume_batch_client.py 86 87 88 89 90 91 92 93 94 95 96 97 98 99 100 101 102 def submit_burst ( self , urls : List [ str ], ) -> BatchJob : \"\"\"Submit a new job for vocal bursts. Args: urls (List[str]): URLs to process. Raises: HumeClientError: If the job fails. Returns: BatchJob: Batch job. \"\"\" config = BurstConfig () return self . _submit ( urls , [ config ]) submit_face ( urls , fps_pred = None , prob_threshold = None , identify_faces = None , min_face_size = None ) Submit a new job for facial expression. Parameters: Name Type Description Default urls List [ str ] URLs to process. required fps_pred Optional [ float ] Number of frames per second to process. Other frames will be omitted from the response. None prob_threshold Optional [ float ] Face detection probability threshold. Faces detected with a probability less than this threshold will be omitted from the response. None identify_faces Optional [ bool ] Whether to return identifiers for faces across frames. If true, unique identifiers will be assigned to face bounding boxes to differentiate different faces. If false, all faces will be tagged with an \"unknown\" ID. None min_face_size Optional [ float ] Minimum bounding box side length in pixels to treat as a face. Faces detected with a bounding box side length in pixels less than this threshold will be omitted from the response. None Raises: Type Description HumeClientError If the job fails. Returns: Name Type Description BatchJob BatchJob Batch job. Source code in hume/batch/hume_batch_client.py 49 50 51 52 53 54 55 56 57 58 59 60 61 62 63 64 65 66 67 68 69 70 71 72 73 74 75 76 77 78 79 80 81 82 83 84 def submit_face ( self , urls : List [ str ], fps_pred : Optional [ float ] = None , prob_threshold : Optional [ float ] = None , identify_faces : Optional [ bool ] = None , min_face_size : Optional [ float ] = None , ) -> BatchJob : \"\"\"Submit a new job for facial expression. Args: urls (List[str]): URLs to process. fps_pred (Optional[float]): Number of frames per second to process. Other frames will be omitted from the response. prob_threshold (Optional[float]): Face detection probability threshold. Faces detected with a probability less than this threshold will be omitted from the response. identify_faces (Optional[bool]): Whether to return identifiers for faces across frames. If true, unique identifiers will be assigned to face bounding boxes to differentiate different faces. If false, all faces will be tagged with an \"unknown\" ID. min_face_size (Optional[float]): Minimum bounding box side length in pixels to treat as a face. Faces detected with a bounding box side length in pixels less than this threshold will be omitted from the response. Raises: HumeClientError: If the job fails. Returns: BatchJob: Batch job. \"\"\" config = FaceConfig ( fps_pred = fps_pred , prob_threshold = prob_threshold , identify_faces = identify_faces , min_face_size = min_face_size , ) return self . _submit ( urls , [ config ]) submit_language ( urls , sliding_window = None , identify_speakers = None ) Submit a new job for language emotion. Parameters: Name Type Description Default urls List [ str ] URLs to process. required sliding_window Optional [ float ] Whether to generate predictions for each word in the text or for the entire text in aggregate. None identify_speakers Optional [ bool ] Whether to return identifiers for speakers over time. If true, unique identifiers will be assigned to spoken words to differentiate different speakers. If false, all speakers will be tagged with an \"unknown\" ID. None Raises: Type Description HumeClientError If the job fails. Returns: Name Type Description BatchJob BatchJob Batch job. Source code in hume/batch/hume_batch_client.py 126 127 128 129 130 131 132 133 134 135 136 137 138 139 140 141 142 143 144 145 146 147 148 149 150 151 152 def submit_language ( self , urls : List [ str ], sliding_window : Optional [ bool ] = None , identify_speakers : Optional [ bool ] = None , ) -> BatchJob : \"\"\"Submit a new job for language emotion. Args: urls (List[str]): URLs to process. sliding_window (Optional[float]): Whether to generate predictions for each word in the text or for the entire text in aggregate. identify_speakers (Optional[bool]): Whether to return identifiers for speakers over time. If true, unique identifiers will be assigned to spoken words to differentiate different speakers. If false, all speakers will be tagged with an \"unknown\" ID. Raises: HumeClientError: If the job fails. Returns: BatchJob: Batch job. \"\"\" config = LanguageConfig ( sliding_window = sliding_window , identify_speakers = identify_speakers , ) return self . _submit ( urls , [ config ]) submit_prosody ( urls , identify_speakers = None ) Submit a new job for vocal bursts. Parameters: Name Type Description Default urls List [ str ] URLs to process. required identify_speakers Optional [ bool ] Whether to return identifiers for speakers over time. If true, unique identifiers will be assigned to spoken words to differentiate different speakers. If false, all speakers will be tagged with an \"unknown\" ID. None Raises: Type Description HumeClientError If the job fails. Returns: Name Type Description BatchJob BatchJob Batch job. Source code in hume/batch/hume_batch_client.py 104 105 106 107 108 109 110 111 112 113 114 115 116 117 118 119 120 121 122 123 124 def submit_prosody ( self , urls : List [ str ], identify_speakers : Optional [ bool ] = None , ) -> BatchJob : \"\"\"Submit a new job for vocal bursts. Args: urls (List[str]): URLs to process. identify_speakers (Optional[bool]): Whether to return identifiers for speakers over time. If true, unique identifiers will be assigned to spoken words to differentiate different speakers. If false, all speakers will be tagged with an \"unknown\" ID. Raises: HumeClientError: If the job fails. Returns: BatchJob: Batch job. \"\"\" config = ProsodyConfig ( identify_speakers = identify_speakers ) return self . _submit ( urls , [ config ]) Batch job result. BatchJobResult Batch job result. Source code in hume/batch/batch_job_result.py 14 15 16 17 18 19 20 21 22 23 24 25 26 27 28 29 30 31 32 33 34 35 36 37 38 39 40 41 42 43 44 45 46 47 48 49 50 51 52 53 54 55 56 57 58 59 60 61 62 63 64 65 66 67 68 69 70 71 72 73 74 75 76 77 78 79 80 81 82 83 84 85 86 87 88 89 90 91 92 93 94 95 96 97 98 99 100 101 102 103 104 105 106 107 108 109 110 111 112 113 114 115 116 117 118 119 120 121 class BatchJobResult : \"\"\"Batch job result.\"\"\" def __init__ ( self , * , configs : Dict [ ModelType , JobConfigBase ], urls : List [ str ], status : BatchJobStatus , predictions_url : Optional [ str ] = None , artifacts_url : Optional [ str ] = None , errors_url : Optional [ str ] = None , ): \"\"\"Construct a BatchJobResult. Args: configs (Dict[ModelType, JobConfigBase]): Configurations for the `BatchJob`. urls (List[str]): URLs processed in the `BatchJob`. status (BatchJobStatus): Status of `BatchJob`. predictions_url (Optional[str]): URL to predictions file. artifacts_url (Optional[str]): URL to artifacts zip archive. errors_url (Optional[str]): URL to errors file. \"\"\" self . configs = configs self . urls = urls self . status = status self . artifacts_url = artifacts_url self . errors_url = errors_url self . predictions_url = predictions_url def download_artifacts ( self , filepath : Optional [ Union [ str , Path ]] = None ) -> None : \"\"\"Download `BatchJob` artifacts zip archive. Args: filepath (Optional[Union[str, Path]]): Filepath where artifacts zip archive will be downloaded. \"\"\" if self . artifacts_url is None : raise HumeClientError ( \"Could not download job artifacts. No artifacts found on job result.\" ) urlretrieve ( self . artifacts_url , filepath ) def download_predictions ( self , filepath : Optional [ Union [ str , Path ]] = None ) -> None : \"\"\"Download `BatchJob` predictions file. Args: filepath (Optional[Union[str, Path]]): Filepath where predictions will be downloaded. \"\"\" if self . predictions_url is None : raise HumeClientError ( \"Could not download job predictions. No predictions found on job result.\" ) urlretrieve ( self . predictions_url , filepath ) def download_errors ( self , filepath : Optional [ Union [ str , Path ]] = None ) -> None : \"\"\"Download `BatchJob` errors file. Args: filepath (Optional[Union[str, Path]]): Filepath where errors will be downloaded. \"\"\" if self . errors_url is None : raise HumeClientError ( \"Could not download job errors. No errors found on job result.\" ) urlretrieve ( self . errors_url , filepath ) @classmethod def from_response ( cls , response : Any ) -> \"BatchJobResult\" : \"\"\"Construct a `BatchJobResult` from a batch API job response. Args: response (Any): Batch API job response. Returns: BatchJobResult: A `BatchJobResult` based on a batch API job response. \"\"\" try : request = response [ \"request\" ] configs = {} for model_name , config_dict in request [ \"models\" ] . items (): model_type = ModelType . from_str ( model_name ) config = config_from_model_type ( model_type ) . deserialize ( config_dict ) configs [ model_type ] = config kwargs = {} if \"completed\" in response : completed_dict = response [ \"completed\" ] kwargs [ \"artifacts_url\" ] = completed_dict [ \"artifacts_url\" ] kwargs [ \"errors_url\" ] = completed_dict [ \"errors_url\" ] kwargs [ \"predictions_url\" ] = completed_dict [ \"predictions_url\" ] return cls ( configs = configs , urls = request [ \"urls\" ], status = BatchJobStatus . from_str ( response [ \"status\" ]), ** kwargs , ) # pylint: disable=broad-except except Exception as exc : message = cls . _get_invalid_response_message ( response ) raise HumeClientError ( message ) from exc @classmethod def _get_invalid_response_message ( cls , response : Any ) -> str : response_str = json . dumps ( response ) message = f \"Could not parse response into BatchJobResult: { response_str } \" # Check for invalid API key if \"fault\" in response and \"faultstring\" in response [ \"fault\" ]: fault_string = response [ \"fault\" ][ \"faultstring\" ] if fault_string == \"Invalid ApiKey\" : message = \"Client initialized with invalid API key\" return message __init__ ( * , configs , urls , status , predictions_url = None , artifacts_url = None , errors_url = None ) Construct a BatchJobResult. Parameters: Name Type Description Default configs Dict [ ModelType , JobConfigBase ] Configurations for the BatchJob . required urls List [ str ] URLs processed in the BatchJob . required status BatchJobStatus Status of BatchJob . required predictions_url Optional [ str ] URL to predictions file. None artifacts_url Optional [ str ] URL to artifacts zip archive. None errors_url Optional [ str ] URL to errors file. None Source code in hume/batch/batch_job_result.py 17 18 19 20 21 22 23 24 25 26 27 28 29 30 31 32 33 34 35 36 37 38 39 40 41 42 def __init__ ( self , * , configs : Dict [ ModelType , JobConfigBase ], urls : List [ str ], status : BatchJobStatus , predictions_url : Optional [ str ] = None , artifacts_url : Optional [ str ] = None , errors_url : Optional [ str ] = None , ): \"\"\"Construct a BatchJobResult. Args: configs (Dict[ModelType, JobConfigBase]): Configurations for the `BatchJob`. urls (List[str]): URLs processed in the `BatchJob`. status (BatchJobStatus): Status of `BatchJob`. predictions_url (Optional[str]): URL to predictions file. artifacts_url (Optional[str]): URL to artifacts zip archive. errors_url (Optional[str]): URL to errors file. \"\"\" self . configs = configs self . urls = urls self . status = status self . artifacts_url = artifacts_url self . errors_url = errors_url self . predictions_url = predictions_url download_artifacts ( filepath = None ) Download BatchJob artifacts zip archive. Parameters: Name Type Description Default filepath Optional [ Union [ str , Path ]] Filepath where artifacts zip archive will be downloaded. None Source code in hume/batch/batch_job_result.py 44 45 46 47 48 49 50 51 52 def download_artifacts ( self , filepath : Optional [ Union [ str , Path ]] = None ) -> None : \"\"\"Download `BatchJob` artifacts zip archive. Args: filepath (Optional[Union[str, Path]]): Filepath where artifacts zip archive will be downloaded. \"\"\" if self . artifacts_url is None : raise HumeClientError ( \"Could not download job artifacts. No artifacts found on job result.\" ) urlretrieve ( self . artifacts_url , filepath ) download_errors ( filepath = None ) Download BatchJob errors file. Parameters: Name Type Description Default filepath Optional [ Union [ str , Path ]] Filepath where errors will be downloaded. None Source code in hume/batch/batch_job_result.py 64 65 66 67 68 69 70 71 72 def download_errors ( self , filepath : Optional [ Union [ str , Path ]] = None ) -> None : \"\"\"Download `BatchJob` errors file. Args: filepath (Optional[Union[str, Path]]): Filepath where errors will be downloaded. \"\"\" if self . errors_url is None : raise HumeClientError ( \"Could not download job errors. No errors found on job result.\" ) urlretrieve ( self . errors_url , filepath ) download_predictions ( filepath = None ) Download BatchJob predictions file. Parameters: Name Type Description Default filepath Optional [ Union [ str , Path ]] Filepath where predictions will be downloaded. None Source code in hume/batch/batch_job_result.py 54 55 56 57 58 59 60 61 62 def download_predictions ( self , filepath : Optional [ Union [ str , Path ]] = None ) -> None : \"\"\"Download `BatchJob` predictions file. Args: filepath (Optional[Union[str, Path]]): Filepath where predictions will be downloaded. \"\"\" if self . predictions_url is None : raise HumeClientError ( \"Could not download job predictions. No predictions found on job result.\" ) urlretrieve ( self . predictions_url , filepath ) from_response ( response ) classmethod Construct a BatchJobResult from a batch API job response. Parameters: Name Type Description Default response Any Batch API job response. required Returns: Name Type Description BatchJobResult BatchJobResult A BatchJobResult based on a batch API job response. Source code in hume/batch/batch_job_result.py 74 75 76 77 78 79 80 81 82 83 84 85 86 87 88 89 90 91 92 93 94 95 96 97 98 99 100 101 102 103 104 105 106 107 108 @classmethod def from_response ( cls , response : Any ) -> \"BatchJobResult\" : \"\"\"Construct a `BatchJobResult` from a batch API job response. Args: response (Any): Batch API job response. Returns: BatchJobResult: A `BatchJobResult` based on a batch API job response. \"\"\" try : request = response [ \"request\" ] configs = {} for model_name , config_dict in request [ \"models\" ] . items (): model_type = ModelType . from_str ( model_name ) config = config_from_model_type ( model_type ) . deserialize ( config_dict ) configs [ model_type ] = config kwargs = {} if \"completed\" in response : completed_dict = response [ \"completed\" ] kwargs [ \"artifacts_url\" ] = completed_dict [ \"artifacts_url\" ] kwargs [ \"errors_url\" ] = completed_dict [ \"errors_url\" ] kwargs [ \"predictions_url\" ] = completed_dict [ \"predictions_url\" ] return cls ( configs = configs , urls = request [ \"urls\" ], status = BatchJobStatus . from_str ( response [ \"status\" ]), ** kwargs , ) # pylint: disable=broad-except except Exception as exc : message = cls . _get_invalid_response_message ( response ) raise HumeClientError ( message ) from exc Batch job status. BatchJobStatus Bases: Enum Batch job status. Source code in hume/batch/batch_job_status.py 5 6 7 8 9 10 11 12 13 14 15 16 17 18 19 20 21 22 23 24 25 26 27 28 29 30 31 32 33 34 35 36 37 38 class BatchJobStatus ( Enum ): \"\"\"Batch job status.\"\"\" COMPLETED = \"COMPLETED\" FAILED = \"FAILED\" IN_PROGRESS = \"IN_PROGRESS\" QUEUED = \"QUEUED\" @classmethod def is_terminal ( cls , status : \"BatchJobStatus\" ) -> bool : \"\"\"Check if a status is \"terminal\". Args: status (BatchJobStatus): Status to check. Return: bool: Whether the status is \"terminal\". \"\"\" return status in [ cls . COMPLETED , cls . FAILED ] @classmethod def from_str ( cls , status : str ) -> \"BatchJobStatus\" : \"\"\"Convert a status to a string. Args: status (str): Status to convert. Return: BatchJobStatus: The enum variant for the given string. \"\"\" for _ , enum_value in cls . __members__ . items (): if enum_value . value == status : return enum_value raise ValueError ( f \"Unknown status ' { status } '\" ) from_str ( status ) classmethod Convert a status to a string. Parameters: Name Type Description Default status str Status to convert. required Return BatchJobStatus: The enum variant for the given string. Source code in hume/batch/batch_job_status.py 25 26 27 28 29 30 31 32 33 34 35 36 37 38 @classmethod def from_str ( cls , status : str ) -> \"BatchJobStatus\" : \"\"\"Convert a status to a string. Args: status (str): Status to convert. Return: BatchJobStatus: The enum variant for the given string. \"\"\" for _ , enum_value in cls . __members__ . items (): if enum_value . value == status : return enum_value raise ValueError ( f \"Unknown status ' { status } '\" ) is_terminal ( status ) classmethod Check if a status is \"terminal\". Parameters: Name Type Description Default status BatchJobStatus Status to check. required Return bool: Whether the status is \"terminal\". Source code in hume/batch/batch_job_status.py 13 14 15 16 17 18 19 20 21 22 23 @classmethod def is_terminal ( cls , status : \"BatchJobStatus\" ) -> bool : \"\"\"Check if a status is \"terminal\". Args: status (BatchJobStatus): Status to check. Return: bool: Whether the status is \"terminal\". \"\"\" return status in [ cls . COMPLETED , cls . FAILED ] Batch job. BatchJob Batch job. Source code in hume/batch/batch_job.py 15 16 17 18 19 20 21 22 23 24 25 26 27 28 29 30 31 32 33 34 35 36 37 38 39 40 41 42 43 44 45 46 47 48 49 50 51 52 53 54 55 56 57 58 59 60 61 62 63 64 65 66 67 68 69 70 71 72 73 74 75 76 77 78 79 80 81 class BatchJob : \"\"\"Batch job.\"\"\" def __init__ ( self , client : \"HumeBatchClient\" , job_id : str ): \"\"\"Construct a BatchJob. Args: client (HumeBatchClient): HumeBatchClient instance. job_id (str): Job ID. \"\"\" self . _client = client self . id = job_id def get_status ( self ) -> BatchJobStatus : \"\"\"Get the status of the job. Returns: BatchJobStatus: The status of the `BatchJob`. \"\"\" return self . get_result () . status def get_result ( self ) -> BatchJobResult : \"\"\"Get the result of the BatchJob. Note that the result of a job may be fetched before the job has completed. You may want to use `job.await_complete()` which will wait for the job to reach a terminal state before returning the result. Returns: BatchJobResult: The result of the `BatchJob`. \"\"\" return self . _client . get_job_result ( self . id ) def await_complete ( self , timeout : int = 300 ) -> BatchJobResult : \"\"\"Block until the job has reached a terminal status. Args: timeout (int): Maximum time in seconds to await. If the timeout is reached before the job reaches a terminal state the job will continue to be processed, but a `HumeClientError` will be raised to the caller of `await_complete`. Raises: ValueError: If the timeout is not valid. Returns: BatchJobResult: The result of the `BatchJob`. \"\"\" if timeout < 1 : raise ValueError ( \"timeout must be at least 1 second\" ) return self . _await_complete ( timeout = timeout ) # pylint: disable=unused-argument @retry () def _await_complete ( self , timeout : int = 300 ) -> BatchJobResult : result = self . _client . get_job_result ( self . id ) if not BatchJobStatus . is_terminal ( result . status ): raise RetryIterError return result def __repr__ ( self ) -> str : \"\"\"Get the string representation of the `BatchJob`. Returns: The the string representation of the `BatchJob`. \"\"\" return f 'Job(id=\" { self . id } \")' __init__ ( client , job_id ) Construct a BatchJob. Parameters: Name Type Description Default client HumeBatchClient HumeBatchClient instance. required job_id str Job ID. required Source code in hume/batch/batch_job.py 18 19 20 21 22 23 24 25 26 def __init__ ( self , client : \"HumeBatchClient\" , job_id : str ): \"\"\"Construct a BatchJob. Args: client (HumeBatchClient): HumeBatchClient instance. job_id (str): Job ID. \"\"\" self . _client = client self . id = job_id __repr__ () Get the string representation of the BatchJob . Returns: Type Description str The the string representation of the BatchJob . Source code in hume/batch/batch_job.py 75 76 77 78 79 80 81 def __repr__ ( self ) -> str : \"\"\"Get the string representation of the `BatchJob`. Returns: The the string representation of the `BatchJob`. \"\"\" return f 'Job(id=\" { self . id } \")' await_complete ( timeout = 300 ) Block until the job has reached a terminal status. Parameters: Name Type Description Default timeout int Maximum time in seconds to await. If the timeout is reached before the job reaches a terminal state the job will continue to be processed, but a HumeClientError will be raised to the caller of await_complete . 300 Raises: Type Description ValueError If the timeout is not valid. Returns: Name Type Description BatchJobResult BatchJobResult The result of the BatchJob . Source code in hume/batch/batch_job.py 48 49 50 51 52 53 54 55 56 57 58 59 60 61 62 63 64 65 def await_complete ( self , timeout : int = 300 ) -> BatchJobResult : \"\"\"Block until the job has reached a terminal status. Args: timeout (int): Maximum time in seconds to await. If the timeout is reached before the job reaches a terminal state the job will continue to be processed, but a `HumeClientError` will be raised to the caller of `await_complete`. Raises: ValueError: If the timeout is not valid. Returns: BatchJobResult: The result of the `BatchJob`. \"\"\" if timeout < 1 : raise ValueError ( \"timeout must be at least 1 second\" ) return self . _await_complete ( timeout = timeout ) get_result () Get the result of the BatchJob. Note that the result of a job may be fetched before the job has completed. You may want to use job.await_complete() which will wait for the job to reach a terminal state before returning the result. Returns: Name Type Description BatchJobResult BatchJobResult The result of the BatchJob . Source code in hume/batch/batch_job.py 36 37 38 39 40 41 42 43 44 45 46 def get_result ( self ) -> BatchJobResult : \"\"\"Get the result of the BatchJob. Note that the result of a job may be fetched before the job has completed. You may want to use `job.await_complete()` which will wait for the job to reach a terminal state before returning the result. Returns: BatchJobResult: The result of the `BatchJob`. \"\"\" return self . _client . get_job_result ( self . id ) get_status () Get the status of the job. Returns: Name Type Description BatchJobStatus BatchJobStatus The status of the BatchJob . Source code in hume/batch/batch_job.py 28 29 30 31 32 33 34 def get_status ( self ) -> BatchJobStatus : \"\"\"Get the status of the job. Returns: BatchJobStatus: The status of the `BatchJob`. \"\"\" return self . get_result () . status","title":"Batch"},{"location":"batch-reference/#batch-api-client","text":"Batch API client.","title":"Batch API Client"},{"location":"batch-reference/#hume.batch.hume_batch_client.HumeBatchClient","text":"Bases: ClientBase Batch API client. Source code in hume/batch/hume_batch_client.pyclass HumeBatchClient ( ClientBase ): \"\"\"Batch API client.\"\"\" _DEFAULT_API_TIMEOUT = 10 def __init__ ( self , * args : Any , ** kwargs : Any ): \"\"\"Construct a HumeBatchClient. Args: api_key (str): Hume API key. \"\"\" super () . __init__ ( * args , ** kwargs ) def get_job_result ( self , job_id : str ) -> BatchJobResult : \"\"\"Get the result of the batch job. Args: job_id (str): Job ID. Raises: HumeClientError: If the job result cannot be loaded. Returns: BatchJobResult: Batch job result. \"\"\" endpoint = ( f \" { self . _api_base_url } / { self . _api_version } / { ApiType . BATCH . value } /jobs/ { job_id } \" f \"?apikey= { self . _api_key } \" ) response = requests . get ( endpoint , timeout = self . _DEFAULT_API_TIMEOUT ) body = response . json () return BatchJobResult . from_response ( body ) def submit_face ( self , urls : List [ str ], fps_pred : Optional [ float ] = None , prob_threshold : Optional [ float ] = None , identify_faces : Optional [ bool ] = None , min_face_size : Optional [ float ] = None , ) -> BatchJob : \"\"\"Submit a new job for facial expression. Args: urls (List[str]): URLs to process. fps_pred (Optional[float]): Number of frames per second to process. Other frames will be omitted from the response. prob_threshold (Optional[float]): Face detection probability threshold. Faces detected with a probability less than this threshold will be omitted from the response. identify_faces (Optional[bool]): Whether to return identifiers for faces across frames. If true, unique identifiers will be assigned to face bounding boxes to differentiate different faces. If false, all faces will be tagged with an \"unknown\" ID. min_face_size (Optional[float]): Minimum bounding box side length in pixels to treat as a face. Faces detected with a bounding box side length in pixels less than this threshold will be omitted from the response. Raises: HumeClientError: If the job fails. Returns: BatchJob: Batch job. \"\"\" config = FaceConfig ( fps_pred = fps_pred , prob_threshold = prob_threshold , identify_faces = identify_faces , min_face_size = min_face_size , ) return self . _submit ( urls , [ config ]) def submit_burst ( self , urls : List [ str ], ) -> BatchJob : \"\"\"Submit a new job for vocal bursts. Args: urls (List[str]): URLs to process. Raises: HumeClientError: If the job fails. Returns: BatchJob: Batch job. \"\"\" config = BurstConfig () return self . _submit ( urls , [ config ]) def submit_prosody ( self , urls : List [ str ], identify_speakers : Optional [ bool ] = None , ) -> BatchJob : \"\"\"Submit a new job for vocal bursts. Args: urls (List[str]): URLs to process. identify_speakers (Optional[bool]): Whether to return identifiers for speakers over time. If true, unique identifiers will be assigned to spoken words to differentiate different speakers. If false, all speakers will be tagged with an \"unknown\" ID. Raises: HumeClientError: If the job fails. Returns: BatchJob: Batch job. \"\"\" config = ProsodyConfig ( identify_speakers = identify_speakers ) return self . _submit ( urls , [ config ]) def submit_language ( self , urls : List [ str ], sliding_window : Optional [ bool ] = None , identify_speakers : Optional [ bool ] = None , ) -> BatchJob : \"\"\"Submit a new job for language emotion. Args: urls (List[str]): URLs to process. sliding_window (Optional[float]): Whether to generate predictions for each word in the text or for the entire text in aggregate. identify_speakers (Optional[bool]): Whether to return identifiers for speakers over time. If true, unique identifiers will be assigned to spoken words to differentiate different speakers. If false, all speakers will be tagged with an \"unknown\" ID. Raises: HumeClientError: If the job fails. Returns: BatchJob: Batch job. \"\"\" config = LanguageConfig ( sliding_window = sliding_window , identify_speakers = identify_speakers , ) return self . _submit ( urls , [ config ]) def _submit ( self , urls : List [ str ], configs : List [ JobConfigBase ]) -> BatchJob : request = self . _get_request ( configs , urls ) return self . start_job ( request ) def get_job ( self , job_id : str ) -> BatchJob : \"\"\"Rehydrate a job based on a Job ID. Args: job_id (str): ID of the job to rehydrate. Returns: BatchJob: Job associated with the given ID. \"\"\" return BatchJob ( self , job_id ) def start_job ( self , request_body : Any ) -> BatchJob : \"\"\"Start a batch job. Args: request_body (Any): JSON request body to be passed to the batch API. Raises: HumeClientError: If the batch job fails to start. Returns: BatchJob: A `BatchJob` that wraps the batch computation. \"\"\" endpoint = ( f \" { self . _api_base_url } / { self . _api_version } / { ApiType . BATCH . value } /jobs\" f \"?apikey= { self . _api_key } \" ) response = requests . post ( endpoint , json = request_body , timeout = self . _DEFAULT_API_TIMEOUT ) try : body = response . json () except json . decoder . JSONDecodeError : # pylint: disable=raise-missing-from raise HumeClientError ( f \"Failed batch request: { response . text } \" ) if \"job_id\" not in body : if \"fault\" in body and \"faultstring\" in body [ \"fault\" ]: fault_string = body [ \"fault\" ][ \"faultstring\" ] raise HumeClientError ( f \"Could not start batch job: { fault_string } \" ) raise HumeClientError ( \"Unexpected error when starting batch job\" ) return BatchJob ( self , body [ \"job_id\" ]) @classmethod def _get_request ( cls , configs : List [ JobConfigBase ], urls : List [ str ]) -> Dict [ str , Any ]: model_requests = {} for config in configs : model_requests [ config . get_model_type () . value ] = config . serialize () return { \"models\" : model_requests , \"urls\" : urls , }","title":"HumeBatchClient"},{"location":"batch-reference/#hume.batch.hume_batch_client.HumeBatchClient.__init__","text":"Construct a HumeBatchClient. Parameters: Name Type Description Default api_key str Hume API key. required Source code in hume/batch/hume_batch_client.py 23 24 25 26 27 28 29 def __init__ ( self , * args : Any , ** kwargs : Any ): \"\"\"Construct a HumeBatchClient. Args: api_key (str): Hume API key. \"\"\" super () . __init__ ( * args , ** kwargs )","title":"__init__()"},{"location":"batch-reference/#hume.batch.hume_batch_client.HumeBatchClient.get_job","text":"Rehydrate a job based on a Job ID. Parameters: Name Type Description Default job_id str ID of the job to rehydrate. required Returns: Name Type Description BatchJob BatchJob Job associated with the given ID. Source code in hume/batch/hume_batch_client.py 158 159 160 161 162 163 164 165 166 167 def get_job ( self , job_id : str ) -> BatchJob : \"\"\"Rehydrate a job based on a Job ID. Args: job_id (str): ID of the job to rehydrate. Returns: BatchJob: Job associated with the given ID. \"\"\" return BatchJob ( self , job_id )","title":"get_job()"},{"location":"batch-reference/#hume.batch.hume_batch_client.HumeBatchClient.get_job_result","text":"Get the result of the batch job. Parameters: Name Type Description Default job_id str Job ID. required Raises: Type Description HumeClientError If the job result cannot be loaded. Returns: Name Type Description BatchJobResult BatchJobResult Batch job result. Source code in hume/batch/hume_batch_client.py 31 32 33 34 35 36 37 38 39 40 41 42 43 44 45 46 47 def get_job_result ( self , job_id : str ) -> BatchJobResult : \"\"\"Get the result of the batch job. Args: job_id (str): Job ID. Raises: HumeClientError: If the job result cannot be loaded. Returns: BatchJobResult: Batch job result. \"\"\" endpoint = ( f \" { self . _api_base_url } / { self . _api_version } / { ApiType . BATCH . value } /jobs/ { job_id } \" f \"?apikey= { self . _api_key } \" ) response = requests . get ( endpoint , timeout = self . _DEFAULT_API_TIMEOUT ) body = response . json () return BatchJobResult . from_response ( body )","title":"get_job_result()"},{"location":"batch-reference/#hume.batch.hume_batch_client.HumeBatchClient.start_job","text":"Start a batch job. Parameters: Name Type Description Default request_body Any JSON request body to be passed to the batch API. required Raises: Type Description HumeClientError If the batch job fails to start. Returns: Name Type Description BatchJob BatchJob A BatchJob that wraps the batch computation. Source code in hume/batch/hume_batch_client.py 169 170 171 172 173 174 175 176 177 178 179 180 181 182 183 184 185 186 187 188 189 190 191 192 193 194 195 196 197 def start_job ( self , request_body : Any ) -> BatchJob : \"\"\"Start a batch job. Args: request_body (Any): JSON request body to be passed to the batch API. Raises: HumeClientError: If the batch job fails to start. Returns: BatchJob: A `BatchJob` that wraps the batch computation. \"\"\" endpoint = ( f \" { self . _api_base_url } / { self . _api_version } / { ApiType . BATCH . value } /jobs\" f \"?apikey= { self . _api_key } \" ) response = requests . post ( endpoint , json = request_body , timeout = self . _DEFAULT_API_TIMEOUT ) try : body = response . json () except json . decoder . JSONDecodeError : # pylint: disable=raise-missing-from raise HumeClientError ( f \"Failed batch request: { response . text } \" ) if \"job_id\" not in body : if \"fault\" in body and \"faultstring\" in body [ \"fault\" ]: fault_string = body [ \"fault\" ][ \"faultstring\" ] raise HumeClientError ( f \"Could not start batch job: { fault_string } \" ) raise HumeClientError ( \"Unexpected error when starting batch job\" ) return BatchJob ( self , body [ \"job_id\" ])","title":"start_job()"},{"location":"batch-reference/#hume.batch.hume_batch_client.HumeBatchClient.submit_burst","text":"Submit a new job for vocal bursts. Parameters: Name Type Description Default urls List [ str ] URLs to process. required Raises: Type Description HumeClientError If the job fails. Returns: Name Type Description BatchJob BatchJob Batch job. Source code in hume/batch/hume_batch_client.py 86 87 88 89 90 91 92 93 94 95 96 97 98 99 100 101 102 def submit_burst ( self , urls : List [ str ], ) -> BatchJob : \"\"\"Submit a new job for vocal bursts. Args: urls (List[str]): URLs to process. Raises: HumeClientError: If the job fails. Returns: BatchJob: Batch job. \"\"\" config = BurstConfig () return self . _submit ( urls , [ config ])","title":"submit_burst()"},{"location":"batch-reference/#hume.batch.hume_batch_client.HumeBatchClient.submit_face","text":"Submit a new job for facial expression. Parameters: Name Type Description Default urls List [ str ] URLs to process. required fps_pred Optional [ float ] Number of frames per second to process. Other frames will be omitted from the response. None prob_threshold Optional [ float ] Face detection probability threshold. Faces detected with a probability less than this threshold will be omitted from the response. None identify_faces Optional [ bool ] Whether to return identifiers for faces across frames. If true, unique identifiers will be assigned to face bounding boxes to differentiate different faces. If false, all faces will be tagged with an \"unknown\" ID. None min_face_size Optional [ float ] Minimum bounding box side length in pixels to treat as a face. Faces detected with a bounding box side length in pixels less than this threshold will be omitted from the response. None Raises: Type Description HumeClientError If the job fails. Returns: Name Type Description BatchJob BatchJob Batch job. Source code in hume/batch/hume_batch_client.py 49 50 51 52 53 54 55 56 57 58 59 60 61 62 63 64 65 66 67 68 69 70 71 72 73 74 75 76 77 78 79 80 81 82 83 84 def submit_face ( self , urls : List [ str ], fps_pred : Optional [ float ] = None , prob_threshold : Optional [ float ] = None , identify_faces : Optional [ bool ] = None , min_face_size : Optional [ float ] = None , ) -> BatchJob : \"\"\"Submit a new job for facial expression. Args: urls (List[str]): URLs to process. fps_pred (Optional[float]): Number of frames per second to process. Other frames will be omitted from the response. prob_threshold (Optional[float]): Face detection probability threshold. Faces detected with a probability less than this threshold will be omitted from the response. identify_faces (Optional[bool]): Whether to return identifiers for faces across frames. If true, unique identifiers will be assigned to face bounding boxes to differentiate different faces. If false, all faces will be tagged with an \"unknown\" ID. min_face_size (Optional[float]): Minimum bounding box side length in pixels to treat as a face. Faces detected with a bounding box side length in pixels less than this threshold will be omitted from the response. Raises: HumeClientError: If the job fails. Returns: BatchJob: Batch job. \"\"\" config = FaceConfig ( fps_pred = fps_pred , prob_threshold = prob_threshold , identify_faces = identify_faces , min_face_size = min_face_size , ) return self . _submit ( urls , [ config ])","title":"submit_face()"},{"location":"batch-reference/#hume.batch.hume_batch_client.HumeBatchClient.submit_language","text":"Submit a new job for language emotion. Parameters: Name Type Description Default urls List [ str ] URLs to process. required sliding_window Optional [ float ] Whether to generate predictions for each word in the text or for the entire text in aggregate. None identify_speakers Optional [ bool ] Whether to return identifiers for speakers over time. If true, unique identifiers will be assigned to spoken words to differentiate different speakers. If false, all speakers will be tagged with an \"unknown\" ID. None Raises: Type Description HumeClientError If the job fails. Returns: Name Type Description BatchJob BatchJob Batch job. Source code in hume/batch/hume_batch_client.py 126 127 128 129 130 131 132 133 134 135 136 137 138 139 140 141 142 143 144 145 146 147 148 149 150 151 152 def submit_language ( self , urls : List [ str ], sliding_window : Optional [ bool ] = None , identify_speakers : Optional [ bool ] = None , ) -> BatchJob : \"\"\"Submit a new job for language emotion. Args: urls (List[str]): URLs to process. sliding_window (Optional[float]): Whether to generate predictions for each word in the text or for the entire text in aggregate. identify_speakers (Optional[bool]): Whether to return identifiers for speakers over time. If true, unique identifiers will be assigned to spoken words to differentiate different speakers. If false, all speakers will be tagged with an \"unknown\" ID. Raises: HumeClientError: If the job fails. Returns: BatchJob: Batch job. \"\"\" config = LanguageConfig ( sliding_window = sliding_window , identify_speakers = identify_speakers , ) return self . _submit ( urls , [ config ])","title":"submit_language()"},{"location":"batch-reference/#hume.batch.hume_batch_client.HumeBatchClient.submit_prosody","text":"Submit a new job for vocal bursts. Parameters: Name Type Description Default urls List [ str ] URLs to process. required identify_speakers Optional [ bool ] Whether to return identifiers for speakers over time. If true, unique identifiers will be assigned to spoken words to differentiate different speakers. If false, all speakers will be tagged with an \"unknown\" ID. None Raises: Type Description HumeClientError If the job fails. Returns: Name Type Description BatchJob BatchJob Batch job. Source code in hume/batch/hume_batch_client.py 104 105 106 107 108 109 110 111 112 113 114 115 116 117 118 119 120 121 122 123 124 def submit_prosody ( self , urls : List [ str ], identify_speakers : Optional [ bool ] = None , ) -> BatchJob : \"\"\"Submit a new job for vocal bursts. Args: urls (List[str]): URLs to process. identify_speakers (Optional[bool]): Whether to return identifiers for speakers over time. If true, unique identifiers will be assigned to spoken words to differentiate different speakers. If false, all speakers will be tagged with an \"unknown\" ID. Raises: HumeClientError: If the job fails. Returns: BatchJob: Batch job. \"\"\" config = ProsodyConfig ( identify_speakers = identify_speakers ) return self . _submit ( urls , [ config ]) Batch job result.","title":"submit_prosody()"},{"location":"batch-reference/#hume.batch.batch_job_result.BatchJobResult","text":"Batch job result. Source code in hume/batch/batch_job_result.py 14 15 16 17 18 19 20 21 22 23 24 25 26 27 28 29 30 31 32 33 34 35 36 37 38 39 40 41 42 43 44 45 46 47 48 49 50 51 52 53 54 55 56 57 58 59 60 61 62 63 64 65 66 67 68 69 70 71 72 73 74 75 76 77 78 79 80 81 82 83 84 85 86 87 88 89 90 91 92 93 94 95 96 97 98 99 100 101 102 103 104 105 106 107 108 109 110 111 112 113 114 115 116 117 118 119 120 121 class BatchJobResult : \"\"\"Batch job result.\"\"\" def __init__ ( self , * , configs : Dict [ ModelType , JobConfigBase ], urls : List [ str ], status : BatchJobStatus , predictions_url : Optional [ str ] = None , artifacts_url : Optional [ str ] = None , errors_url : Optional [ str ] = None , ): \"\"\"Construct a BatchJobResult. Args: configs (Dict[ModelType, JobConfigBase]): Configurations for the `BatchJob`. urls (List[str]): URLs processed in the `BatchJob`. status (BatchJobStatus): Status of `BatchJob`. predictions_url (Optional[str]): URL to predictions file. artifacts_url (Optional[str]): URL to artifacts zip archive. errors_url (Optional[str]): URL to errors file. \"\"\" self . configs = configs self . urls = urls self . status = status self . artifacts_url = artifacts_url self . errors_url = errors_url self . predictions_url = predictions_url def download_artifacts ( self , filepath : Optional [ Union [ str , Path ]] = None ) -> None : \"\"\"Download `BatchJob` artifacts zip archive. Args: filepath (Optional[Union[str, Path]]): Filepath where artifacts zip archive will be downloaded. \"\"\" if self . artifacts_url is None : raise HumeClientError ( \"Could not download job artifacts. No artifacts found on job result.\" ) urlretrieve ( self . artifacts_url , filepath ) def download_predictions ( self , filepath : Optional [ Union [ str , Path ]] = None ) -> None : \"\"\"Download `BatchJob` predictions file. Args: filepath (Optional[Union[str, Path]]): Filepath where predictions will be downloaded. \"\"\" if self . predictions_url is None : raise HumeClientError ( \"Could not download job predictions. No predictions found on job result.\" ) urlretrieve ( self . predictions_url , filepath ) def download_errors ( self , filepath : Optional [ Union [ str , Path ]] = None ) -> None : \"\"\"Download `BatchJob` errors file. Args: filepath (Optional[Union[str, Path]]): Filepath where errors will be downloaded. \"\"\" if self . errors_url is None : raise HumeClientError ( \"Could not download job errors. No errors found on job result.\" ) urlretrieve ( self . errors_url , filepath ) @classmethod def from_response ( cls , response : Any ) -> \"BatchJobResult\" : \"\"\"Construct a `BatchJobResult` from a batch API job response. Args: response (Any): Batch API job response. Returns: BatchJobResult: A `BatchJobResult` based on a batch API job response. \"\"\" try : request = response [ \"request\" ] configs = {} for model_name , config_dict in request [ \"models\" ] . items (): model_type = ModelType . from_str ( model_name ) config = config_from_model_type ( model_type ) . deserialize ( config_dict ) configs [ model_type ] = config kwargs = {} if \"completed\" in response : completed_dict = response [ \"completed\" ] kwargs [ \"artifacts_url\" ] = completed_dict [ \"artifacts_url\" ] kwargs [ \"errors_url\" ] = completed_dict [ \"errors_url\" ] kwargs [ \"predictions_url\" ] = completed_dict [ \"predictions_url\" ] return cls ( configs = configs , urls = request [ \"urls\" ], status = BatchJobStatus . from_str ( response [ \"status\" ]), ** kwargs , ) # pylint: disable=broad-except except Exception as exc : message = cls . _get_invalid_response_message ( response ) raise HumeClientError ( message ) from exc @classmethod def _get_invalid_response_message ( cls , response : Any ) -> str : response_str = json . dumps ( response ) message = f \"Could not parse response into BatchJobResult: { response_str } \" # Check for invalid API key if \"fault\" in response and \"faultstring\" in response [ \"fault\" ]: fault_string = response [ \"fault\" ][ \"faultstring\" ] if fault_string == \"Invalid ApiKey\" : message = \"Client initialized with invalid API key\" return message","title":"BatchJobResult"},{"location":"batch-reference/#hume.batch.batch_job_result.BatchJobResult.__init__","text":"Construct a BatchJobResult. Parameters: Name Type Description Default configs Dict [ ModelType , JobConfigBase ] Configurations for the BatchJob . required urls List [ str ] URLs processed in the BatchJob . required status BatchJobStatus Status of BatchJob . required predictions_url Optional [ str ] URL to predictions file. None artifacts_url Optional [ str ] URL to artifacts zip archive. None errors_url Optional [ str ] URL to errors file. None Source code in hume/batch/batch_job_result.py 17 18 19 20 21 22 23 24 25 26 27 28 29 30 31 32 33 34 35 36 37 38 39 40 41 42 def __init__ ( self , * , configs : Dict [ ModelType , JobConfigBase ], urls : List [ str ], status : BatchJobStatus , predictions_url : Optional [ str ] = None , artifacts_url : Optional [ str ] = None , errors_url : Optional [ str ] = None , ): \"\"\"Construct a BatchJobResult. Args: configs (Dict[ModelType, JobConfigBase]): Configurations for the `BatchJob`. urls (List[str]): URLs processed in the `BatchJob`. status (BatchJobStatus): Status of `BatchJob`. predictions_url (Optional[str]): URL to predictions file. artifacts_url (Optional[str]): URL to artifacts zip archive. errors_url (Optional[str]): URL to errors file. \"\"\" self . configs = configs self . urls = urls self . status = status self . artifacts_url = artifacts_url self . errors_url = errors_url self . predictions_url = predictions_url","title":"__init__()"},{"location":"batch-reference/#hume.batch.batch_job_result.BatchJobResult.download_artifacts","text":"Download BatchJob artifacts zip archive. Parameters: Name Type Description Default filepath Optional [ Union [ str , Path ]] Filepath where artifacts zip archive will be downloaded. None Source code in hume/batch/batch_job_result.py 44 45 46 47 48 49 50 51 52 def download_artifacts ( self , filepath : Optional [ Union [ str , Path ]] = None ) -> None : \"\"\"Download `BatchJob` artifacts zip archive. Args: filepath (Optional[Union[str, Path]]): Filepath where artifacts zip archive will be downloaded. \"\"\" if self . artifacts_url is None : raise HumeClientError ( \"Could not download job artifacts. No artifacts found on job result.\" ) urlretrieve ( self . artifacts_url , filepath )","title":"download_artifacts()"},{"location":"batch-reference/#hume.batch.batch_job_result.BatchJobResult.download_errors","text":"Download BatchJob errors file. Parameters: Name Type Description Default filepath Optional [ Union [ str , Path ]] Filepath where errors will be downloaded. None Source code in hume/batch/batch_job_result.py 64 65 66 67 68 69 70 71 72 def download_errors ( self , filepath : Optional [ Union [ str , Path ]] = None ) -> None : \"\"\"Download `BatchJob` errors file. Args: filepath (Optional[Union[str, Path]]): Filepath where errors will be downloaded. \"\"\" if self . errors_url is None : raise HumeClientError ( \"Could not download job errors. No errors found on job result.\" ) urlretrieve ( self . errors_url , filepath )","title":"download_errors()"},{"location":"batch-reference/#hume.batch.batch_job_result.BatchJobResult.download_predictions","text":"Download BatchJob predictions file. Parameters: Name Type Description Default filepath Optional [ Union [ str , Path ]] Filepath where predictions will be downloaded. None Source code in hume/batch/batch_job_result.py 54 55 56 57 58 59 60 61 62 def download_predictions ( self , filepath : Optional [ Union [ str , Path ]] = None ) -> None : \"\"\"Download `BatchJob` predictions file. Args: filepath (Optional[Union[str, Path]]): Filepath where predictions will be downloaded. \"\"\" if self . predictions_url is None : raise HumeClientError ( \"Could not download job predictions. No predictions found on job result.\" ) urlretrieve ( self . predictions_url , filepath )","title":"download_predictions()"},{"location":"batch-reference/#hume.batch.batch_job_result.BatchJobResult.from_response","text":"Construct a BatchJobResult from a batch API job response. Parameters: Name Type Description Default response Any Batch API job response. required Returns: Name Type Description BatchJobResult BatchJobResult A BatchJobResult based on a batch API job response. Source code in hume/batch/batch_job_result.py 74 75 76 77 78 79 80 81 82 83 84 85 86 87 88 89 90 91 92 93 94 95 96 97 98 99 100 101 102 103 104 105 106 107 108 @classmethod def from_response ( cls , response : Any ) -> \"BatchJobResult\" : \"\"\"Construct a `BatchJobResult` from a batch API job response. Args: response (Any): Batch API job response. Returns: BatchJobResult: A `BatchJobResult` based on a batch API job response. \"\"\" try : request = response [ \"request\" ] configs = {} for model_name , config_dict in request [ \"models\" ] . items (): model_type = ModelType . from_str ( model_name ) config = config_from_model_type ( model_type ) . deserialize ( config_dict ) configs [ model_type ] = config kwargs = {} if \"completed\" in response : completed_dict = response [ \"completed\" ] kwargs [ \"artifacts_url\" ] = completed_dict [ \"artifacts_url\" ] kwargs [ \"errors_url\" ] = completed_dict [ \"errors_url\" ] kwargs [ \"predictions_url\" ] = completed_dict [ \"predictions_url\" ] return cls ( configs = configs , urls = request [ \"urls\" ], status = BatchJobStatus . from_str ( response [ \"status\" ]), ** kwargs , ) # pylint: disable=broad-except except Exception as exc : message = cls . _get_invalid_response_message ( response ) raise HumeClientError ( message ) from exc Batch job status.","title":"from_response()"},{"location":"batch-reference/#hume.batch.batch_job_status.BatchJobStatus","text":"Bases: Enum Batch job status. Source code in hume/batch/batch_job_status.py 5 6 7 8 9 10 11 12 13 14 15 16 17 18 19 20 21 22 23 24 25 26 27 28 29 30 31 32 33 34 35 36 37 38 class BatchJobStatus ( Enum ): \"\"\"Batch job status.\"\"\" COMPLETED = \"COMPLETED\" FAILED = \"FAILED\" IN_PROGRESS = \"IN_PROGRESS\" QUEUED = \"QUEUED\" @classmethod def is_terminal ( cls , status : \"BatchJobStatus\" ) -> bool : \"\"\"Check if a status is \"terminal\". Args: status (BatchJobStatus): Status to check. Return: bool: Whether the status is \"terminal\". \"\"\" return status in [ cls . COMPLETED , cls . FAILED ] @classmethod def from_str ( cls , status : str ) -> \"BatchJobStatus\" : \"\"\"Convert a status to a string. Args: status (str): Status to convert. Return: BatchJobStatus: The enum variant for the given string. \"\"\" for _ , enum_value in cls . __members__ . items (): if enum_value . value == status : return enum_value raise ValueError ( f \"Unknown status ' { status } '\" )","title":"BatchJobStatus"},{"location":"batch-reference/#hume.batch.batch_job_status.BatchJobStatus.from_str","text":"Convert a status to a string. Parameters: Name Type Description Default status str Status to convert. required Return BatchJobStatus: The enum variant for the given string. Source code in hume/batch/batch_job_status.py 25 26 27 28 29 30 31 32 33 34 35 36 37 38 @classmethod def from_str ( cls , status : str ) -> \"BatchJobStatus\" : \"\"\"Convert a status to a string. Args: status (str): Status to convert. Return: BatchJobStatus: The enum variant for the given string. \"\"\" for _ , enum_value in cls . __members__ . items (): if enum_value . value == status : return enum_value raise ValueError ( f \"Unknown status ' { status } '\" )","title":"from_str()"},{"location":"batch-reference/#hume.batch.batch_job_status.BatchJobStatus.is_terminal","text":"Check if a status is \"terminal\". Parameters: Name Type Description Default status BatchJobStatus Status to check. required Return bool: Whether the status is \"terminal\". Source code in hume/batch/batch_job_status.py 13 14 15 16 17 18 19 20 21 22 23 @classmethod def is_terminal ( cls , status : \"BatchJobStatus\" ) -> bool : \"\"\"Check if a status is \"terminal\". Args: status (BatchJobStatus): Status to check. Return: bool: Whether the status is \"terminal\". \"\"\" return status in [ cls . COMPLETED , cls . FAILED ] Batch job.","title":"is_terminal()"},{"location":"batch-reference/#hume.batch.batch_job.BatchJob","text":"Batch job. Source code in hume/batch/batch_job.py 15 16 17 18 19 20 21 22 23 24 25 26 27 28 29 30 31 32 33 34 35 36 37 38 39 40 41 42 43 44 45 46 47 48 49 50 51 52 53 54 55 56 57 58 59 60 61 62 63 64 65 66 67 68 69 70 71 72 73 74 75 76 77 78 79 80 81 class BatchJob : \"\"\"Batch job.\"\"\" def __init__ ( self , client : \"HumeBatchClient\" , job_id : str ): \"\"\"Construct a BatchJob. Args: client (HumeBatchClient): HumeBatchClient instance. job_id (str): Job ID. \"\"\" self . _client = client self . id = job_id def get_status ( self ) -> BatchJobStatus : \"\"\"Get the status of the job. Returns: BatchJobStatus: The status of the `BatchJob`. \"\"\" return self . get_result () . status def get_result ( self ) -> BatchJobResult : \"\"\"Get the result of the BatchJob. Note that the result of a job may be fetched before the job has completed. You may want to use `job.await_complete()` which will wait for the job to reach a terminal state before returning the result. Returns: BatchJobResult: The result of the `BatchJob`. \"\"\" return self . _client . get_job_result ( self . id ) def await_complete ( self , timeout : int = 300 ) -> BatchJobResult : \"\"\"Block until the job has reached a terminal status. Args: timeout (int): Maximum time in seconds to await. If the timeout is reached before the job reaches a terminal state the job will continue to be processed, but a `HumeClientError` will be raised to the caller of `await_complete`. Raises: ValueError: If the timeout is not valid. Returns: BatchJobResult: The result of the `BatchJob`. \"\"\" if timeout < 1 : raise ValueError ( \"timeout must be at least 1 second\" ) return self . _await_complete ( timeout = timeout ) # pylint: disable=unused-argument @retry () def _await_complete ( self , timeout : int = 300 ) -> BatchJobResult : result = self . _client . get_job_result ( self . id ) if not BatchJobStatus . is_terminal ( result . status ): raise RetryIterError return result def __repr__ ( self ) -> str : \"\"\"Get the string representation of the `BatchJob`. Returns: The the string representation of the `BatchJob`. \"\"\" return f 'Job(id=\" { self . id } \")'","title":"BatchJob"},{"location":"batch-reference/#hume.batch.batch_job.BatchJob.__init__","text":"Construct a BatchJob. Parameters: Name Type Description Default client HumeBatchClient HumeBatchClient instance. required job_id str Job ID. required Source code in hume/batch/batch_job.py 18 19 20 21 22 23 24 25 26 def __init__ ( self , client : \"HumeBatchClient\" , job_id : str ): \"\"\"Construct a BatchJob. Args: client (HumeBatchClient): HumeBatchClient instance. job_id (str): Job ID. \"\"\" self . _client = client self . id = job_id","title":"__init__()"},{"location":"batch-reference/#hume.batch.batch_job.BatchJob.__repr__","text":"Get the string representation of the BatchJob . Returns: Type Description str The the string representation of the BatchJob . Source code in hume/batch/batch_job.py 75 76 77 78 79 80 81 def __repr__ ( self ) -> str : \"\"\"Get the string representation of the `BatchJob`. Returns: The the string representation of the `BatchJob`. \"\"\" return f 'Job(id=\" { self . id } \")'","title":"__repr__()"},{"location":"batch-reference/#hume.batch.batch_job.BatchJob.await_complete","text":"Block until the job has reached a terminal status. Parameters: Name Type Description Default timeout int Maximum time in seconds to await. If the timeout is reached before the job reaches a terminal state the job will continue to be processed, but a HumeClientError will be raised to the caller of await_complete . 300 Raises: Type Description ValueError If the timeout is not valid. Returns: Name Type Description BatchJobResult BatchJobResult The result of the BatchJob . Source code in hume/batch/batch_job.py 48 49 50 51 52 53 54 55 56 57 58 59 60 61 62 63 64 65 def await_complete ( self , timeout : int = 300 ) -> BatchJobResult : \"\"\"Block until the job has reached a terminal status. Args: timeout (int): Maximum time in seconds to await. If the timeout is reached before the job reaches a terminal state the job will continue to be processed, but a `HumeClientError` will be raised to the caller of `await_complete`. Raises: ValueError: If the timeout is not valid. Returns: BatchJobResult: The result of the `BatchJob`. \"\"\" if timeout < 1 : raise ValueError ( \"timeout must be at least 1 second\" ) return self . _await_complete ( timeout = timeout )","title":"await_complete()"},{"location":"batch-reference/#hume.batch.batch_job.BatchJob.get_result","text":"Get the result of the BatchJob. Note that the result of a job may be fetched before the job has completed. You may want to use job.await_complete() which will wait for the job to reach a terminal state before returning the result. Returns: Name Type Description BatchJobResult BatchJobResult The result of the BatchJob . Source code in hume/batch/batch_job.py 36 37 38 39 40 41 42 43 44 45 46 def get_result ( self ) -> BatchJobResult : \"\"\"Get the result of the BatchJob. Note that the result of a job may be fetched before the job has completed. You may want to use `job.await_complete()` which will wait for the job to reach a terminal state before returning the result. Returns: BatchJobResult: The result of the `BatchJob`. \"\"\" return self . _client . get_job_result ( self . id )","title":"get_result()"},{"location":"batch-reference/#hume.batch.batch_job.BatchJob.get_status","text":"Get the status of the job. Returns: Name Type Description BatchJobStatus BatchJobStatus The status of the BatchJob . Source code in hume/batch/batch_job.py 28 29 30 31 32 33 34 def get_status ( self ) -> BatchJobStatus : \"\"\"Get the status of the job. Returns: BatchJobStatus: The status of the `BatchJob`. \"\"\" return self . get_result () . status","title":"get_status()"}]}