# This file was auto-generated by Fern from our API Definition.

from ...core.pydantic_utilities import UniversalBaseModel
import pydantic
import typing
from ...core.pydantic_utilities import IS_PYDANTIC_V2


class SnippetAudioChunk(UniversalBaseModel):
    audio: str = pydantic.Field()
    """
    The generated audio output chunk in the requested format.
    """

    chunk_index: int = pydantic.Field()
    """
    The index of the audio chunk in the snippet.
    """

    generation_id: str = pydantic.Field()
    """
    The generation ID of the parent snippet that this chunk corresponds to.
    """

    is_last_chunk: bool = pydantic.Field()
    """
    Whether or not this is the last chunk streamed back from the decoder for one input snippet.
    """

    snippet_id: str = pydantic.Field()
    """
    The ID of the parent snippet that this chunk corresponds to.
    """

    text: str = pydantic.Field()
    """
    The text of the parent snippet that this chunk corresponds to.
    """

    utterance_index: typing.Optional[int] = pydantic.Field(default=None)
    """
    The index of the utterance in the request that the parent snippet of this chunk corresponds to.
    """

    if IS_PYDANTIC_V2:
        model_config: typing.ClassVar[pydantic.ConfigDict] = pydantic.ConfigDict(extra="allow", frozen=True)  # type: ignore # Pydantic v2
    else:

        class Config:
            frozen = True
            smart_union = True
            extra = pydantic.Extra.allow
