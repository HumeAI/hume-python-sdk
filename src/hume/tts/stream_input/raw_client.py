# This file was auto-generated by Fern from our API Definition.

import typing
from contextlib import asynccontextmanager, contextmanager

import httpx
import websockets.exceptions
import websockets.sync.client as websockets_sync_client
from ...core.api_error import ApiError
from ...core.client_wrapper import AsyncClientWrapper, SyncClientWrapper
from ...core.request_options import RequestOptions
from ..types.audio_format_type import AudioFormatType
from ..types.octave_version import OctaveVersion
from ..types.timestamp_type import TimestampType
from .socket_client import AsyncStreamInputSocketClient, StreamInputSocketClient

try:
    from websockets.legacy.client import connect as websockets_client_connect  # type: ignore
except ImportError:
    from websockets import connect as websockets_client_connect  # type: ignore


class RawStreamInputClient:
    def __init__(self, *, client_wrapper: SyncClientWrapper):
        self._client_wrapper = client_wrapper

    @contextmanager
    def connect(
        self,
        *,
        access_token: typing.Optional[str] = None,
        context_generation_id: typing.Optional[str] = None,
        format_type: typing.Optional[AudioFormatType] = None,
        include_timestamp_types: typing.Optional[typing.Union[TimestampType, typing.Sequence[TimestampType]]] = None,
        instant_mode: typing.Optional[bool] = None,
        no_binary: typing.Optional[bool] = None,
        strip_headers: typing.Optional[bool] = None,
        version: typing.Optional[OctaveVersion] = None,
        api_key: typing.Optional[str] = None,
        request_options: typing.Optional[RequestOptions] = None,
    ) -> typing.Iterator[StreamInputSocketClient]:
        """
        Generate emotionally expressive speech.

        Parameters
        ----------
        access_token : typing.Optional[str]
            Access token used for authenticating the client. If not provided, an `api_key` must be provided to authenticate.

            The access token is generated using both an API key and a Secret key, which provides an additional layer of security compared to using just an API key.

            For more details, refer to the [Authentication Strategies Guide](/docs/introduction/api-key#authentication-strategies).

        context_generation_id : typing.Optional[str]
            The ID of a prior TTS generation to use as context for generating consistent speech style and prosody across multiple requests. Including context may increase audio generation times.

        format_type : typing.Optional[AudioFormatType]
            The format to be used for audio generation.

        include_timestamp_types : typing.Optional[typing.Union[TimestampType, typing.Sequence[TimestampType]]]
            The set of timestamp types to include in the response.

        instant_mode : typing.Optional[bool]
            Enables ultra-low latency streaming, significantly reducing the time until the first audio chunk is received. Recommended for real-time applications requiring immediate audio playback. For further details, see our documentation on [instant mode](/docs/text-to-speech-tts/overview#ultra-low-latency-streaming-instant-mode).

        no_binary : typing.Optional[bool]
            If enabled, no binary websocket messages will be sent to the client.

        strip_headers : typing.Optional[bool]
            If enabled, the audio for all the chunks of a generation, once concatenated together, will constitute a single audio file. Otherwise, if disabled, each chunk's audio will be its own audio file, each with its own headers (if applicable).

        version : typing.Optional[OctaveVersion]
            The version of the Octave Model to use. 1 for the legacy model, 2 for the new model.

        api_key : typing.Optional[str]
            API key used for authenticating the client. If not provided, an `access_token` must be provided to authenticate.

            For more details, refer to the [Authentication Strategies Guide](/docs/introduction/api-key#authentication-strategies).

        request_options : typing.Optional[RequestOptions]
            Request-specific configuration.

        Returns
        -------
        StreamInputSocketClient
        """
        ws_url = self._client_wrapper.get_environment().tts + "/stream/input"
        query_params = httpx.QueryParams()
        if access_token is not None:
            query_params = query_params.add("access_token", access_token)
        if context_generation_id is not None:
            query_params = query_params.add("context_generation_id", context_generation_id)
        if format_type is not None:
            query_params = query_params.add("format_type", format_type)
        if include_timestamp_types is not None:
            query_params = query_params.add("include_timestamp_types", include_timestamp_types)
        if instant_mode is not None:
            query_params = query_params.add("instant_mode", instant_mode)
        if no_binary is not None:
            query_params = query_params.add("no_binary", no_binary)
        if strip_headers is not None:
            query_params = query_params.add("strip_headers", strip_headers)
        if version is not None:
            query_params = query_params.add("version", version)
        if api_key is not None:
            query_params = query_params.add("api_key", api_key)
        ws_url = ws_url + f"?{query_params}"
        headers = self._client_wrapper.get_headers()
        if request_options and "additional_headers" in request_options:
            headers.update(request_options["additional_headers"])
        try:
            with websockets_sync_client.connect(ws_url, additional_headers=headers) as protocol:
                yield StreamInputSocketClient(websocket=protocol)
        except websockets.exceptions.InvalidStatusCode as exc:
            status_code: int = exc.status_code
            if status_code == 401:
                raise ApiError(
                    status_code=status_code,
                    headers=dict(headers),
                    body="Websocket initialized with invalid credentials.",
                )
            raise ApiError(
                status_code=status_code,
                headers=dict(headers),
                body="Unexpected error when initializing websocket connection.",
            )


class AsyncRawStreamInputClient:
    def __init__(self, *, client_wrapper: AsyncClientWrapper):
        self._client_wrapper = client_wrapper

    @asynccontextmanager
    async def connect(
        self,
        *,
        access_token: typing.Optional[str] = None,
        context_generation_id: typing.Optional[str] = None,
        format_type: typing.Optional[AudioFormatType] = None,
        include_timestamp_types: typing.Optional[typing.Union[TimestampType, typing.Sequence[TimestampType]]] = None,
        instant_mode: typing.Optional[bool] = None,
        no_binary: typing.Optional[bool] = None,
        strip_headers: typing.Optional[bool] = None,
        version: typing.Optional[OctaveVersion] = None,
        api_key: typing.Optional[str] = None,
        request_options: typing.Optional[RequestOptions] = None,
    ) -> typing.AsyncIterator[AsyncStreamInputSocketClient]:
        """
        Generate emotionally expressive speech.

        Parameters
        ----------
        access_token : typing.Optional[str]
            Access token used for authenticating the client. If not provided, an `api_key` must be provided to authenticate.

            The access token is generated using both an API key and a Secret key, which provides an additional layer of security compared to using just an API key.

            For more details, refer to the [Authentication Strategies Guide](/docs/introduction/api-key#authentication-strategies).

        context_generation_id : typing.Optional[str]
            The ID of a prior TTS generation to use as context for generating consistent speech style and prosody across multiple requests. Including context may increase audio generation times.

        format_type : typing.Optional[AudioFormatType]
            The format to be used for audio generation.

        include_timestamp_types : typing.Optional[typing.Union[TimestampType, typing.Sequence[TimestampType]]]
            The set of timestamp types to include in the response.

        instant_mode : typing.Optional[bool]
            Enables ultra-low latency streaming, significantly reducing the time until the first audio chunk is received. Recommended for real-time applications requiring immediate audio playback. For further details, see our documentation on [instant mode](/docs/text-to-speech-tts/overview#ultra-low-latency-streaming-instant-mode).

        no_binary : typing.Optional[bool]
            If enabled, no binary websocket messages will be sent to the client.

        strip_headers : typing.Optional[bool]
            If enabled, the audio for all the chunks of a generation, once concatenated together, will constitute a single audio file. Otherwise, if disabled, each chunk's audio will be its own audio file, each with its own headers (if applicable).

        version : typing.Optional[OctaveVersion]
            The version of the Octave Model to use. 1 for the legacy model, 2 for the new model.

        api_key : typing.Optional[str]
            API key used for authenticating the client. If not provided, an `access_token` must be provided to authenticate.

            For more details, refer to the [Authentication Strategies Guide](/docs/introduction/api-key#authentication-strategies).

        request_options : typing.Optional[RequestOptions]
            Request-specific configuration.

        Returns
        -------
        AsyncStreamInputSocketClient
        """
        ws_url = self._client_wrapper.get_environment().tts + "/stream/input"
        query_params = httpx.QueryParams()
        if access_token is not None:
            query_params = query_params.add("access_token", access_token)
        if context_generation_id is not None:
            query_params = query_params.add("context_generation_id", context_generation_id)
        if format_type is not None:
            query_params = query_params.add("format_type", format_type)
        if include_timestamp_types is not None:
            query_params = query_params.add("include_timestamp_types", include_timestamp_types)
        if instant_mode is not None:
            query_params = query_params.add("instant_mode", instant_mode)
        if no_binary is not None:
            query_params = query_params.add("no_binary", no_binary)
        if strip_headers is not None:
            query_params = query_params.add("strip_headers", strip_headers)
        if version is not None:
            query_params = query_params.add("version", version)
        if api_key is not None:
            query_params = query_params.add("api_key", api_key)
        ws_url = ws_url + f"?{query_params}"
        headers = self._client_wrapper.get_headers()
        if request_options and "additional_headers" in request_options:
            headers.update(request_options["additional_headers"])
        try:
            async with websockets_client_connect(ws_url, extra_headers=headers) as protocol:
                yield AsyncStreamInputSocketClient(websocket=protocol)
        except websockets.exceptions.InvalidStatusCode as exc:
            status_code: int = exc.status_code
            if status_code == 401:
                raise ApiError(
                    status_code=status_code,
                    headers=dict(headers),
                    body="Websocket initialized with invalid credentials.",
                )
            raise ApiError(
                status_code=status_code,
                headers=dict(headers),
                body="Unexpected error when initializing websocket connection.",
            )
