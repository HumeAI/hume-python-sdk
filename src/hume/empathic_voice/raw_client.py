# This file was auto-generated by Fern from our API Definition.

import typing
from json.decoder import JSONDecodeError

from ..core.api_error import ApiError
from ..core.client_wrapper import AsyncClientWrapper, SyncClientWrapper
from ..core.http_response import AsyncHttpResponse, HttpResponse
from ..core.pydantic_utilities import parse_obj_as
from ..core.request_options import RequestOptions
from .errors.unprocessable_entity_error import UnprocessableEntityError
from .types.http_validation_error import HttpValidationError
from .types.supports_tool_use import SupportsToolUse

# this is used as the default value for optional parameters
OMIT = typing.cast(typing.Any, ...)


class RawEmpathicVoiceClient:
    def __init__(self, *, client_wrapper: SyncClientWrapper):
        self._client_wrapper = client_wrapper

    def custom_language_model_supports_tool_use_v_0_evi_custom_language_model_supports_tool_use_post(
        self, *, model_resource: str, request_options: typing.Optional[RequestOptions] = None
    ) -> HttpResponse[SupportsToolUse]:
        """
        Parameters
        ----------
        model_resource : str

        request_options : typing.Optional[RequestOptions]
            Request-specific configuration.

        Returns
        -------
        HttpResponse[SupportsToolUse]
            Successful Response
        """
        _response = self._client_wrapper.httpx_client.request(
            "v0/evi/custom_language_model_supports_tool_use",
            method="POST",
            json={
                "model_resource": model_resource,
            },
            headers={
                "content-type": "application/json",
            },
            request_options=request_options,
            omit=OMIT,
        )
        try:
            if 200 <= _response.status_code < 300:
                _data = typing.cast(
                    SupportsToolUse,
                    parse_obj_as(
                        type_=SupportsToolUse,  # type: ignore
                        object_=_response.json(),
                    ),
                )
                return HttpResponse(response=_response, data=_data)
            if _response.status_code == 422:
                raise UnprocessableEntityError(
                    headers=dict(_response.headers),
                    body=typing.cast(
                        HttpValidationError,
                        parse_obj_as(
                            type_=HttpValidationError,  # type: ignore
                            object_=_response.json(),
                        ),
                    ),
                )
            _response_json = _response.json()
        except JSONDecodeError:
            raise ApiError(status_code=_response.status_code, headers=dict(_response.headers), body=_response.text)
        raise ApiError(status_code=_response.status_code, headers=dict(_response.headers), body=_response_json)


class AsyncRawEmpathicVoiceClient:
    def __init__(self, *, client_wrapper: AsyncClientWrapper):
        self._client_wrapper = client_wrapper

    async def custom_language_model_supports_tool_use_v_0_evi_custom_language_model_supports_tool_use_post(
        self, *, model_resource: str, request_options: typing.Optional[RequestOptions] = None
    ) -> AsyncHttpResponse[SupportsToolUse]:
        """
        Parameters
        ----------
        model_resource : str

        request_options : typing.Optional[RequestOptions]
            Request-specific configuration.

        Returns
        -------
        AsyncHttpResponse[SupportsToolUse]
            Successful Response
        """
        _response = await self._client_wrapper.httpx_client.request(
            "v0/evi/custom_language_model_supports_tool_use",
            method="POST",
            json={
                "model_resource": model_resource,
            },
            headers={
                "content-type": "application/json",
            },
            request_options=request_options,
            omit=OMIT,
        )
        try:
            if 200 <= _response.status_code < 300:
                _data = typing.cast(
                    SupportsToolUse,
                    parse_obj_as(
                        type_=SupportsToolUse,  # type: ignore
                        object_=_response.json(),
                    ),
                )
                return AsyncHttpResponse(response=_response, data=_data)
            if _response.status_code == 422:
                raise UnprocessableEntityError(
                    headers=dict(_response.headers),
                    body=typing.cast(
                        HttpValidationError,
                        parse_obj_as(
                            type_=HttpValidationError,  # type: ignore
                            object_=_response.json(),
                        ),
                    ),
                )
            _response_json = _response.json()
        except JSONDecodeError:
            raise ApiError(status_code=_response.status_code, headers=dict(_response.headers), body=_response.text)
        raise ApiError(status_code=_response.status_code, headers=dict(_response.headers), body=_response_json)
