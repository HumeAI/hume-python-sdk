# This file was auto-generated by Fern from our API Definition.

import datetime as dt
import typing

from ...core.datetime_utils import serialize_datetime
from ...core.pydantic_utilities import deep_union_pydantic_dicts, pydantic_v1
from .return_active_chat_count_per_tag import ReturnActiveChatCountPerTag


class ReturnActiveChatCount(pydantic_v1.BaseModel):
    """
    A description of current chat chat sessions for a user
    """

    timestamp: int = pydantic_v1.Field()
    """
    The timestamp for when chat status was measured. Formatted as a Unix epoch milliseconds.
    """

    total_user_active_chats: int = pydantic_v1.Field()
    """
    The total number of active chats for this user.
    """

    max_allowed_active_chats: typing.Optional[int] = pydantic_v1.Field(default=None)
    """
    The maximum number of concurrent active chats for this user.
    """

    more_active_chats_allowed: bool = pydantic_v1.Field()
    """
    Boolean indicating if the user is allowed to start more chats.
    """

    per_tag: typing.Optional[typing.List[typing.Optional[ReturnActiveChatCountPerTag]]] = pydantic_v1.Field(
        default=None
    )
    """
    Optional List of chat counts per tag.
    """

    def json(self, **kwargs: typing.Any) -> str:
        kwargs_with_defaults: typing.Any = {"by_alias": True, "exclude_unset": True, **kwargs}
        return super().json(**kwargs_with_defaults)

    def dict(self, **kwargs: typing.Any) -> typing.Dict[str, typing.Any]:
        kwargs_with_defaults_exclude_unset: typing.Any = {"by_alias": True, "exclude_unset": True, **kwargs}
        kwargs_with_defaults_exclude_none: typing.Any = {"by_alias": True, "exclude_none": True, **kwargs}

        return deep_union_pydantic_dicts(
            super().dict(**kwargs_with_defaults_exclude_unset), super().dict(**kwargs_with_defaults_exclude_none)
        )

    class Config:
        frozen = True
        smart_union = True
        extra = pydantic_v1.Extra.allow
        json_encoders = {dt.datetime: serialize_datetime}
