# This file was auto-generated by Fern from our API Definition.

import datetime as dt
import typing

from ...core.datetime_utils import serialize_datetime
from ...core.pydantic_utilities import deep_union_pydantic_dicts, pydantic_v1


class ReturnChatEvent(pydantic_v1.BaseModel):
    """
    A description of a single event in a chat returned from the server
    """

    id: str = pydantic_v1.Field()
    """
    Identifier for a chat event. Formatted as a UUID.
    """

    timestamp: int = pydantic_v1.Field()
    """
    The timestamp when the chat event occurred, formatted as a Unix epoch milliseconds.
    """

    role: str = pydantic_v1.Field()
    """
    The role of the user who generated the chat event. Values from the Role enum.
    """

    type: str = pydantic_v1.Field()
    """
    The type of chat event. Values from the ChatEventType enum.
    """

    message_text: typing.Optional[str] = pydantic_v1.Field(default=None)
    """
    The text of the chat message, either transcribed from speaker audio or generated by the agent.
    """

    emotion_features: typing.Optional[str] = pydantic_v1.Field(default=None)
    """
    Stringified JSON with data about emotional content/prosody of the event.
    """

    metadata: typing.Optional[str] = pydantic_v1.Field(default=None)
    """
    Stringified JSON with additional metadata about the chat event.
    """

    def json(self, **kwargs: typing.Any) -> str:
        kwargs_with_defaults: typing.Any = {"by_alias": True, "exclude_unset": True, **kwargs}
        return super().json(**kwargs_with_defaults)

    def dict(self, **kwargs: typing.Any) -> typing.Dict[str, typing.Any]:
        kwargs_with_defaults_exclude_unset: typing.Any = {"by_alias": True, "exclude_unset": True, **kwargs}
        kwargs_with_defaults_exclude_none: typing.Any = {"by_alias": True, "exclude_none": True, **kwargs}

        return deep_union_pydantic_dicts(
            super().dict(**kwargs_with_defaults_exclude_unset), super().dict(**kwargs_with_defaults_exclude_none)
        )

    class Config:
        frozen = True
        smart_union = True
        extra = pydantic_v1.Extra.allow
        json_encoders = {dt.datetime: serialize_datetime}
