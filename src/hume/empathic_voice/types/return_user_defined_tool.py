# This file was auto-generated by Fern from our API Definition.

import datetime as dt
import typing

from ...core.datetime_utils import serialize_datetime
from ...core.pydantic_utilities import deep_union_pydantic_dicts, pydantic_v1


class ReturnUserDefinedTool(pydantic_v1.BaseModel):
    """
    A specific tool version returned from the server
    """

    tool_type: str = pydantic_v1.Field()
    """
    Type of Tool. Values from the ToolType enum.
    """

    id: str = pydantic_v1.Field()
    """
    Identifier for a Tool. Formatted as a UUID.
    """

    version: int = pydantic_v1.Field()
    """
    Version number for a Tool. Version numbers should be integers. The combination of configId and version number is unique.
    """

    version_type: str = pydantic_v1.Field()
    """
    Inidicates whether this tool is using a fixed version number or auto-updating to the latest version. Values from the VersionType enum.
    """

    version_description: typing.Optional[str] = pydantic_v1.Field(default=None)
    """
    Description that is appended to a specific version of a Tool.
    """

    name: str = pydantic_v1.Field()
    """
    Name applied to all versions of a particular Tool.
    """

    created_on: int = pydantic_v1.Field()
    """
    The timestamp when the first version of this tool was created.
    """

    modified_on: int = pydantic_v1.Field()
    """
    The timestamp when this version of the tool was created.
    """

    fallback_content: typing.Optional[str] = pydantic_v1.Field(default=None)
    """
    Text to use if the tool fails to generate content.
    """

    description: typing.Optional[str] = pydantic_v1.Field(default=None)
    """
    Text describing what the tool does.
    """

    parameters: str = pydantic_v1.Field()
    """
    Stringified JSON defining the parameters used by this version of the Tool.
    """

    def json(self, **kwargs: typing.Any) -> str:
        kwargs_with_defaults: typing.Any = {"by_alias": True, "exclude_unset": True, **kwargs}
        return super().json(**kwargs_with_defaults)

    def dict(self, **kwargs: typing.Any) -> typing.Dict[str, typing.Any]:
        kwargs_with_defaults_exclude_unset: typing.Any = {"by_alias": True, "exclude_unset": True, **kwargs}
        kwargs_with_defaults_exclude_none: typing.Any = {"by_alias": True, "exclude_none": True, **kwargs}

        return deep_union_pydantic_dicts(
            super().dict(**kwargs_with_defaults_exclude_unset), super().dict(**kwargs_with_defaults_exclude_none)
        )

    class Config:
        frozen = True
        smart_union = True
        extra = pydantic_v1.Extra.allow
        json_encoders = {dt.datetime: serialize_datetime}
