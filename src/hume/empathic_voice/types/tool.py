# This file was auto-generated by Fern from our API Definition.

import datetime as dt
import typing

from ...core.datetime_utils import serialize_datetime
from ...core.pydantic_utilities import deep_union_pydantic_dicts, pydantic_v1
from .tool_type import ToolType


class Tool(pydantic_v1.BaseModel):
    type: ToolType = pydantic_v1.Field()
    """
    Type of tool. Set to `function` for user-defined tools.
    """

    name: str = pydantic_v1.Field()
    """
    Name of the user-defined tool to be enabled.
    """

    parameters: str = pydantic_v1.Field()
    """
    Parameters of the tool. Is a stringified JSON schema.
    
    These parameters define the inputs needed for the toolâ€™s execution, including the expected data type and description for each input field. Structured as a JSON schema, this format ensures the tool receives data in the expected format.
    """

    description: typing.Optional[str] = pydantic_v1.Field(default=None)
    """
    An optional description of what the tool does, used by the supplemental LLM to choose when and how to call the function.
    """

    fallback_content: typing.Optional[str] = pydantic_v1.Field(default=None)
    """
    Optional text passed to the supplemental LLM if the tool call fails. The LLM then uses this text to generate a response back to the user, ensuring continuity in the conversation.
    """

    def json(self, **kwargs: typing.Any) -> str:
        kwargs_with_defaults: typing.Any = {"by_alias": True, "exclude_unset": True, **kwargs}
        return super().json(**kwargs_with_defaults)

    def dict(self, **kwargs: typing.Any) -> typing.Dict[str, typing.Any]:
        kwargs_with_defaults_exclude_unset: typing.Any = {"by_alias": True, "exclude_unset": True, **kwargs}
        kwargs_with_defaults_exclude_none: typing.Any = {"by_alias": True, "exclude_none": True, **kwargs}

        return deep_union_pydantic_dicts(
            super().dict(**kwargs_with_defaults_exclude_unset), super().dict(**kwargs_with_defaults_exclude_none)
        )

    class Config:
        frozen = True
        smart_union = True
        extra = pydantic_v1.Extra.allow
        json_encoders = {dt.datetime: serialize_datetime}
