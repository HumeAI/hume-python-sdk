# This file was auto-generated by Fern from our API Definition.

import datetime as dt
import typing

from ...core.datetime_utils import serialize_datetime
from ...core.pydantic_utilities import deep_union_pydantic_dicts, pydantic_v1
from .chat_message import ChatMessage
from .inference import Inference


class AssistantMessage(pydantic_v1.BaseModel):
    """
    When provided, the output is an assistant message.
    """

    type: typing.Literal["assistant_message"] = pydantic_v1.Field(default="assistant_message")
    """
    The type of message sent through the socket; for an Assistant Message, this must be `assistant_message`.
    
    This message contains both a transcript of the assistant’s response and the expression measurement predictions of the assistant’s audio output.
    """

    custom_session_id: typing.Optional[str] = pydantic_v1.Field(default=None)
    """
    Used to manage conversational state, correlate frontend and backend data, and persist conversations across EVI sessions.
    """

    id: typing.Optional[str] = pydantic_v1.Field(default=None)
    """
    ID of the assistant message. Allows the Assistant Message to be tracked and referenced.
    """

    message: ChatMessage = pydantic_v1.Field()
    """
    Transcript of the message.
    """

    models: Inference = pydantic_v1.Field()
    """
    Inference model results.
    """

    from_text: bool = pydantic_v1.Field()
    """
    Indicates if this message was inserted into the conversation as text from an [Assistant Input message](/reference/empathic-voice-interface-evi/chat/chat#send.Assistant%20Input.text).
    """

    def json(self, **kwargs: typing.Any) -> str:
        kwargs_with_defaults: typing.Any = {"by_alias": True, "exclude_unset": True, **kwargs}
        return super().json(**kwargs_with_defaults)

    def dict(self, **kwargs: typing.Any) -> typing.Dict[str, typing.Any]:
        kwargs_with_defaults_exclude_unset: typing.Any = {"by_alias": True, "exclude_unset": True, **kwargs}
        kwargs_with_defaults_exclude_none: typing.Any = {"by_alias": True, "exclude_none": True, **kwargs}

        return deep_union_pydantic_dicts(
            super().dict(**kwargs_with_defaults_exclude_unset), super().dict(**kwargs_with_defaults_exclude_none)
        )

    class Config:
        frozen = True
        smart_union = True
        extra = pydantic_v1.Extra.allow
        json_encoders = {dt.datetime: serialize_datetime}
