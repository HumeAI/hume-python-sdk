# This file was auto-generated by Fern from our API Definition.

import datetime as dt
import typing

from ...core.datetime_utils import serialize_datetime
from ...core.pydantic_utilities import deep_union_pydantic_dicts, pydantic_v1
from .return_builtin_tool import ReturnBuiltinTool
from .return_language_model import ReturnLanguageModel
from .return_prompt import ReturnPrompt
from .return_user_defined_tool import ReturnUserDefinedTool
from .return_voice import ReturnVoice


class ReturnConfig(pydantic_v1.BaseModel):
    """
    A specific config version returned from the server
    """

    id: typing.Optional[str] = pydantic_v1.Field(default=None)
    """
    Identifier for a Config. Formatted as a UUID.
    """

    version: typing.Optional[int] = pydantic_v1.Field(default=None)
    """
    Version number for a Config. Version numbers should be integers. The combination of configId and version number is unique.
    """

    version_description: typing.Optional[str] = pydantic_v1.Field(default=None)
    """
    Description that is appended to a specific version of a Config.
    """

    name: typing.Optional[str] = pydantic_v1.Field(default=None)
    """
    Name applied to all versions of a particular Config.
    """

    created_on: typing.Optional[int] = pydantic_v1.Field(default=None)
    """
    The timestamp when the first version of this config was created.
    """

    modified_on: typing.Optional[int] = pydantic_v1.Field(default=None)
    """
    The timestamp when this version of the config was created.
    """

    prompt: typing.Optional[ReturnPrompt] = None
    voice: typing.Optional[ReturnVoice] = None
    language_model: typing.Optional[ReturnLanguageModel] = None
    tools: typing.Optional[typing.List[typing.Optional[ReturnUserDefinedTool]]] = pydantic_v1.Field(default=None)
    """
    List of user-defined tools associated with this config.
    """

    builtin_tools: typing.Optional[typing.List[typing.Optional[ReturnBuiltinTool]]] = pydantic_v1.Field(default=None)
    """
    List of built-in tools associated with this config
    """

    def json(self, **kwargs: typing.Any) -> str:
        kwargs_with_defaults: typing.Any = {"by_alias": True, "exclude_unset": True, **kwargs}
        return super().json(**kwargs_with_defaults)

    def dict(self, **kwargs: typing.Any) -> typing.Dict[str, typing.Any]:
        kwargs_with_defaults_exclude_unset: typing.Any = {"by_alias": True, "exclude_unset": True, **kwargs}
        kwargs_with_defaults_exclude_none: typing.Any = {"by_alias": True, "exclude_none": True, **kwargs}

        return deep_union_pydantic_dicts(
            super().dict(**kwargs_with_defaults_exclude_unset), super().dict(**kwargs_with_defaults_exclude_none)
        )

    class Config:
        frozen = True
        smart_union = True
        extra = pydantic_v1.Extra.allow
        json_encoders = {dt.datetime: serialize_datetime}
