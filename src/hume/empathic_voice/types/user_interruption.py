# This file was auto-generated by Fern from our API Definition.

from ...core.pydantic_utilities import UniversalBaseModel
import typing
import pydantic
from ...core.pydantic_utilities import IS_PYDANTIC_V2


class UserInterruption(UniversalBaseModel):
    """
    When provided, the output is an interruption.
    """

    type: typing.Literal["user_interruption"] = pydantic.Field(default="user_interruption")
    """
    The type of message sent through the socket; for a User Interruption message, this must be `user_interruption`.
    
    This message indicates the user has interrupted the assistantâ€™s response. EVI detects the interruption in real-time and sends this message to signal the interruption event. This message allows the system to stop the current audio playback, clear the audio queue, and prepare to handle new user input.
    """

    custom_session_id: typing.Optional[str] = pydantic.Field(default=None)
    """
    Used to manage conversational state, correlate frontend and backend data, and persist conversations across EVI sessions.
    """

    time: int = pydantic.Field()
    """
    Unix timestamp of the detected user interruption.
    """

    if IS_PYDANTIC_V2:
        model_config: typing.ClassVar[pydantic.ConfigDict] = pydantic.ConfigDict(extra="allow", frozen=True)  # type: ignore # Pydantic v2
    else:

        class Config:
            frozen = True
            smart_union = True
            extra = pydantic.Extra.allow
