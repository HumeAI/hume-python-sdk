# This file was auto-generated by Fern from our API Definition.

import datetime as dt
import typing

from ...core.datetime_utils import serialize_datetime
from ...core.pydantic_utilities import deep_union_pydantic_dicts, pydantic_v1


class ReturnCustomVoice(pydantic_v1.BaseModel):
    """
    A custom voice specification returned from the server
    """

    id: str = pydantic_v1.Field()
    """
    Identifier for a Custom Voice. Formatted as a UUID.
    """

    version: int = pydantic_v1.Field()
    """
    Version number for a Custom Voice. Version numbers should be integers. The combination of custom_voice_id and version number is unique.
    """

    name: str = pydantic_v1.Field()
    """
    String with the name of the voice to use. Maximum length of 75 characters. Will be converted to all-uppercase.
    """

    created_on: int = pydantic_v1.Field()
    """
    The timestamp when the first version of this prompt was created.
    """

    modified_on: int = pydantic_v1.Field()
    """
    The timestamp when this version of the prompt was created.
    """

    base_voice: str = pydantic_v1.Field()
    """
    The voice the custom voice is based off of.
    """

    speech_rate_multiplier: typing.Optional[float] = pydantic_v1.Field(default=None)
    """
    The speech rate multiplier for this custom voice.
    """

    parameter_model: str = pydantic_v1.Field()
    """
    The name of the parameter model used to define which attributes are used by `parameters`.
    """

    parameters: typing.Dict[str, float] = pydantic_v1.Field()
    """
    Voice specification for a Config.
    """

    def json(self, **kwargs: typing.Any) -> str:
        kwargs_with_defaults: typing.Any = {"by_alias": True, "exclude_unset": True, **kwargs}
        return super().json(**kwargs_with_defaults)

    def dict(self, **kwargs: typing.Any) -> typing.Dict[str, typing.Any]:
        kwargs_with_defaults_exclude_unset: typing.Any = {"by_alias": True, "exclude_unset": True, **kwargs}
        kwargs_with_defaults_exclude_none: typing.Any = {"by_alias": True, "exclude_none": True, **kwargs}

        return deep_union_pydantic_dicts(
            super().dict(**kwargs_with_defaults_exclude_unset), super().dict(**kwargs_with_defaults_exclude_none)
        )

    class Config:
        frozen = True
        smart_union = True
        extra = pydantic_v1.Extra.allow
        json_encoders = {dt.datetime: serialize_datetime}
