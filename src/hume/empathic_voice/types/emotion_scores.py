# This file was auto-generated by Fern from our API Definition.

from ...core.pydantic_utilities import UniversalBaseModel
import typing_extensions
from ...core.serialization import FieldMetadata
from ...core.pydantic_utilities import IS_PYDANTIC_V2
import typing
import pydantic


class EmotionScores(UniversalBaseModel):
    admiration: typing_extensions.Annotated[float, FieldMetadata(alias="Admiration")]
    adoration: typing_extensions.Annotated[float, FieldMetadata(alias="Adoration")]
    aesthetic_appreciation: typing_extensions.Annotated[float, FieldMetadata(alias="Aesthetic Appreciation")]
    amusement: typing_extensions.Annotated[float, FieldMetadata(alias="Amusement")]
    anger: typing_extensions.Annotated[float, FieldMetadata(alias="Anger")]
    anxiety: typing_extensions.Annotated[float, FieldMetadata(alias="Anxiety")]
    awe: typing_extensions.Annotated[float, FieldMetadata(alias="Awe")]
    awkwardness: typing_extensions.Annotated[float, FieldMetadata(alias="Awkwardness")]
    boredom: typing_extensions.Annotated[float, FieldMetadata(alias="Boredom")]
    calmness: typing_extensions.Annotated[float, FieldMetadata(alias="Calmness")]
    concentration: typing_extensions.Annotated[float, FieldMetadata(alias="Concentration")]
    confusion: typing_extensions.Annotated[float, FieldMetadata(alias="Confusion")]
    contemplation: typing_extensions.Annotated[float, FieldMetadata(alias="Contemplation")]
    contempt: typing_extensions.Annotated[float, FieldMetadata(alias="Contempt")]
    contentment: typing_extensions.Annotated[float, FieldMetadata(alias="Contentment")]
    craving: typing_extensions.Annotated[float, FieldMetadata(alias="Craving")]
    desire: typing_extensions.Annotated[float, FieldMetadata(alias="Desire")]
    determination: typing_extensions.Annotated[float, FieldMetadata(alias="Determination")]
    disappointment: typing_extensions.Annotated[float, FieldMetadata(alias="Disappointment")]
    disgust: typing_extensions.Annotated[float, FieldMetadata(alias="Disgust")]
    distress: typing_extensions.Annotated[float, FieldMetadata(alias="Distress")]
    doubt: typing_extensions.Annotated[float, FieldMetadata(alias="Doubt")]
    ecstasy: typing_extensions.Annotated[float, FieldMetadata(alias="Ecstasy")]
    embarrassment: typing_extensions.Annotated[float, FieldMetadata(alias="Embarrassment")]
    empathic_pain: typing_extensions.Annotated[float, FieldMetadata(alias="Empathic Pain")]
    entrancement: typing_extensions.Annotated[float, FieldMetadata(alias="Entrancement")]
    envy: typing_extensions.Annotated[float, FieldMetadata(alias="Envy")]
    excitement: typing_extensions.Annotated[float, FieldMetadata(alias="Excitement")]
    fear: typing_extensions.Annotated[float, FieldMetadata(alias="Fear")]
    guilt: typing_extensions.Annotated[float, FieldMetadata(alias="Guilt")]
    horror: typing_extensions.Annotated[float, FieldMetadata(alias="Horror")]
    interest: typing_extensions.Annotated[float, FieldMetadata(alias="Interest")]
    joy: typing_extensions.Annotated[float, FieldMetadata(alias="Joy")]
    love: typing_extensions.Annotated[float, FieldMetadata(alias="Love")]
    nostalgia: typing_extensions.Annotated[float, FieldMetadata(alias="Nostalgia")]
    pain: typing_extensions.Annotated[float, FieldMetadata(alias="Pain")]
    pride: typing_extensions.Annotated[float, FieldMetadata(alias="Pride")]
    realization: typing_extensions.Annotated[float, FieldMetadata(alias="Realization")]
    relief: typing_extensions.Annotated[float, FieldMetadata(alias="Relief")]
    romance: typing_extensions.Annotated[float, FieldMetadata(alias="Romance")]
    sadness: typing_extensions.Annotated[float, FieldMetadata(alias="Sadness")]
    satisfaction: typing_extensions.Annotated[float, FieldMetadata(alias="Satisfaction")]
    shame: typing_extensions.Annotated[float, FieldMetadata(alias="Shame")]
    surprise_negative: typing_extensions.Annotated[float, FieldMetadata(alias="Surprise (negative)")]
    surprise_positive: typing_extensions.Annotated[float, FieldMetadata(alias="Surprise (positive)")]
    sympathy: typing_extensions.Annotated[float, FieldMetadata(alias="Sympathy")]
    tiredness: typing_extensions.Annotated[float, FieldMetadata(alias="Tiredness")]
    triumph: typing_extensions.Annotated[float, FieldMetadata(alias="Triumph")]

    if IS_PYDANTIC_V2:
        model_config: typing.ClassVar[pydantic.ConfigDict] = pydantic.ConfigDict(extra="allow", frozen=True)  # type: ignore # Pydantic v2
    else:

        class Config:
            frozen = True
            smart_union = True
            extra = pydantic.Extra.allow
