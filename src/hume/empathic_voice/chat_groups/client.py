# This file was auto-generated by Fern from our API Definition.

import typing
from json.decoder import JSONDecodeError

from ...core.api_error import ApiError
from ...core.client_wrapper import AsyncClientWrapper, SyncClientWrapper
from ...core.jsonable_encoder import jsonable_encoder
from ...core.pydantic_utilities import pydantic_v1
from ...core.request_options import RequestOptions
from ..types.return_chat_group_paged_events import ReturnChatGroupPagedEvents
from ..types.return_paged_chat_groups import ReturnPagedChatGroups


class ChatGroupsClient:
    def __init__(self, *, client_wrapper: SyncClientWrapper):
        self._client_wrapper = client_wrapper

    def list_chat_groups(
        self,
        *,
        page_number: typing.Optional[int] = None,
        page_size: typing.Optional[int] = None,
        request_options: typing.Optional[RequestOptions] = None,
    ) -> ReturnPagedChatGroups:
        """
        Parameters
        ----------
        page_number : typing.Optional[int]
            The page number of the results to return.

        page_size : typing.Optional[int]
            The maximum number of results to include per page.

        request_options : typing.Optional[RequestOptions]
            Request-specific configuration.

        Returns
        -------
        ReturnPagedChatGroups
            Success

        Examples
        --------
        from hume.client import HumeClient

        client = HumeClient(
            api_key="YOUR_API_KEY",
        )
        client.empathic_voice.chat_groups.list_chat_groups()
        """
        _response = self._client_wrapper.httpx_client.request(
            "v0/evi/chat_groups",
            method="GET",
            params={"page_number": page_number, "page_size": page_size},
            request_options=request_options,
        )
        if 200 <= _response.status_code < 300:
            return pydantic_v1.parse_obj_as(ReturnPagedChatGroups, _response.json())  # type: ignore
        try:
            _response_json = _response.json()
        except JSONDecodeError:
            raise ApiError(status_code=_response.status_code, body=_response.text)
        raise ApiError(status_code=_response.status_code, body=_response_json)

    def list_chat_group_events(
        self,
        id: str,
        *,
        page_size: typing.Optional[int] = None,
        page_number: typing.Optional[int] = None,
        ascending_order: typing.Optional[bool] = None,
        request_options: typing.Optional[RequestOptions] = None,
    ) -> ReturnChatGroupPagedEvents:
        """
        Parameters
        ----------
        id : str
            Identifier for a chat. Formatted as a UUID.

        page_size : typing.Optional[int]
            The maximum number of results to include per page.

        page_number : typing.Optional[int]
            The page number of the results to return.

        ascending_order : typing.Optional[bool]
            Boolean to indicate if the results should be paginated in chronological order or reverse-chronological order. Defaults to true.

        request_options : typing.Optional[RequestOptions]
            Request-specific configuration.

        Returns
        -------
        ReturnChatGroupPagedEvents
            Success

        Examples
        --------
        from hume.client import HumeClient

        client = HumeClient(
            api_key="YOUR_API_KEY",
        )
        client.empathic_voice.chat_groups.list_chat_group_events(
            id="id",
        )
        """
        _response = self._client_wrapper.httpx_client.request(
            f"v0/evi/chat_groups/{jsonable_encoder(id)}/events",
            method="GET",
            params={"page_size": page_size, "page_number": page_number, "ascending_order": ascending_order},
            request_options=request_options,
        )
        if 200 <= _response.status_code < 300:
            return pydantic_v1.parse_obj_as(ReturnChatGroupPagedEvents, _response.json())  # type: ignore
        try:
            _response_json = _response.json()
        except JSONDecodeError:
            raise ApiError(status_code=_response.status_code, body=_response.text)
        raise ApiError(status_code=_response.status_code, body=_response_json)


class AsyncChatGroupsClient:
    def __init__(self, *, client_wrapper: AsyncClientWrapper):
        self._client_wrapper = client_wrapper

    async def list_chat_groups(
        self,
        *,
        page_number: typing.Optional[int] = None,
        page_size: typing.Optional[int] = None,
        request_options: typing.Optional[RequestOptions] = None,
    ) -> ReturnPagedChatGroups:
        """
        Parameters
        ----------
        page_number : typing.Optional[int]
            The page number of the results to return.

        page_size : typing.Optional[int]
            The maximum number of results to include per page.

        request_options : typing.Optional[RequestOptions]
            Request-specific configuration.

        Returns
        -------
        ReturnPagedChatGroups
            Success

        Examples
        --------
        from hume.client import AsyncHumeClient

        client = AsyncHumeClient(
            api_key="YOUR_API_KEY",
        )
        await client.empathic_voice.chat_groups.list_chat_groups()
        """
        _response = await self._client_wrapper.httpx_client.request(
            "v0/evi/chat_groups",
            method="GET",
            params={"page_number": page_number, "page_size": page_size},
            request_options=request_options,
        )
        if 200 <= _response.status_code < 300:
            return pydantic_v1.parse_obj_as(ReturnPagedChatGroups, _response.json())  # type: ignore
        try:
            _response_json = _response.json()
        except JSONDecodeError:
            raise ApiError(status_code=_response.status_code, body=_response.text)
        raise ApiError(status_code=_response.status_code, body=_response_json)

    async def list_chat_group_events(
        self,
        id: str,
        *,
        page_size: typing.Optional[int] = None,
        page_number: typing.Optional[int] = None,
        ascending_order: typing.Optional[bool] = None,
        request_options: typing.Optional[RequestOptions] = None,
    ) -> ReturnChatGroupPagedEvents:
        """
        Parameters
        ----------
        id : str
            Identifier for a chat. Formatted as a UUID.

        page_size : typing.Optional[int]
            The maximum number of results to include per page.

        page_number : typing.Optional[int]
            The page number of the results to return.

        ascending_order : typing.Optional[bool]
            Boolean to indicate if the results should be paginated in chronological order or reverse-chronological order. Defaults to true.

        request_options : typing.Optional[RequestOptions]
            Request-specific configuration.

        Returns
        -------
        ReturnChatGroupPagedEvents
            Success

        Examples
        --------
        from hume.client import AsyncHumeClient

        client = AsyncHumeClient(
            api_key="YOUR_API_KEY",
        )
        await client.empathic_voice.chat_groups.list_chat_group_events(
            id="id",
        )
        """
        _response = await self._client_wrapper.httpx_client.request(
            f"v0/evi/chat_groups/{jsonable_encoder(id)}/events",
            method="GET",
            params={"page_size": page_size, "page_number": page_number, "ascending_order": ascending_order},
            request_options=request_options,
        )
        if 200 <= _response.status_code < 300:
            return pydantic_v1.parse_obj_as(ReturnChatGroupPagedEvents, _response.json())  # type: ignore
        try:
            _response_json = _response.json()
        except JSONDecodeError:
            raise ApiError(status_code=_response.status_code, body=_response.text)
        raise ApiError(status_code=_response.status_code, body=_response_json)
