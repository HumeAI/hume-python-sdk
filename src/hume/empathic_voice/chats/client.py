# This file was auto-generated by Fern from our API Definition.

import typing
from json.decoder import JSONDecodeError

from ...core.api_error import ApiError
from ...core.client_wrapper import AsyncClientWrapper, SyncClientWrapper
from ...core.jsonable_encoder import jsonable_encoder
from ...core.pagination import AsyncPager, SyncPager
from ...core.pydantic_utilities import pydantic_v1
from ...core.request_options import RequestOptions
from ..types.return_chat import ReturnChat
from ..types.return_chat_event import ReturnChatEvent
from ..types.return_chat_paged_events import ReturnChatPagedEvents
from ..types.return_paged_chats import ReturnPagedChats


class ChatsClient:
    def __init__(self, *, client_wrapper: SyncClientWrapper):
        self._client_wrapper = client_wrapper

    def list_chats(
        self,
        *,
        page_number: typing.Optional[int] = None,
        page_size: typing.Optional[int] = None,
        request_options: typing.Optional[RequestOptions] = None,
    ) -> SyncPager[ReturnChat]:
        """
        Parameters
        ----------
        page_number : typing.Optional[int]
            The page number of the results to return.

        page_size : typing.Optional[int]
            The maximum number of results to include per page.

        request_options : typing.Optional[RequestOptions]
            Request-specific configuration.

        Returns
        -------
        SyncPager[ReturnChat]
            Success

        Examples
        --------
        from hume.client import HumeClient

        client = HumeClient(
            api_key="YOUR_API_KEY",
        )
        client.empathic_voice.chats.list_chats()
        """
        page_number = page_number or 1
        _response = self._client_wrapper.httpx_client.request(
            "v0/evi/chats",
            method="GET",
            params={"page_number": page_number, "page_size": page_size},
            request_options=request_options,
        )
        if 200 <= _response.status_code < 300:
            _parsed_response = pydantic_v1.parse_obj_as(ReturnPagedChats, _response.json())  # type: ignore
            _has_next = True
            _get_next = lambda: self.list_chats(
                page_number=page_number + 1, page_size=page_size, request_options=request_options
            )
            _items = _parsed_response.chats_page
            return SyncPager(has_next=_has_next, items=_items, get_next=_get_next)
        try:
            _response_json = _response.json()
        except JSONDecodeError:
            raise ApiError(status_code=_response.status_code, body=_response.text)
        raise ApiError(status_code=_response.status_code, body=_response_json)

    def list_chat_events(
        self,
        id: str,
        *,
        page_size: typing.Optional[int] = None,
        page_number: typing.Optional[int] = None,
        request_options: typing.Optional[RequestOptions] = None,
    ) -> SyncPager[ReturnChatEvent]:
        """
        Parameters
        ----------
        id : str
            Identifier for a chat. Formatted as a UUID.

        page_size : typing.Optional[int]
            The maximum number of results to include per page.

        page_number : typing.Optional[int]
            The page number of the results to return.

        request_options : typing.Optional[RequestOptions]
            Request-specific configuration.

        Returns
        -------
        SyncPager[ReturnChatEvent]
            Success

        Examples
        --------
        from hume.client import HumeClient

        client = HumeClient(
            api_key="YOUR_API_KEY",
        )
        client.empathic_voice.chats.list_chat_events(
            id="id",
        )
        """
        page_number = page_number or 1
        _response = self._client_wrapper.httpx_client.request(
            f"v0/evi/chats/{jsonable_encoder(id)}",
            method="GET",
            params={"page_size": page_size, "page_number": page_number},
            request_options=request_options,
        )
        if 200 <= _response.status_code < 300:
            _parsed_response = pydantic_v1.parse_obj_as(ReturnChatPagedEvents, _response.json())  # type: ignore
            _has_next = True
            _get_next = lambda: self.list_chat_events(
                id, page_size=page_size, page_number=page_number + 1, request_options=request_options
            )
            _items = _parsed_response.events_page
            return SyncPager(has_next=_has_next, items=_items, get_next=_get_next)
        try:
            _response_json = _response.json()
        except JSONDecodeError:
            raise ApiError(status_code=_response.status_code, body=_response.text)
        raise ApiError(status_code=_response.status_code, body=_response_json)


class AsyncChatsClient:
    def __init__(self, *, client_wrapper: AsyncClientWrapper):
        self._client_wrapper = client_wrapper

    async def list_chats(
        self,
        *,
        page_number: typing.Optional[int] = None,
        page_size: typing.Optional[int] = None,
        request_options: typing.Optional[RequestOptions] = None,
    ) -> AsyncPager[ReturnChat]:
        """
        Parameters
        ----------
        page_number : typing.Optional[int]
            The page number of the results to return.

        page_size : typing.Optional[int]
            The maximum number of results to include per page.

        request_options : typing.Optional[RequestOptions]
            Request-specific configuration.

        Returns
        -------
        AsyncPager[ReturnChat]
            Success

        Examples
        --------
        from hume.client import AsyncHumeClient

        client = AsyncHumeClient(
            api_key="YOUR_API_KEY",
        )
        await client.empathic_voice.chats.list_chats()
        """
        page_number = page_number or 1
        _response = await self._client_wrapper.httpx_client.request(
            "v0/evi/chats",
            method="GET",
            params={"page_number": page_number, "page_size": page_size},
            request_options=request_options,
        )
        if 200 <= _response.status_code < 300:
            _parsed_response = pydantic_v1.parse_obj_as(ReturnPagedChats, _response.json())  # type: ignore
            _has_next = True
            _get_next = lambda: self.list_chats(
                page_number=page_number + 1, page_size=page_size, request_options=request_options
            )
            _items = _parsed_response.chats_page
            return AsyncPager(has_next=_has_next, items=_items, get_next=_get_next)
        try:
            _response_json = _response.json()
        except JSONDecodeError:
            raise ApiError(status_code=_response.status_code, body=_response.text)
        raise ApiError(status_code=_response.status_code, body=_response_json)

    async def list_chat_events(
        self,
        id: str,
        *,
        page_size: typing.Optional[int] = None,
        page_number: typing.Optional[int] = None,
        request_options: typing.Optional[RequestOptions] = None,
    ) -> AsyncPager[ReturnChatEvent]:
        """
        Parameters
        ----------
        id : str
            Identifier for a chat. Formatted as a UUID.

        page_size : typing.Optional[int]
            The maximum number of results to include per page.

        page_number : typing.Optional[int]
            The page number of the results to return.

        request_options : typing.Optional[RequestOptions]
            Request-specific configuration.

        Returns
        -------
        AsyncPager[ReturnChatEvent]
            Success

        Examples
        --------
        from hume.client import AsyncHumeClient

        client = AsyncHumeClient(
            api_key="YOUR_API_KEY",
        )
        await client.empathic_voice.chats.list_chat_events(
            id="id",
        )
        """
        page_number = page_number or 1
        _response = await self._client_wrapper.httpx_client.request(
            f"v0/evi/chats/{jsonable_encoder(id)}",
            method="GET",
            params={"page_size": page_size, "page_number": page_number},
            request_options=request_options,
        )
        if 200 <= _response.status_code < 300:
            _parsed_response = pydantic_v1.parse_obj_as(ReturnChatPagedEvents, _response.json())  # type: ignore
            _has_next = True
            _get_next = lambda: self.list_chat_events(
                id, page_size=page_size, page_number=page_number + 1, request_options=request_options
            )
            _items = _parsed_response.events_page
            return AsyncPager(has_next=_has_next, items=_items, get_next=_get_next)
        try:
            _response_json = _response.json()
        except JSONDecodeError:
            raise ApiError(status_code=_response.status_code, body=_response.text)
        raise ApiError(status_code=_response.status_code, body=_response_json)
