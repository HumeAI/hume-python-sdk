# This file was auto-generated by Fern from our API Definition.

import datetime as dt
import typing

from ...core.datetime_utils import serialize_datetime
from ...core.pydantic_utilities import deep_union_pydantic_dicts, pydantic_v1
from .external_model_version_file_type import ExternalModelVersionFileType
from .external_model_version_tag import ExternalModelVersionTag


class ExternalModelVersion(pydantic_v1.BaseModel):
    """
    Latest Model version number
    """

    id: str = pydantic_v1.Field()
    """
    Hume-generated Model version ID
    """

    model_id: str = pydantic_v1.Field()
    """
    Hume-generated Model ID of the parent Model
    """

    user_id: str = pydantic_v1.Field()
    """
    Hume-generated User ID
    """

    version: str = pydantic_v1.Field()
    """
    Model version number
    """

    source_uri: str = pydantic_v1.Field()
    """
    Model version's source file URI
    """

    dataset_version_id: str = pydantic_v1.Field()
    """
    Hume-generated Dataset version ID for the Dataset version the Model version was trained on
    """

    created_on: int = pydantic_v1.Field()
    """
    Created date and time
    """

    metadata: typing.Optional[typing.Dict[str, typing.Dict[str, typing.Any]]] = pydantic_v1.Field(default=None)
    """
    Additional details as key, value pairs
    """

    description: typing.Optional[str] = pydantic_v1.Field(default=None)
    """
    Model version description
    """

    tags: typing.Optional[typing.List[ExternalModelVersionTag]] = pydantic_v1.Field(default=None)
    """
    List of Tags associated with the Model version
    """

    file_type: typing.Optional[ExternalModelVersionFileType] = pydantic_v1.Field(default=None)
    """
    File type: video, audio, video_no_audio, image, text, or mediapipe_facemesh
    """

    target_feature: typing.Optional[str] = pydantic_v1.Field(default=None)
    """
    Target feature, the feature the model was trained against
    """

    task_type: typing.Optional[str] = pydantic_v1.Field(default=None)
    """
    Type of the task used to train
    """

    training_job_id: typing.Optional[str] = pydantic_v1.Field(default=None)
    """
    ID of the batch training job
    """

    def json(self, **kwargs: typing.Any) -> str:
        kwargs_with_defaults: typing.Any = {"by_alias": True, "exclude_unset": True, **kwargs}
        return super().json(**kwargs_with_defaults)

    def dict(self, **kwargs: typing.Any) -> typing.Dict[str, typing.Any]:
        kwargs_with_defaults_exclude_unset: typing.Any = {"by_alias": True, "exclude_unset": True, **kwargs}
        kwargs_with_defaults_exclude_none: typing.Any = {"by_alias": True, "exclude_none": True, **kwargs}

        return deep_union_pydantic_dicts(
            super().dict(**kwargs_with_defaults_exclude_unset), super().dict(**kwargs_with_defaults_exclude_none)
        )

    class Config:
        frozen = True
        smart_union = True
        extra = pydantic_v1.Extra.allow
        json_encoders = {dt.datetime: serialize_datetime}
