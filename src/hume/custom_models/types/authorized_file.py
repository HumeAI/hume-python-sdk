# This file was auto-generated by Fern from our API Definition.

import datetime as dt
import typing

from ...core.datetime_utils import serialize_datetime
from ...core.pydantic_utilities import deep_union_pydantic_dicts, pydantic_v1


class AuthorizedFile(pydantic_v1.BaseModel):
    """
    File details
    """

    id: str = pydantic_v1.Field()
    """
    Hume-generated File ID
    """

    name: typing.Optional[str] = pydantic_v1.Field(default=None)
    """
    File name
    """

    uri: typing.Optional[str] = pydantic_v1.Field(default=None)
    """
    File URI
    """

    upload_uri: typing.Optional[str] = pydantic_v1.Field(default=None)
    """
    File upload URI
    """

    thumbnail_uri: typing.Optional[str] = pydantic_v1.Field(default=None)
    """
    File thumbnail URI
    """

    user_id: str = pydantic_v1.Field()
    """
    Hume-generated User ID
    """

    data_type: str = pydantic_v1.Field()
    """
    File type: video, audio, video_no_audio, image, text, or mediapipe_facemesh
    """

    created_on: typing.Optional[int] = pydantic_v1.Field(default=None)
    """
    Created date and time
    """

    modified_on: typing.Optional[int] = pydantic_v1.Field(default=None)
    """
    Updated date and time
    """

    metadata: typing.Optional[typing.Dict[str, typing.Dict[str, typing.Any]]] = pydantic_v1.Field(default=None)
    """
    Additional details as key, value pairs
    """

    hume_storage: typing.Optional[bool] = pydantic_v1.Field(default=None)
    """
    Flag which denotes whether the file is stored with Hume
    """

    hume_storage_upload_timestamp: typing.Optional[int] = pydantic_v1.Field(default=None)
    """
    Timestamp denoting when the file was uploaded to Hume
    """

    is_sanitized: bool = pydantic_v1.Field()
    """
    Indicates whether this file has been sanitized for sharing
    """

    is_owned_by_reader: bool = pydantic_v1.Field()
    """
    Indicates whether this file is owned by the current file reader
    """

    is_linked_to_publicly_shared: typing.Optional[bool] = pydantic_v1.Field(default=None)
    """
    Indicates whether this file is linked to a model that is publicly shared
    """

    is_linked_to_hume_model: typing.Optional[bool] = pydantic_v1.Field(default=None)
    """
    Indicates whether this file is linked to a Hume-owned model that is publicly shared
    """

    def json(self, **kwargs: typing.Any) -> str:
        kwargs_with_defaults: typing.Any = {"by_alias": True, "exclude_unset": True, **kwargs}
        return super().json(**kwargs_with_defaults)

    def dict(self, **kwargs: typing.Any) -> typing.Dict[str, typing.Any]:
        kwargs_with_defaults_exclude_unset: typing.Any = {"by_alias": True, "exclude_unset": True, **kwargs}
        kwargs_with_defaults_exclude_none: typing.Any = {"by_alias": True, "exclude_none": True, **kwargs}

        return deep_union_pydantic_dicts(
            super().dict(**kwargs_with_defaults_exclude_unset), super().dict(**kwargs_with_defaults_exclude_none)
        )

    class Config:
        frozen = True
        smart_union = True
        extra = pydantic_v1.Extra.allow
        json_encoders = {dt.datetime: serialize_datetime}
