# This file was auto-generated by Fern from our API Definition.

import typing
from json.decoder import JSONDecodeError

from ...core.api_error import ApiError
from ...core.client_wrapper import AsyncClientWrapper, SyncClientWrapper
from ...core.pydantic_utilities import pydantic_v1
from ...core.request_options import RequestOptions
from ..types.alternative import Alternative
from ..types.custom_model import CustomModel
from ..types.custom_model_request import CustomModelRequest
from ..types.dataset import Dataset
from ..types.evaluation_args import EvaluationArgs
from ..types.job_id import JobId
from ..types.task import Task

# this is used as the default value for optional parameters
OMIT = typing.cast(typing.Any, ...)


class JobsClient:
    def __init__(self, *, client_wrapper: SyncClientWrapper):
        self._client_wrapper = client_wrapper

    def start_training_job(
        self,
        *,
        custom_model: CustomModelRequest,
        dataset: Dataset,
        target_feature: typing.Optional[str] = OMIT,
        task: typing.Optional[Task] = OMIT,
        evaluation: typing.Optional[EvaluationArgs] = OMIT,
        alternatives: typing.Optional[typing.Sequence[Alternative]] = OMIT,
        callback_url: typing.Optional[str] = OMIT,
        notify: typing.Optional[bool] = OMIT,
        request_options: typing.Optional[RequestOptions] = None
    ) -> JobId:
        """
        Start a new custom models training job.

        Parameters
        ----------
        custom_model : CustomModelRequest

        dataset : Dataset

        target_feature : typing.Optional[str]

        task : typing.Optional[Task]

        evaluation : typing.Optional[EvaluationArgs]

        alternatives : typing.Optional[typing.Sequence[Alternative]]

        callback_url : typing.Optional[str]

        notify : typing.Optional[bool]

        request_options : typing.Optional[RequestOptions]
            Request-specific configuration.

        Returns
        -------
        JobId


        Examples
        --------
        from hume.client import HumeClient
        from hume.custom_models import CustomModelRequest, DatasetId

        client = HumeClient(
            api_key="YOUR_API_KEY",
        )
        client.custom_models.jobs.start_training_job(
            custom_model=CustomModelRequest(
                name="name",
            ),
            dataset=DatasetId(
                id="id",
            ),
        )
        """
        _response = self._client_wrapper.httpx_client.request(
            "v0/registry/v0/batch/jobs/tl/train",
            method="POST",
            json={
                "custom_model": custom_model,
                "dataset": dataset,
                "target_feature": target_feature,
                "task": task,
                "evaluation": evaluation,
                "alternatives": alternatives,
                "callback_url": callback_url,
                "notify": notify,
            },
            request_options=request_options,
            omit=OMIT,
        )
        if 200 <= _response.status_code < 300:
            return pydantic_v1.parse_obj_as(JobId, _response.json())  # type: ignore
        try:
            _response_json = _response.json()
        except JSONDecodeError:
            raise ApiError(status_code=_response.status_code, body=_response.text)
        raise ApiError(status_code=_response.status_code, body=_response_json)

    def start_custom_models_inference_job(
        self,
        *,
        custom_model: CustomModel,
        urls: typing.Optional[typing.Sequence[str]] = OMIT,
        registry_files: typing.Optional[typing.Sequence[str]] = OMIT,
        callback_url: typing.Optional[str] = OMIT,
        notify: typing.Optional[bool] = OMIT,
        request_options: typing.Optional[RequestOptions] = None
    ) -> JobId:
        """
        Start a new custom models inference job.

        Parameters
        ----------
        custom_model : CustomModel

        urls : typing.Optional[typing.Sequence[str]]
            URLs to the media files to be processed. Each must be a valid public URL to a media file (see recommended input filetypes) or an archive (`.zip`, `.tar.gz`, `.tar.bz2`, `.tar.xz`) of media files.

            If you wish to supply more than 100 URLs, consider providing them as an archive (`.zip`, `.tar.gz`, `.tar.bz2`, `.tar.xz`).

        registry_files : typing.Optional[typing.Sequence[str]]
            List of File IDs corresponding to the files in the asset registry.

        callback_url : typing.Optional[str]
            If provided, a `POST` request will be made to the URL with the generated predictions on completion or the error message on failure.

        notify : typing.Optional[bool]
            Whether to send an email notification to the user upon job completion/failure.

        request_options : typing.Optional[RequestOptions]
            Request-specific configuration.

        Returns
        -------
        JobId


        Examples
        --------
        from hume.client import HumeClient
        from hume.custom_models import CustomModelId

        client = HumeClient(
            api_key="YOUR_API_KEY",
        )
        client.custom_models.jobs.start_custom_models_inference_job(
            custom_model=CustomModelId(
                id="id",
            ),
        )
        """
        _response = self._client_wrapper.httpx_client.request(
            "v0/registry/v0/batch/jobs/tl/inference",
            method="POST",
            json={
                "custom_model": custom_model,
                "urls": urls,
                "registry_files": registry_files,
                "callback_url": callback_url,
                "notify": notify,
            },
            request_options=request_options,
            omit=OMIT,
        )
        if 200 <= _response.status_code < 300:
            return pydantic_v1.parse_obj_as(JobId, _response.json())  # type: ignore
        try:
            _response_json = _response.json()
        except JSONDecodeError:
            raise ApiError(status_code=_response.status_code, body=_response.text)
        raise ApiError(status_code=_response.status_code, body=_response_json)


class AsyncJobsClient:
    def __init__(self, *, client_wrapper: AsyncClientWrapper):
        self._client_wrapper = client_wrapper

    async def start_training_job(
        self,
        *,
        custom_model: CustomModelRequest,
        dataset: Dataset,
        target_feature: typing.Optional[str] = OMIT,
        task: typing.Optional[Task] = OMIT,
        evaluation: typing.Optional[EvaluationArgs] = OMIT,
        alternatives: typing.Optional[typing.Sequence[Alternative]] = OMIT,
        callback_url: typing.Optional[str] = OMIT,
        notify: typing.Optional[bool] = OMIT,
        request_options: typing.Optional[RequestOptions] = None
    ) -> JobId:
        """
        Start a new custom models training job.

        Parameters
        ----------
        custom_model : CustomModelRequest

        dataset : Dataset

        target_feature : typing.Optional[str]

        task : typing.Optional[Task]

        evaluation : typing.Optional[EvaluationArgs]

        alternatives : typing.Optional[typing.Sequence[Alternative]]

        callback_url : typing.Optional[str]

        notify : typing.Optional[bool]

        request_options : typing.Optional[RequestOptions]
            Request-specific configuration.

        Returns
        -------
        JobId


        Examples
        --------
        from hume.client import AsyncHumeClient
        from hume.custom_models import CustomModelRequest, DatasetId

        client = AsyncHumeClient(
            api_key="YOUR_API_KEY",
        )
        await client.custom_models.jobs.start_training_job(
            custom_model=CustomModelRequest(
                name="name",
            ),
            dataset=DatasetId(
                id="id",
            ),
        )
        """
        _response = await self._client_wrapper.httpx_client.request(
            "v0/registry/v0/batch/jobs/tl/train",
            method="POST",
            json={
                "custom_model": custom_model,
                "dataset": dataset,
                "target_feature": target_feature,
                "task": task,
                "evaluation": evaluation,
                "alternatives": alternatives,
                "callback_url": callback_url,
                "notify": notify,
            },
            request_options=request_options,
            omit=OMIT,
        )
        if 200 <= _response.status_code < 300:
            return pydantic_v1.parse_obj_as(JobId, _response.json())  # type: ignore
        try:
            _response_json = _response.json()
        except JSONDecodeError:
            raise ApiError(status_code=_response.status_code, body=_response.text)
        raise ApiError(status_code=_response.status_code, body=_response_json)

    async def start_custom_models_inference_job(
        self,
        *,
        custom_model: CustomModel,
        urls: typing.Optional[typing.Sequence[str]] = OMIT,
        registry_files: typing.Optional[typing.Sequence[str]] = OMIT,
        callback_url: typing.Optional[str] = OMIT,
        notify: typing.Optional[bool] = OMIT,
        request_options: typing.Optional[RequestOptions] = None
    ) -> JobId:
        """
        Start a new custom models inference job.

        Parameters
        ----------
        custom_model : CustomModel

        urls : typing.Optional[typing.Sequence[str]]
            URLs to the media files to be processed. Each must be a valid public URL to a media file (see recommended input filetypes) or an archive (`.zip`, `.tar.gz`, `.tar.bz2`, `.tar.xz`) of media files.

            If you wish to supply more than 100 URLs, consider providing them as an archive (`.zip`, `.tar.gz`, `.tar.bz2`, `.tar.xz`).

        registry_files : typing.Optional[typing.Sequence[str]]
            List of File IDs corresponding to the files in the asset registry.

        callback_url : typing.Optional[str]
            If provided, a `POST` request will be made to the URL with the generated predictions on completion or the error message on failure.

        notify : typing.Optional[bool]
            Whether to send an email notification to the user upon job completion/failure.

        request_options : typing.Optional[RequestOptions]
            Request-specific configuration.

        Returns
        -------
        JobId


        Examples
        --------
        from hume.client import AsyncHumeClient
        from hume.custom_models import CustomModelId

        client = AsyncHumeClient(
            api_key="YOUR_API_KEY",
        )
        await client.custom_models.jobs.start_custom_models_inference_job(
            custom_model=CustomModelId(
                id="id",
            ),
        )
        """
        _response = await self._client_wrapper.httpx_client.request(
            "v0/registry/v0/batch/jobs/tl/inference",
            method="POST",
            json={
                "custom_model": custom_model,
                "urls": urls,
                "registry_files": registry_files,
                "callback_url": callback_url,
                "notify": notify,
            },
            request_options=request_options,
            omit=OMIT,
        )
        if 200 <= _response.status_code < 300:
            return pydantic_v1.parse_obj_as(JobId, _response.json())  # type: ignore
        try:
            _response_json = _response.json()
        except JSONDecodeError:
            raise ApiError(status_code=_response.status_code, body=_response.text)
        raise ApiError(status_code=_response.status_code, body=_response_json)
