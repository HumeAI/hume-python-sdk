# This file was auto-generated by Fern from our API Definition.

import typing
from json.decoder import JSONDecodeError

from ... import core
from ...core.api_error import ApiError
from ...core.client_wrapper import AsyncClientWrapper, SyncClientWrapper
from ...core.jsonable_encoder import jsonable_encoder
from ...core.pagination import AsyncPager, SyncPager
from ...core.pydantic_utilities import pydantic_v1
from ...core.request_options import RequestOptions
from ..types.dataset_labels import DatasetLabels
from ..types.dataset_page import DatasetPage
from ..types.dataset_version import DatasetVersion
from ..types.dataset_version_page import DatasetVersionPage
from ..types.file_page import FilePage
from ..types.return_dataset import ReturnDataset

# this is used as the default value for optional parameters
OMIT = typing.cast(typing.Any, ...)


class DatasetsClient:
    def __init__(self, *, client_wrapper: SyncClientWrapper):
        self._client_wrapper = client_wrapper

    def list_datasets(
        self,
        *,
        name: typing.Optional[str] = None,
        page_number: typing.Optional[int] = None,
        page_size: typing.Optional[int] = None,
        shared_assets: typing.Optional[bool] = None,
        request_options: typing.Optional[RequestOptions] = None,
    ) -> SyncPager[ReturnDataset]:
        """
        Returns 200 if successful

        Parameters
        ----------
        name : typing.Optional[str]
            Dataset name to be queried

        page_number : typing.Optional[int]
            Index of the first result

        page_size : typing.Optional[int]
            Maximum number of results

        shared_assets : typing.Optional[bool]
            `True` Will show all assets owned by you and shared with you. `False` Will show only your assets. Default: `False`

        request_options : typing.Optional[RequestOptions]
            Request-specific configuration.

        Returns
        -------
        SyncPager[ReturnDataset]
            Success

        Examples
        --------
        from hume.client import HumeClient

        client = HumeClient(
            api_key="YOUR_API_KEY",
        )
        client.custom_models.datasets.list_datasets()
        """
        _response = self._client_wrapper.httpx_client.request(
            "v0/registry/datasets",
            method="GET",
            params={"name": name, "page_number": page_number, "page_size": page_size, "shared_assets": shared_assets},
            request_options=request_options,
        )
        if 200 <= _response.status_code < 300:
            _parsed_response = pydantic_v1.parse_obj_as(DatasetPage, _response.json())  # type: ignore
            _has_next = True
            _get_next = lambda: self.list_datasets(
                name=name,
                page_number=page_number + 1 if page_number is not None else 1,
                page_size=page_size,
                shared_assets=shared_assets,
                request_options=request_options,
            )
            _items = _parsed_response.content
            return SyncPager(has_next=_has_next, items=_items, get_next=_get_next)
        try:
            _response_json = _response.json()
        except JSONDecodeError:
            raise ApiError(status_code=_response.status_code, body=_response.text)
        raise ApiError(status_code=_response.status_code, body=_response_json)

    def create_dataset(
        self,
        *,
        name: str,
        labels_file: core.File,
        feature_types: typing.Optional[core.File] = None,
        request_options: typing.Optional[RequestOptions] = None,
    ) -> ReturnDataset:
        """
        Returns 201 if successful

        Parameters
        ----------
        name : str
            Name of the Dataset to be created

        labels_file : core.File
            See core.File for more documentation

        feature_types : typing.Optional[core.File]
            See core.File for more documentation

        request_options : typing.Optional[RequestOptions]
            Request-specific configuration.

        Returns
        -------
        ReturnDataset
            Success

        Examples
        --------
        from hume.client import HumeClient

        client = HumeClient(
            api_key="YOUR_API_KEY",
        )
        client.custom_models.datasets.create_dataset(
            name="name",
        )
        """
        _response = self._client_wrapper.httpx_client.request(
            "v0/registry/datasets",
            method="POST",
            data={"name": name},
            files={"feature_types": feature_types, "labels_file": labels_file},
            request_options=request_options,
            omit=OMIT,
        )
        if 200 <= _response.status_code < 300:
            return pydantic_v1.parse_obj_as(ReturnDataset, _response.json())  # type: ignore
        try:
            _response_json = _response.json()
        except JSONDecodeError:
            raise ApiError(status_code=_response.status_code, body=_response.text)
        raise ApiError(status_code=_response.status_code, body=_response_json)

    def get_dataset(self, id: str, *, request_options: typing.Optional[RequestOptions] = None) -> ReturnDataset:
        """
        Returns 200 if successful

        Parameters
        ----------
        id : str
            Hume-generated ID of a Dataset

        request_options : typing.Optional[RequestOptions]
            Request-specific configuration.

        Returns
        -------
        ReturnDataset
            Success

        Examples
        --------
        from hume.client import HumeClient

        client = HumeClient(
            api_key="YOUR_API_KEY",
        )
        client.custom_models.datasets.get_dataset(
            id="id",
        )
        """
        _response = self._client_wrapper.httpx_client.request(
            f"v0/registry/datasets/{jsonable_encoder(id)}", method="GET", request_options=request_options
        )
        if 200 <= _response.status_code < 300:
            return pydantic_v1.parse_obj_as(ReturnDataset, _response.json())  # type: ignore
        try:
            _response_json = _response.json()
        except JSONDecodeError:
            raise ApiError(status_code=_response.status_code, body=_response.text)
        raise ApiError(status_code=_response.status_code, body=_response_json)

    def create_dataset_version(
        self,
        id: str,
        *,
        labels_file: core.File,
        feature_types: typing.Optional[core.File] = None,
        request_options: typing.Optional[RequestOptions] = None,
    ) -> typing.List[ReturnDataset]:
        """
        Returns 200 if successful

        Parameters
        ----------
        id : str
            Hume-generated ID of a Dataset

        labels_file : core.File
            See core.File for more documentation

        feature_types : typing.Optional[core.File]
            See core.File for more documentation

        request_options : typing.Optional[RequestOptions]
            Request-specific configuration.

        Returns
        -------
        typing.List[ReturnDataset]
            Success

        Examples
        --------
        from hume.client import HumeClient

        client = HumeClient(
            api_key="YOUR_API_KEY",
        )
        client.custom_models.datasets.create_dataset_version(
            id="id",
        )
        """
        _response = self._client_wrapper.httpx_client.request(
            f"v0/registry/datasets/{jsonable_encoder(id)}",
            method="POST",
            data={},
            files={"feature_types": feature_types, "labels_file": labels_file},
            request_options=request_options,
            omit=OMIT,
        )
        if 200 <= _response.status_code < 300:
            return pydantic_v1.parse_obj_as(typing.List[ReturnDataset], _response.json())  # type: ignore
        try:
            _response_json = _response.json()
        except JSONDecodeError:
            raise ApiError(status_code=_response.status_code, body=_response.text)
        raise ApiError(status_code=_response.status_code, body=_response_json)

    def delete_dataset(self, id: str, *, request_options: typing.Optional[RequestOptions] = None) -> None:
        """
        Returns 204 if successful

        Parameters
        ----------
        id : str
            Hume-generated ID of a Dataset

        request_options : typing.Optional[RequestOptions]
            Request-specific configuration.

        Returns
        -------
        None

        Examples
        --------
        from hume.client import HumeClient

        client = HumeClient(
            api_key="YOUR_API_KEY",
        )
        client.custom_models.datasets.delete_dataset(
            id="id",
        )
        """
        _response = self._client_wrapper.httpx_client.request(
            f"v0/registry/datasets/{jsonable_encoder(id)}", method="DELETE", request_options=request_options
        )
        if 200 <= _response.status_code < 300:
            return
        try:
            _response_json = _response.json()
        except JSONDecodeError:
            raise ApiError(status_code=_response.status_code, body=_response.text)
        raise ApiError(status_code=_response.status_code, body=_response_json)

    def list_dataset_versions(
        self,
        id: str,
        *,
        page_number: typing.Optional[int] = None,
        page_size: typing.Optional[int] = None,
        shared_assets: typing.Optional[bool] = None,
        request_options: typing.Optional[RequestOptions] = None,
    ) -> SyncPager[DatasetVersion]:
        """
        Returns 200 if successful

        Parameters
        ----------
        id : str
            Hume-generated ID of a Dataset

        page_number : typing.Optional[int]
            Index of the first result

        page_size : typing.Optional[int]
            Maximum number of results

        shared_assets : typing.Optional[bool]
            `True` Will show all assets owned by you and shared with you. `False` Will show only your assets. Default: `False`

        request_options : typing.Optional[RequestOptions]
            Request-specific configuration.

        Returns
        -------
        SyncPager[DatasetVersion]
            Success

        Examples
        --------
        from hume.client import HumeClient

        client = HumeClient(
            api_key="YOUR_API_KEY",
        )
        client.custom_models.datasets.list_dataset_versions(
            id="id",
        )
        """
        _response = self._client_wrapper.httpx_client.request(
            f"v0/registry/datasets/{jsonable_encoder(id)}/versions",
            method="GET",
            params={"page_number": page_number, "page_size": page_size, "shared_assets": shared_assets},
            request_options=request_options,
        )
        if 200 <= _response.status_code < 300:
            _parsed_response = pydantic_v1.parse_obj_as(DatasetVersionPage, _response.json())  # type: ignore
            _has_next = True
            _get_next = lambda: self.list_dataset_versions(
                id,
                page_number=page_number + 1 if page_number is not None else 1,
                page_size=page_size,
                shared_assets=shared_assets,
                request_options=request_options,
            )
            _items = _parsed_response.content
            return SyncPager(has_next=_has_next, items=_items, get_next=_get_next)
        try:
            _response_json = _response.json()
        except JSONDecodeError:
            raise ApiError(status_code=_response.status_code, body=_response.text)
        raise ApiError(status_code=_response.status_code, body=_response_json)

    def list_dataset_files(
        self,
        id: str,
        *,
        page_number: typing.Optional[int] = None,
        page_size: typing.Optional[int] = None,
        shared_assets: typing.Optional[bool] = None,
        request_options: typing.Optional[RequestOptions] = None,
    ) -> typing.List[FilePage]:
        """
        Returns 200 if successful

        Parameters
        ----------
        id : str
            Hume-generated ID of a Dataset

        page_number : typing.Optional[int]
            Index of the first result

        page_size : typing.Optional[int]
            Maximum number of results

        shared_assets : typing.Optional[bool]
            `True` Will show all assets owned by you and shared with you. `False` Will show only your assets. Default: `False`

        request_options : typing.Optional[RequestOptions]
            Request-specific configuration.

        Returns
        -------
        typing.List[FilePage]
            Success

        Examples
        --------
        from hume.client import HumeClient

        client = HumeClient(
            api_key="YOUR_API_KEY",
        )
        client.custom_models.datasets.list_dataset_files(
            id="id",
        )
        """
        _response = self._client_wrapper.httpx_client.request(
            f"v0/registry/datasets/{jsonable_encoder(id)}/files",
            method="GET",
            params={"page_number": page_number, "page_size": page_size, "shared_assets": shared_assets},
            request_options=request_options,
        )
        if 200 <= _response.status_code < 300:
            return pydantic_v1.parse_obj_as(typing.List[FilePage], _response.json())  # type: ignore
        try:
            _response_json = _response.json()
        except JSONDecodeError:
            raise ApiError(status_code=_response.status_code, body=_response.text)
        raise ApiError(status_code=_response.status_code, body=_response_json)

    def get_dataset_version(self, id: str, *, request_options: typing.Optional[RequestOptions] = None) -> DatasetLabels:
        """
        Returns 200 if successful

        Parameters
        ----------
        id : str
            Hume-generated ID of a Dataset version

        request_options : typing.Optional[RequestOptions]
            Request-specific configuration.

        Returns
        -------
        DatasetLabels
            Success

        Examples
        --------
        from hume.client import HumeClient

        client = HumeClient(
            api_key="YOUR_API_KEY",
        )
        client.custom_models.datasets.get_dataset_version(
            id="id",
        )
        """
        _response = self._client_wrapper.httpx_client.request(
            f"v0/registry/datasets/version/{jsonable_encoder(id)}", method="GET", request_options=request_options
        )
        if 200 <= _response.status_code < 300:
            return pydantic_v1.parse_obj_as(DatasetLabels, _response.json())  # type: ignore
        try:
            _response_json = _response.json()
        except JSONDecodeError:
            raise ApiError(status_code=_response.status_code, body=_response.text)
        raise ApiError(status_code=_response.status_code, body=_response_json)

    def list_dataset_version_files(
        self,
        id: str,
        *,
        page_number: typing.Optional[int] = None,
        page_size: typing.Optional[int] = None,
        shared_assets: typing.Optional[bool] = None,
        request_options: typing.Optional[RequestOptions] = None,
    ) -> typing.List[FilePage]:
        """
        Returns 200 if successful

        Parameters
        ----------
        id : str
            Hume-generated ID of a Dataset version

        page_number : typing.Optional[int]
            Index of the first result

        page_size : typing.Optional[int]
            Maximum number of results

        shared_assets : typing.Optional[bool]
            `True` Will show all assets owned by you and shared with you. `False` Will show only your assets. Default: `False`

        request_options : typing.Optional[RequestOptions]
            Request-specific configuration.

        Returns
        -------
        typing.List[FilePage]
            Success

        Examples
        --------
        from hume.client import HumeClient

        client = HumeClient(
            api_key="YOUR_API_KEY",
        )
        client.custom_models.datasets.list_dataset_version_files(
            id="id",
        )
        """
        _response = self._client_wrapper.httpx_client.request(
            f"v0/registry/datasets/version/{jsonable_encoder(id)}/files",
            method="GET",
            params={"page_number": page_number, "page_size": page_size, "shared_assets": shared_assets},
            request_options=request_options,
        )
        if 200 <= _response.status_code < 300:
            return pydantic_v1.parse_obj_as(typing.List[FilePage], _response.json())  # type: ignore
        try:
            _response_json = _response.json()
        except JSONDecodeError:
            raise ApiError(status_code=_response.status_code, body=_response.text)
        raise ApiError(status_code=_response.status_code, body=_response_json)


class AsyncDatasetsClient:
    def __init__(self, *, client_wrapper: AsyncClientWrapper):
        self._client_wrapper = client_wrapper

    async def list_datasets(
        self,
        *,
        name: typing.Optional[str] = None,
        page_number: typing.Optional[int] = None,
        page_size: typing.Optional[int] = None,
        shared_assets: typing.Optional[bool] = None,
        request_options: typing.Optional[RequestOptions] = None,
    ) -> AsyncPager[ReturnDataset]:
        """
        Returns 200 if successful

        Parameters
        ----------
        name : typing.Optional[str]
            Dataset name to be queried

        page_number : typing.Optional[int]
            Index of the first result

        page_size : typing.Optional[int]
            Maximum number of results

        shared_assets : typing.Optional[bool]
            `True` Will show all assets owned by you and shared with you. `False` Will show only your assets. Default: `False`

        request_options : typing.Optional[RequestOptions]
            Request-specific configuration.

        Returns
        -------
        AsyncPager[ReturnDataset]
            Success

        Examples
        --------
        from hume.client import AsyncHumeClient

        client = AsyncHumeClient(
            api_key="YOUR_API_KEY",
        )
        await client.custom_models.datasets.list_datasets()
        """
        _response = await self._client_wrapper.httpx_client.request(
            "v0/registry/datasets",
            method="GET",
            params={"name": name, "page_number": page_number, "page_size": page_size, "shared_assets": shared_assets},
            request_options=request_options,
        )
        if 200 <= _response.status_code < 300:
            _parsed_response = pydantic_v1.parse_obj_as(DatasetPage, _response.json())  # type: ignore
            _has_next = True
            _get_next = lambda: self.list_datasets(
                name=name,
                page_number=page_number + 1 if page_number is not None else 1,
                page_size=page_size,
                shared_assets=shared_assets,
                request_options=request_options,
            )
            _items = _parsed_response.content
            return AsyncPager(has_next=_has_next, items=_items, get_next=_get_next)
        try:
            _response_json = _response.json()
        except JSONDecodeError:
            raise ApiError(status_code=_response.status_code, body=_response.text)
        raise ApiError(status_code=_response.status_code, body=_response_json)

    async def create_dataset(
        self,
        *,
        name: str,
        labels_file: core.File,
        feature_types: typing.Optional[core.File] = None,
        request_options: typing.Optional[RequestOptions] = None,
    ) -> ReturnDataset:
        """
        Returns 201 if successful

        Parameters
        ----------
        name : str
            Name of the Dataset to be created

        labels_file : core.File
            See core.File for more documentation

        feature_types : typing.Optional[core.File]
            See core.File for more documentation

        request_options : typing.Optional[RequestOptions]
            Request-specific configuration.

        Returns
        -------
        ReturnDataset
            Success

        Examples
        --------
        from hume.client import AsyncHumeClient

        client = AsyncHumeClient(
            api_key="YOUR_API_KEY",
        )
        await client.custom_models.datasets.create_dataset(
            name="name",
        )
        """
        _response = await self._client_wrapper.httpx_client.request(
            "v0/registry/datasets",
            method="POST",
            data={"name": name},
            files={"feature_types": feature_types, "labels_file": labels_file},
            request_options=request_options,
            omit=OMIT,
        )
        if 200 <= _response.status_code < 300:
            return pydantic_v1.parse_obj_as(ReturnDataset, _response.json())  # type: ignore
        try:
            _response_json = _response.json()
        except JSONDecodeError:
            raise ApiError(status_code=_response.status_code, body=_response.text)
        raise ApiError(status_code=_response.status_code, body=_response_json)

    async def get_dataset(self, id: str, *, request_options: typing.Optional[RequestOptions] = None) -> ReturnDataset:
        """
        Returns 200 if successful

        Parameters
        ----------
        id : str
            Hume-generated ID of a Dataset

        request_options : typing.Optional[RequestOptions]
            Request-specific configuration.

        Returns
        -------
        ReturnDataset
            Success

        Examples
        --------
        from hume.client import AsyncHumeClient

        client = AsyncHumeClient(
            api_key="YOUR_API_KEY",
        )
        await client.custom_models.datasets.get_dataset(
            id="id",
        )
        """
        _response = await self._client_wrapper.httpx_client.request(
            f"v0/registry/datasets/{jsonable_encoder(id)}", method="GET", request_options=request_options
        )
        if 200 <= _response.status_code < 300:
            return pydantic_v1.parse_obj_as(ReturnDataset, _response.json())  # type: ignore
        try:
            _response_json = _response.json()
        except JSONDecodeError:
            raise ApiError(status_code=_response.status_code, body=_response.text)
        raise ApiError(status_code=_response.status_code, body=_response_json)

    async def create_dataset_version(
        self,
        id: str,
        *,
        labels_file: core.File,
        feature_types: typing.Optional[core.File] = None,
        request_options: typing.Optional[RequestOptions] = None,
    ) -> typing.List[ReturnDataset]:
        """
        Returns 200 if successful

        Parameters
        ----------
        id : str
            Hume-generated ID of a Dataset

        labels_file : core.File
            See core.File for more documentation

        feature_types : typing.Optional[core.File]
            See core.File for more documentation

        request_options : typing.Optional[RequestOptions]
            Request-specific configuration.

        Returns
        -------
        typing.List[ReturnDataset]
            Success

        Examples
        --------
        from hume.client import AsyncHumeClient

        client = AsyncHumeClient(
            api_key="YOUR_API_KEY",
        )
        await client.custom_models.datasets.create_dataset_version(
            id="id",
        )
        """
        _response = await self._client_wrapper.httpx_client.request(
            f"v0/registry/datasets/{jsonable_encoder(id)}",
            method="POST",
            data={},
            files={"feature_types": feature_types, "labels_file": labels_file},
            request_options=request_options,
            omit=OMIT,
        )
        if 200 <= _response.status_code < 300:
            return pydantic_v1.parse_obj_as(typing.List[ReturnDataset], _response.json())  # type: ignore
        try:
            _response_json = _response.json()
        except JSONDecodeError:
            raise ApiError(status_code=_response.status_code, body=_response.text)
        raise ApiError(status_code=_response.status_code, body=_response_json)

    async def delete_dataset(self, id: str, *, request_options: typing.Optional[RequestOptions] = None) -> None:
        """
        Returns 204 if successful

        Parameters
        ----------
        id : str
            Hume-generated ID of a Dataset

        request_options : typing.Optional[RequestOptions]
            Request-specific configuration.

        Returns
        -------
        None

        Examples
        --------
        from hume.client import AsyncHumeClient

        client = AsyncHumeClient(
            api_key="YOUR_API_KEY",
        )
        await client.custom_models.datasets.delete_dataset(
            id="id",
        )
        """
        _response = await self._client_wrapper.httpx_client.request(
            f"v0/registry/datasets/{jsonable_encoder(id)}", method="DELETE", request_options=request_options
        )
        if 200 <= _response.status_code < 300:
            return
        try:
            _response_json = _response.json()
        except JSONDecodeError:
            raise ApiError(status_code=_response.status_code, body=_response.text)
        raise ApiError(status_code=_response.status_code, body=_response_json)

    async def list_dataset_versions(
        self,
        id: str,
        *,
        page_number: typing.Optional[int] = None,
        page_size: typing.Optional[int] = None,
        shared_assets: typing.Optional[bool] = None,
        request_options: typing.Optional[RequestOptions] = None,
    ) -> AsyncPager[DatasetVersion]:
        """
        Returns 200 if successful

        Parameters
        ----------
        id : str
            Hume-generated ID of a Dataset

        page_number : typing.Optional[int]
            Index of the first result

        page_size : typing.Optional[int]
            Maximum number of results

        shared_assets : typing.Optional[bool]
            `True` Will show all assets owned by you and shared with you. `False` Will show only your assets. Default: `False`

        request_options : typing.Optional[RequestOptions]
            Request-specific configuration.

        Returns
        -------
        AsyncPager[DatasetVersion]
            Success

        Examples
        --------
        from hume.client import AsyncHumeClient

        client = AsyncHumeClient(
            api_key="YOUR_API_KEY",
        )
        await client.custom_models.datasets.list_dataset_versions(
            id="id",
        )
        """
        _response = await self._client_wrapper.httpx_client.request(
            f"v0/registry/datasets/{jsonable_encoder(id)}/versions",
            method="GET",
            params={"page_number": page_number, "page_size": page_size, "shared_assets": shared_assets},
            request_options=request_options,
        )
        if 200 <= _response.status_code < 300:
            _parsed_response = pydantic_v1.parse_obj_as(DatasetVersionPage, _response.json())  # type: ignore
            _has_next = True
            _get_next = lambda: self.list_dataset_versions(
                id,
                page_number=page_number + 1 if page_number is not None else 1,
                page_size=page_size,
                shared_assets=shared_assets,
                request_options=request_options,
            )
            _items = _parsed_response.content
            return AsyncPager(has_next=_has_next, items=_items, get_next=_get_next)
        try:
            _response_json = _response.json()
        except JSONDecodeError:
            raise ApiError(status_code=_response.status_code, body=_response.text)
        raise ApiError(status_code=_response.status_code, body=_response_json)

    async def list_dataset_files(
        self,
        id: str,
        *,
        page_number: typing.Optional[int] = None,
        page_size: typing.Optional[int] = None,
        shared_assets: typing.Optional[bool] = None,
        request_options: typing.Optional[RequestOptions] = None,
    ) -> typing.List[FilePage]:
        """
        Returns 200 if successful

        Parameters
        ----------
        id : str
            Hume-generated ID of a Dataset

        page_number : typing.Optional[int]
            Index of the first result

        page_size : typing.Optional[int]
            Maximum number of results

        shared_assets : typing.Optional[bool]
            `True` Will show all assets owned by you and shared with you. `False` Will show only your assets. Default: `False`

        request_options : typing.Optional[RequestOptions]
            Request-specific configuration.

        Returns
        -------
        typing.List[FilePage]
            Success

        Examples
        --------
        from hume.client import AsyncHumeClient

        client = AsyncHumeClient(
            api_key="YOUR_API_KEY",
        )
        await client.custom_models.datasets.list_dataset_files(
            id="id",
        )
        """
        _response = await self._client_wrapper.httpx_client.request(
            f"v0/registry/datasets/{jsonable_encoder(id)}/files",
            method="GET",
            params={"page_number": page_number, "page_size": page_size, "shared_assets": shared_assets},
            request_options=request_options,
        )
        if 200 <= _response.status_code < 300:
            return pydantic_v1.parse_obj_as(typing.List[FilePage], _response.json())  # type: ignore
        try:
            _response_json = _response.json()
        except JSONDecodeError:
            raise ApiError(status_code=_response.status_code, body=_response.text)
        raise ApiError(status_code=_response.status_code, body=_response_json)

    async def get_dataset_version(
        self, id: str, *, request_options: typing.Optional[RequestOptions] = None
    ) -> DatasetLabels:
        """
        Returns 200 if successful

        Parameters
        ----------
        id : str
            Hume-generated ID of a Dataset version

        request_options : typing.Optional[RequestOptions]
            Request-specific configuration.

        Returns
        -------
        DatasetLabels
            Success

        Examples
        --------
        from hume.client import AsyncHumeClient

        client = AsyncHumeClient(
            api_key="YOUR_API_KEY",
        )
        await client.custom_models.datasets.get_dataset_version(
            id="id",
        )
        """
        _response = await self._client_wrapper.httpx_client.request(
            f"v0/registry/datasets/version/{jsonable_encoder(id)}", method="GET", request_options=request_options
        )
        if 200 <= _response.status_code < 300:
            return pydantic_v1.parse_obj_as(DatasetLabels, _response.json())  # type: ignore
        try:
            _response_json = _response.json()
        except JSONDecodeError:
            raise ApiError(status_code=_response.status_code, body=_response.text)
        raise ApiError(status_code=_response.status_code, body=_response_json)

    async def list_dataset_version_files(
        self,
        id: str,
        *,
        page_number: typing.Optional[int] = None,
        page_size: typing.Optional[int] = None,
        shared_assets: typing.Optional[bool] = None,
        request_options: typing.Optional[RequestOptions] = None,
    ) -> typing.List[FilePage]:
        """
        Returns 200 if successful

        Parameters
        ----------
        id : str
            Hume-generated ID of a Dataset version

        page_number : typing.Optional[int]
            Index of the first result

        page_size : typing.Optional[int]
            Maximum number of results

        shared_assets : typing.Optional[bool]
            `True` Will show all assets owned by you and shared with you. `False` Will show only your assets. Default: `False`

        request_options : typing.Optional[RequestOptions]
            Request-specific configuration.

        Returns
        -------
        typing.List[FilePage]
            Success

        Examples
        --------
        from hume.client import AsyncHumeClient

        client = AsyncHumeClient(
            api_key="YOUR_API_KEY",
        )
        await client.custom_models.datasets.list_dataset_version_files(
            id="id",
        )
        """
        _response = await self._client_wrapper.httpx_client.request(
            f"v0/registry/datasets/version/{jsonable_encoder(id)}/files",
            method="GET",
            params={"page_number": page_number, "page_size": page_size, "shared_assets": shared_assets},
            request_options=request_options,
        )
        if 200 <= _response.status_code < 300:
            return pydantic_v1.parse_obj_as(typing.List[FilePage], _response.json())  # type: ignore
        try:
            _response_json = _response.json()
        except JSONDecodeError:
            raise ApiError(status_code=_response.status_code, body=_response.text)
        raise ApiError(status_code=_response.status_code, body=_response_json)
