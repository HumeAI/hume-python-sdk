# This file was auto-generated by Fern from our API Definition.

from __future__ import annotations

import typing

import httpx
from .core.client_wrapper import AsyncClientWrapper, SyncClientWrapper
from .environment import HumeClientEnvironment

if typing.TYPE_CHECKING:
    from .empathic_voice.client import AsyncEmpathicVoiceClient, EmpathicVoiceClient
    from .expression_measurement.client import AsyncExpressionMeasurementClient, ExpressionMeasurementClient
    from .tts.client import AsyncTtsClient, TtsClient


class BaseHumeClient:
    """
    Use this class to access the different functions within the SDK. You can instantiate any number of clients with different configuration that will propagate to these functions.

    Parameters
    ----------
    environment : HumeClientEnvironment
        The environment to use for requests from the client. from .environment import HumeClientEnvironment



        Defaults to HumeClientEnvironment.PROD



    api_key : typing.Optional[str]
    headers : typing.Optional[typing.Dict[str, str]]
        Additional headers to send with every request.

    timeout : typing.Optional[float]
        The timeout to be used, in seconds, for requests. By default the timeout is 60 seconds, unless a custom httpx client is used, in which case this default is not enforced.

    follow_redirects : typing.Optional[bool]
        Whether the default httpx client follows redirects or not, this is irrelevant if a custom httpx client is passed in.

    httpx_client : typing.Optional[httpx.Client]
        The httpx client to use for making requests, a preconfigured client is used by default, however this is useful should you want to pass in any custom httpx configuration.

    Examples
    --------
    from hume import HumeClient

    client = HumeClient(
        api_key="YOUR_API_KEY",
    )
    """

    def __init__(
        self,
        *,
        environment: HumeClientEnvironment = HumeClientEnvironment.PROD,
        api_key: typing.Optional[str] = None,
        headers: typing.Optional[typing.Dict[str, str]] = None,
        timeout: typing.Optional[float] = None,
        follow_redirects: typing.Optional[bool] = True,
        httpx_client: typing.Optional[httpx.Client] = None,
    ):
        _defaulted_timeout = (
            timeout if timeout is not None else 60 if httpx_client is None else httpx_client.timeout.read
        )
        self._client_wrapper = SyncClientWrapper(
            environment=environment,
            api_key=api_key,
            headers=headers,
            httpx_client=httpx_client
            if httpx_client is not None
            else httpx.Client(timeout=_defaulted_timeout, follow_redirects=follow_redirects)
            if follow_redirects is not None
            else httpx.Client(timeout=_defaulted_timeout),
            timeout=_defaulted_timeout,
        )
        self._tts: typing.Optional[TtsClient] = None
        self._empathic_voice: typing.Optional[EmpathicVoiceClient] = None
        self._expression_measurement: typing.Optional[ExpressionMeasurementClient] = None

    @property
    def tts(self):
        if self._tts is None:
            from .tts.client import TtsClient  # noqa: E402

            self._tts = TtsClient(client_wrapper=self._client_wrapper)
        return self._tts

    @property
    def empathic_voice(self):
        if self._empathic_voice is None:
            from .empathic_voice.client import EmpathicVoiceClient  # noqa: E402

            self._empathic_voice = EmpathicVoiceClient(client_wrapper=self._client_wrapper)
        return self._empathic_voice

    @property
    def expression_measurement(self):
        if self._expression_measurement is None:
            from .expression_measurement.client import ExpressionMeasurementClient  # noqa: E402

            self._expression_measurement = ExpressionMeasurementClient(client_wrapper=self._client_wrapper)
        return self._expression_measurement


class AsyncBaseHumeClient:
    """
    Use this class to access the different functions within the SDK. You can instantiate any number of clients with different configuration that will propagate to these functions.

    Parameters
    ----------
    environment : HumeClientEnvironment
        The environment to use for requests from the client. from .environment import HumeClientEnvironment



        Defaults to HumeClientEnvironment.PROD



    api_key : typing.Optional[str]
    headers : typing.Optional[typing.Dict[str, str]]
        Additional headers to send with every request.

    timeout : typing.Optional[float]
        The timeout to be used, in seconds, for requests. By default the timeout is 60 seconds, unless a custom httpx client is used, in which case this default is not enforced.

    follow_redirects : typing.Optional[bool]
        Whether the default httpx client follows redirects or not, this is irrelevant if a custom httpx client is passed in.

    httpx_client : typing.Optional[httpx.AsyncClient]
        The httpx client to use for making requests, a preconfigured client is used by default, however this is useful should you want to pass in any custom httpx configuration.

    Examples
    --------
    from hume import AsyncHumeClient

    client = AsyncHumeClient(
        api_key="YOUR_API_KEY",
    )
    """

    def __init__(
        self,
        *,
        environment: HumeClientEnvironment = HumeClientEnvironment.PROD,
        api_key: typing.Optional[str] = None,
        headers: typing.Optional[typing.Dict[str, str]] = None,
        timeout: typing.Optional[float] = None,
        follow_redirects: typing.Optional[bool] = True,
        httpx_client: typing.Optional[httpx.AsyncClient] = None,
    ):
        _defaulted_timeout = (
            timeout if timeout is not None else 60 if httpx_client is None else httpx_client.timeout.read
        )
        self._client_wrapper = AsyncClientWrapper(
            environment=environment,
            api_key=api_key,
            headers=headers,
            httpx_client=httpx_client
            if httpx_client is not None
            else httpx.AsyncClient(timeout=_defaulted_timeout, follow_redirects=follow_redirects)
            if follow_redirects is not None
            else httpx.AsyncClient(timeout=_defaulted_timeout),
            timeout=_defaulted_timeout,
        )
        self._tts: typing.Optional[AsyncTtsClient] = None
        self._empathic_voice: typing.Optional[AsyncEmpathicVoiceClient] = None
        self._expression_measurement: typing.Optional[AsyncExpressionMeasurementClient] = None

    @property
    def tts(self):
        if self._tts is None:
            from .tts.client import AsyncTtsClient  # noqa: E402

            self._tts = AsyncTtsClient(client_wrapper=self._client_wrapper)
        return self._tts

    @property
    def empathic_voice(self):
        if self._empathic_voice is None:
            from .empathic_voice.client import AsyncEmpathicVoiceClient  # noqa: E402

            self._empathic_voice = AsyncEmpathicVoiceClient(client_wrapper=self._client_wrapper)
        return self._empathic_voice

    @property
    def expression_measurement(self):
        if self._expression_measurement is None:
            from .expression_measurement.client import AsyncExpressionMeasurementClient  # noqa: E402

            self._expression_measurement = AsyncExpressionMeasurementClient(client_wrapper=self._client_wrapper)
        return self._expression_measurement
