# This file was auto-generated by Fern from our API Definition.

from __future__ import annotations

import typing

from ..core.client_wrapper import AsyncClientWrapper, SyncClientWrapper
from .raw_client import AsyncRawExpressionMeasurementClient, RawExpressionMeasurementClient

if typing.TYPE_CHECKING:
    from .batch.client import AsyncBatchClient, BatchClient


class ExpressionMeasurementClient:
    def __init__(self, *, client_wrapper: SyncClientWrapper):
        self._raw_client = RawExpressionMeasurementClient(client_wrapper=client_wrapper)
        self._client_wrapper = client_wrapper
        self._batch: typing.Optional[BatchClient] = None

    @property
    def with_raw_response(self) -> RawExpressionMeasurementClient:
        """
        Retrieves a raw implementation of this client that returns raw responses.

        Returns
        -------
        RawExpressionMeasurementClient
        """
        return self._raw_client

    @property
    def batch(self):
        if self._batch is None:
            from .batch.client import BatchClient  # noqa: E402

            self._batch = BatchClient(client_wrapper=self._client_wrapper)
        return self._batch


class AsyncExpressionMeasurementClient:
    def __init__(self, *, client_wrapper: AsyncClientWrapper):
        self._raw_client = AsyncRawExpressionMeasurementClient(client_wrapper=client_wrapper)
        self._client_wrapper = client_wrapper
        self._batch: typing.Optional[AsyncBatchClient] = None

    @property
    def with_raw_response(self) -> AsyncRawExpressionMeasurementClient:
        """
        Retrieves a raw implementation of this client that returns raw responses.

        Returns
        -------
        AsyncRawExpressionMeasurementClient
        """
        return self._raw_client

    @property
    def batch(self):
        if self._batch is None:
            from .batch.client import AsyncBatchClient  # noqa: E402

            self._batch = AsyncBatchClient(client_wrapper=self._client_wrapper)
        return self._batch
