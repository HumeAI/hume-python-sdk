# This file was auto-generated by Fern from our API Definition.

import datetime as dt
import typing

from ....core.datetime_utils import serialize_datetime
from ....core.pydantic_utilities import deep_union_pydantic_dicts, pydantic_v1
from .stream_data_models_face import StreamDataModelsFace
from .stream_data_models_language import StreamDataModelsLanguage


class StreamDataModels(pydantic_v1.BaseModel):
    """
    Configuration used to specify which models should be used and with what settings.
    """

    burst: typing.Optional[typing.Dict[str, typing.Any]] = pydantic_v1.Field(default=None)
    """
    Configuration for the vocal burst emotion model.
    
    Note: Model configuration is not currently available in streaming.
    
    Please use the default configuration by passing an empty object `{}`.
    """

    face: typing.Optional[StreamDataModelsFace] = pydantic_v1.Field(default=None)
    """
    Configuration for the facial expression emotion model.
    
    Note: Using the `reset_stream` parameter does not have any effect on face identification. A single face identifier cache is maintained over a full session whether `reset_stream` is used or not.
    """

    facemesh: typing.Optional[typing.Dict[str, typing.Any]] = pydantic_v1.Field(default=None)
    """
    Configuration for the facemesh emotion model.
    
    Note: Model configuration is not currently available in streaming.
    
    Please use the default configuration by passing an empty object `{}`.
    """

    language: typing.Optional[StreamDataModelsLanguage] = pydantic_v1.Field(default=None)
    """
    Configuration for the language emotion model.
    """

    prosody: typing.Optional[typing.Dict[str, typing.Any]] = pydantic_v1.Field(default=None)
    """
    Configuration for the speech prosody emotion model.
    
    Note: Model configuration is not currently available in streaming.
    
    Please use the default configuration by passing an empty object `{}`.
    """

    def json(self, **kwargs: typing.Any) -> str:
        kwargs_with_defaults: typing.Any = {"by_alias": True, "exclude_unset": True, **kwargs}
        return super().json(**kwargs_with_defaults)

    def dict(self, **kwargs: typing.Any) -> typing.Dict[str, typing.Any]:
        kwargs_with_defaults_exclude_unset: typing.Any = {"by_alias": True, "exclude_unset": True, **kwargs}
        kwargs_with_defaults_exclude_none: typing.Any = {"by_alias": True, "exclude_none": True, **kwargs}

        return deep_union_pydantic_dicts(
            super().dict(**kwargs_with_defaults_exclude_unset), super().dict(**kwargs_with_defaults_exclude_none)
        )

    class Config:
        frozen = True
        smart_union = True
        extra = pydantic_v1.Extra.allow
        json_encoders = {dt.datetime: serialize_datetime}
