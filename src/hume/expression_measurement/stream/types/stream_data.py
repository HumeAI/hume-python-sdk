# This file was auto-generated by Fern from our API Definition.

import datetime as dt
import typing

from ....core.datetime_utils import serialize_datetime
from ....core.pydantic_utilities import deep_union_pydantic_dicts, pydantic_v1
from .stream_data_models import StreamDataModels


class StreamData(pydantic_v1.BaseModel):
    data: typing.Optional[str] = None
    models: typing.Optional[StreamDataModels] = pydantic_v1.Field(default=None)
    """
    Configuration used to specify which models should be used and with what settings.
    """

    stream_window_ms: typing.Optional[float] = pydantic_v1.Field(default=None)
    """
    Length in milliseconds of streaming sliding window.
    
    Extending the length of this window will prepend media context from past payloads into the current payload.
    
    For example, if on the first payload you send 500ms of data and on the second payload you send an additional 500ms of data, a window of at least 1000ms will allow the model to process all 1000ms of stream data.
    
    A window of 600ms would append the full 500ms of the second payload to the last 100ms of the first payload.
    
    Note: This feature is currently only supported for audio data and audio models. For other file types and models this parameter will be ignored.
    """

    reset_stream: typing.Optional[bool] = pydantic_v1.Field(default=None)
    """
    Whether to reset the streaming sliding window before processing the current payload.
    
    If this parameter is set to `true` then past context will be deleted before processing the current payload.
    
    Use reset_stream when one audio file is done being processed and you do not want context to leak across files.
    """

    raw_text: typing.Optional[bool] = pydantic_v1.Field(default=None)
    """
    Set to `true` to enable the data parameter to be parsed as raw text rather than base64 encoded bytes.
    This parameter is useful if you want to send text to be processed by the language model, but it cannot be used with other file types like audio, image, or video.
    """

    job_details: typing.Optional[bool] = pydantic_v1.Field(default=None)
    """
    Set to `true` to get details about the job.
    
    This parameter can be set in the same payload as data or it can be set without data and models configuration to get the job details between payloads.
    
    This parameter is useful to get the unique job ID.
    """

    payload_id: typing.Optional[str] = pydantic_v1.Field(default=None)
    """
    Pass an arbitrary string as the payload ID and get it back at the top level of the socket response.
    
    This can be useful if you have multiple requests running asynchronously and want to disambiguate responses as they are received.
    """

    def json(self, **kwargs: typing.Any) -> str:
        kwargs_with_defaults: typing.Any = {"by_alias": True, "exclude_unset": True, **kwargs}
        return super().json(**kwargs_with_defaults)

    def dict(self, **kwargs: typing.Any) -> typing.Dict[str, typing.Any]:
        kwargs_with_defaults_exclude_unset: typing.Any = {"by_alias": True, "exclude_unset": True, **kwargs}
        kwargs_with_defaults_exclude_none: typing.Any = {"by_alias": True, "exclude_none": True, **kwargs}

        return deep_union_pydantic_dicts(
            super().dict(**kwargs_with_defaults_exclude_unset), super().dict(**kwargs_with_defaults_exclude_none)
        )

    class Config:
        frozen = True
        smart_union = True
        extra = pydantic_v1.Extra.allow
        json_encoders = {dt.datetime: serialize_datetime}
