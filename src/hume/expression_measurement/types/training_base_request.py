# This file was auto-generated by Fern from our API Definition.

import datetime as dt
import typing

from ...core.datetime_utils import serialize_datetime
from ...core.pydantic_utilities import deep_union_pydantic_dicts, pydantic_v1
from .alternative import Alternative
from .custom_model_request import CustomModelRequest
from .dataset import Dataset
from .evaluation_args import EvaluationArgs
from .task import Task


class TrainingBaseRequest(pydantic_v1.BaseModel):
    custom_model: CustomModelRequest
    dataset: Dataset
    target_feature: typing.Optional[str] = None
    task: typing.Optional[Task] = None
    evaluation: typing.Optional[EvaluationArgs] = None
    alternatives: typing.Optional[typing.List[Alternative]] = None
    callback_url: typing.Optional[str] = None
    notify: typing.Optional[bool] = None

    def json(self, **kwargs: typing.Any) -> str:
        kwargs_with_defaults: typing.Any = {"by_alias": True, "exclude_unset": True, **kwargs}
        return super().json(**kwargs_with_defaults)

    def dict(self, **kwargs: typing.Any) -> typing.Dict[str, typing.Any]:
        kwargs_with_defaults_exclude_unset: typing.Any = {"by_alias": True, "exclude_unset": True, **kwargs}
        kwargs_with_defaults_exclude_none: typing.Any = {"by_alias": True, "exclude_none": True, **kwargs}

        return deep_union_pydantic_dicts(
            super().dict(**kwargs_with_defaults_exclude_unset), super().dict(**kwargs_with_defaults_exclude_none)
        )

    class Config:
        frozen = True
        smart_union = True
        extra = pydantic_v1.Extra.allow
        json_encoders = {dt.datetime: serialize_datetime}
