# This file was auto-generated by Fern from our API Definition.

import datetime as dt
import typing

from ...core.datetime_utils import serialize_datetime
from ...core.pydantic_utilities import deep_union_pydantic_dicts, pydantic_v1
from .emotion_score import EmotionScore
from .position_interval import PositionInterval
from .time_interval import TimeInterval


class NerPrediction(pydantic_v1.BaseModel):
    entity: str = pydantic_v1.Field()
    """
    The recognized topic or entity.
    """

    position: PositionInterval
    entity_confidence: float = pydantic_v1.Field()
    """
    Our NER model's relative confidence in the recognized topic or entity.
    """

    support: float = pydantic_v1.Field()
    """
    A measure of how often the entity is linked to by other entities.
    """

    uri: str = pydantic_v1.Field()
    """
    A URL which provides more information about the recognized topic or entity.
    """

    link_word: str = pydantic_v1.Field()
    """
    The specific word to which the emotion predictions are linked.
    """

    time: typing.Optional[TimeInterval] = None
    confidence: typing.Optional[float] = pydantic_v1.Field(default=None)
    """
    Value between `0.0` and `1.0` that indicates our transcription model's relative confidence in this text.
    """

    speaker_confidence: typing.Optional[float] = pydantic_v1.Field(default=None)
    """
    Value between `0.0` and `1.0` that indicates our transcription model's relative confidence that this text was spoken by this speaker.
    """

    emotions: typing.List[EmotionScore] = pydantic_v1.Field()
    """
    A high-dimensional embedding in emotion space.
    """

    def json(self, **kwargs: typing.Any) -> str:
        kwargs_with_defaults: typing.Any = {"by_alias": True, "exclude_unset": True, **kwargs}
        return super().json(**kwargs_with_defaults)

    def dict(self, **kwargs: typing.Any) -> typing.Dict[str, typing.Any]:
        kwargs_with_defaults_exclude_unset: typing.Any = {"by_alias": True, "exclude_unset": True, **kwargs}
        kwargs_with_defaults_exclude_none: typing.Any = {"by_alias": True, "exclude_none": True, **kwargs}

        return deep_union_pydantic_dicts(
            super().dict(**kwargs_with_defaults_exclude_unset), super().dict(**kwargs_with_defaults_exclude_none)
        )

    class Config:
        frozen = True
        smart_union = True
        extra = pydantic_v1.Extra.allow
        json_encoders = {dt.datetime: serialize_datetime}
