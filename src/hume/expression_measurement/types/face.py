# This file was auto-generated by Fern from our API Definition.

import datetime as dt
import typing

from ...core.datetime_utils import serialize_datetime
from ...core.pydantic_utilities import deep_union_pydantic_dicts, pydantic_v1
from .unconfigurable import Unconfigurable


class Face(pydantic_v1.BaseModel):
    fps_pred: typing.Optional[float] = pydantic_v1.Field(default=None)
    """
    Number of frames per second to process. Other frames will be omitted from the response. Set to `0` to process every frame.
    """

    prob_threshold: typing.Optional[float] = pydantic_v1.Field(default=None)
    """
    Face detection probability threshold. Faces detected with a probability less than this threshold will be omitted from the response.
    """

    identify_faces: typing.Optional[bool] = pydantic_v1.Field(default=None)
    """
    Whether to return identifiers for faces across frames. If `true`, unique identifiers will be assigned to face bounding boxes to differentiate different faces. If `false`, all faces will be tagged with an `unknown` ID.
    """

    min_face_size: typing.Optional[int] = pydantic_v1.Field(default=None)
    """
    Minimum bounding box side length in pixels to treat as a face. Faces detected with a bounding box side length in pixels less than this threshold will be omitted from the response.
    """

    facs: typing.Optional[Unconfigurable] = None
    descriptions: typing.Optional[Unconfigurable] = None
    save_faces: typing.Optional[bool] = pydantic_v1.Field(default=None)
    """
    Whether to extract and save the detected faces in the artifacts zip created by each job.
    """

    def json(self, **kwargs: typing.Any) -> str:
        kwargs_with_defaults: typing.Any = {"by_alias": True, "exclude_unset": True, **kwargs}
        return super().json(**kwargs_with_defaults)

    def dict(self, **kwargs: typing.Any) -> typing.Dict[str, typing.Any]:
        kwargs_with_defaults_exclude_unset: typing.Any = {"by_alias": True, "exclude_unset": True, **kwargs}
        kwargs_with_defaults_exclude_none: typing.Any = {"by_alias": True, "exclude_none": True, **kwargs}

        return deep_union_pydantic_dicts(
            super().dict(**kwargs_with_defaults_exclude_unset), super().dict(**kwargs_with_defaults_exclude_none)
        )

    class Config:
        frozen = True
        smart_union = True
        extra = pydantic_v1.Extra.allow
        json_encoders = {dt.datetime: serialize_datetime}
