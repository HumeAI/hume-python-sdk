# This file was auto-generated by Fern from our API Definition.

from hume import HumeClient
from hume import AsyncHumeClient
import typing
from ..utilities import validate_response


async def test_get_return_custom_voices_for_user(client: HumeClient, async_client: AsyncHumeClient) -> None:
    expected_response: typing.Any = {
        "page_number": 1,
        "page_size": 1,
        "total_pages": 1,
        "custom_voices_page": [
            {
                "id": "id",
                "version": 1,
                "name": "name",
                "created_on": 1000000,
                "modified_on": 1000000,
                "base_voice": "ITO",
                "parameter_model": "20240715-4parameter",
                "parameters": {},
            }
        ],
    }
    expected_types: typing.Any = {
        "page_number": "integer",
        "page_size": "integer",
        "total_pages": "integer",
        "custom_voices_page": (
            "list",
            {
                0: {
                    "id": None,
                    "version": "integer",
                    "name": None,
                    "created_on": None,
                    "modified_on": None,
                    "base_voice": None,
                    "parameter_model": None,
                    "parameters": {},
                }
            },
        ),
    }
    response = client.empathic_voice.custom_voices.get_return_custom_voices_for_user()
    validate_response(response, expected_response, expected_types)

    async_response = await async_client.empathic_voice.custom_voices.get_return_custom_voices_for_user()
    validate_response(async_response, expected_response, expected_types)


async def test_create_new_custom_voice(client: HumeClient, async_client: AsyncHumeClient) -> None:
    expected_response: typing.Any = {
        "id": "id",
        "version": 1,
        "name": "name",
        "created_on": 1000000,
        "modified_on": 1000000,
        "base_voice": "ITO",
        "parameter_model": "20240715-4parameter",
        "parameters": {"gender": 1, "huskiness": 1, "nasality": 1, "pitch": 1},
    }
    expected_types: typing.Any = {
        "id": None,
        "version": "integer",
        "name": None,
        "created_on": None,
        "modified_on": None,
        "base_voice": None,
        "parameter_model": None,
        "parameters": {"gender": "integer", "huskiness": "integer", "nasality": "integer", "pitch": "integer"},
    }
    response = client.empathic_voice.custom_voices.create_new_custom_voice(name="name", base_voice="ITO")
    validate_response(response, expected_response, expected_types)

    async_response = await async_client.empathic_voice.custom_voices.create_new_custom_voice(
        name="name", base_voice="ITO"
    )
    validate_response(async_response, expected_response, expected_types)


async def test_get_return_custom_voice_by_custom_voice_id(client: HumeClient, async_client: AsyncHumeClient) -> None:
    expected_response: typing.Any = {
        "id": "id",
        "version": 1,
        "name": "name",
        "created_on": 1000000,
        "modified_on": 1000000,
        "base_voice": "ITO",
        "parameter_model": "20240715-4parameter",
        "parameters": {"gender": 1, "huskiness": 1, "nasality": 1, "pitch": 1},
    }
    expected_types: typing.Any = {
        "id": None,
        "version": "integer",
        "name": None,
        "created_on": None,
        "modified_on": None,
        "base_voice": None,
        "parameter_model": None,
        "parameters": {"gender": "integer", "huskiness": "integer", "nasality": "integer", "pitch": "integer"},
    }
    response = client.empathic_voice.custom_voices.get_return_custom_voice_by_custom_voice_id(id="id")
    validate_response(response, expected_response, expected_types)

    async_response = await async_client.empathic_voice.custom_voices.get_return_custom_voice_by_custom_voice_id(id="id")
    validate_response(async_response, expected_response, expected_types)


async def test_add_new_custom_voice_version(client: HumeClient, async_client: AsyncHumeClient) -> None:
    expected_response: typing.Any = {
        "id": "id",
        "version": 1,
        "name": "name",
        "created_on": 1000000,
        "modified_on": 1000000,
        "base_voice": "ITO",
        "parameter_model": "20240715-4parameter",
        "parameters": {"gender": 1, "huskiness": 1, "nasality": 1, "pitch": 1},
    }
    expected_types: typing.Any = {
        "id": None,
        "version": "integer",
        "name": None,
        "created_on": None,
        "modified_on": None,
        "base_voice": None,
        "parameter_model": None,
        "parameters": {"gender": "integer", "huskiness": "integer", "nasality": "integer", "pitch": "integer"},
    }
    response = client.empathic_voice.custom_voices.add_new_custom_voice_version(id="id", name="name", base_voice="ITO")
    validate_response(response, expected_response, expected_types)

    async_response = await async_client.empathic_voice.custom_voices.add_new_custom_voice_version(
        id="id", name="name", base_voice="ITO"
    )
    validate_response(async_response, expected_response, expected_types)


async def test_delete_custom_voice(client: HumeClient, async_client: AsyncHumeClient) -> None:
    # Type ignore to avoid mypy complaining about the function not being meant to return a value
    assert (
        client.empathic_voice.custom_voices.delete_custom_voice(id="id")  # type: ignore[func-returns-value]
        is None
    )

    assert (
        await async_client.empathic_voice.custom_voices.delete_custom_voice(id="id")  # type: ignore[func-returns-value]
        is None
    )


async def test_update_custom_voice_name(client: HumeClient, async_client: AsyncHumeClient) -> None:
    expected_response: typing.Any = "string"
    expected_types: typing.Any = None
    response = client.empathic_voice.custom_voices.update_custom_voice_name(id="string", name="string")
    validate_response(response, expected_response, expected_types)

    async_response = await async_client.empathic_voice.custom_voices.update_custom_voice_name(
        id="string", name="string"
    )
    validate_response(async_response, expected_response, expected_types)
