# This file was auto-generated by Fern from our API Definition.

import typing

from hume.client import AsyncHumeClient, HumeClient

from ..utilities import validate_response


async def test_list_configs(client: HumeClient, async_client: AsyncHumeClient) -> None:
    expected_response: typing.Any = {
        "page_number": 1,
        "page_size": 1,
        "total_pages": 1,
        "configs_page": [
            {
                "id": "id",
                "version": 1,
                "version_description": "version_description",
                "name": "name",
                "created_on": 1000000,
                "modified_on": 1000000,
                "prompt": {
                    "id": "id",
                    "version": 1,
                    "version_type": "FIXED",
                    "name": "name",
                    "created_on": 1000000,
                    "modified_on": 1000000,
                    "text": "text",
                },
                "voice": {"provider": "HUME_AI"},
                "ellm_model": {"allow_short_responses": True},
                "timeouts": {"inactivity": {"enabled": True}, "max_duration": {"enabled": True}},
            }
        ],
    }
    expected_types: typing.Any = {
        "page_number": "integer",
        "page_size": "integer",
        "total_pages": "integer",
        "configs_page": (
            "list",
            {
                0: {
                    "id": None,
                    "version": "integer",
                    "version_description": None,
                    "name": None,
                    "created_on": None,
                    "modified_on": None,
                    "prompt": {
                        "id": None,
                        "version": "integer",
                        "version_type": None,
                        "name": None,
                        "created_on": None,
                        "modified_on": None,
                        "text": None,
                    },
                    "voice": {"provider": None},
                    "ellm_model": {"allow_short_responses": None},
                    "timeouts": {"inactivity": {"enabled": None}, "max_duration": {"enabled": None}},
                }
            },
        ),
    }
    response = client.empathic_voice.configs.list_configs()
    validate_response(response, expected_response, expected_types)

    async_response = await async_client.empathic_voice.configs.list_configs()
    validate_response(async_response, expected_response, expected_types)


async def test_create_config(client: HumeClient, async_client: AsyncHumeClient) -> None:
    expected_response: typing.Any = {
        "id": "id",
        "version": 1,
        "version_description": "version_description",
        "name": "name",
        "created_on": 1000000,
        "modified_on": 1000000,
        "prompt": {
            "id": "id",
            "version": 1,
            "version_type": "FIXED",
            "version_description": "version_description",
            "name": "name",
            "created_on": 1000000,
            "modified_on": 1000000,
            "text": "text",
        },
        "voice": {"provider": "HUME_AI", "name": "ITO"},
        "language_model": {"model_provider": "OPEN_AI", "model_resource": "model_resource", "temperature": 1.1},
        "ellm_model": {"allow_short_responses": True},
        "tools": [
            {
                "tool_type": "BUILTIN",
                "id": "id",
                "version": 1,
                "version_type": "FIXED",
                "version_description": "version_description",
                "name": "name",
                "created_on": 1000000,
                "modified_on": 1000000,
                "fallback_content": "fallback_content",
                "description": "description",
                "parameters": "parameters",
            }
        ],
        "builtin_tools": [{"tool_type": "BUILTIN", "name": "name", "fallback_content": "fallback_content"}],
        "event_messages": {
            "on_new_chat": {"enabled": True, "text": "text"},
            "on_inactivity_timeout": {"enabled": True, "text": "text"},
            "on_max_duration_timeout": {"enabled": True, "text": "text"},
        },
        "timeouts": {
            "inactivity": {"enabled": True, "duration_secs": 1},
            "max_duration": {"enabled": True, "duration_secs": 1},
        },
    }
    expected_types: typing.Any = {
        "id": None,
        "version": "integer",
        "version_description": None,
        "name": None,
        "created_on": None,
        "modified_on": None,
        "prompt": {
            "id": None,
            "version": "integer",
            "version_type": None,
            "version_description": None,
            "name": None,
            "created_on": None,
            "modified_on": None,
            "text": None,
        },
        "voice": {"provider": None, "name": None},
        "language_model": {"model_provider": None, "model_resource": None, "temperature": None},
        "ellm_model": {"allow_short_responses": None},
        "tools": (
            "list",
            {
                0: {
                    "tool_type": None,
                    "id": None,
                    "version": "integer",
                    "version_type": None,
                    "version_description": None,
                    "name": None,
                    "created_on": None,
                    "modified_on": None,
                    "fallback_content": None,
                    "description": None,
                    "parameters": None,
                }
            },
        ),
        "builtin_tools": ("list", {0: {"tool_type": None, "name": None, "fallback_content": None}}),
        "event_messages": {
            "on_new_chat": {"enabled": None, "text": None},
            "on_inactivity_timeout": {"enabled": None, "text": None},
            "on_max_duration_timeout": {"enabled": None, "text": None},
        },
        "timeouts": {
            "inactivity": {"enabled": None, "duration_secs": "integer"},
            "max_duration": {"enabled": None, "duration_secs": "integer"},
        },
    }
    response = client.empathic_voice.configs.create_config(name="name")
    validate_response(response, expected_response, expected_types)

    async_response = await async_client.empathic_voice.configs.create_config(name="name")
    validate_response(async_response, expected_response, expected_types)


async def test_list_config_versions(client: HumeClient, async_client: AsyncHumeClient) -> None:
    expected_response: typing.Any = {
        "page_number": 1,
        "page_size": 1,
        "total_pages": 1,
        "configs_page": [
            {
                "id": "id",
                "version": 1,
                "version_description": "version_description",
                "name": "name",
                "created_on": 1000000,
                "modified_on": 1000000,
                "prompt": {
                    "id": "id",
                    "version": 1,
                    "version_type": "FIXED",
                    "name": "name",
                    "created_on": 1000000,
                    "modified_on": 1000000,
                    "text": "text",
                },
                "voice": {"provider": "HUME_AI"},
                "ellm_model": {"allow_short_responses": True},
                "timeouts": {"inactivity": {"enabled": True}, "max_duration": {"enabled": True}},
            }
        ],
    }
    expected_types: typing.Any = {
        "page_number": "integer",
        "page_size": "integer",
        "total_pages": "integer",
        "configs_page": (
            "list",
            {
                0: {
                    "id": None,
                    "version": "integer",
                    "version_description": None,
                    "name": None,
                    "created_on": None,
                    "modified_on": None,
                    "prompt": {
                        "id": None,
                        "version": "integer",
                        "version_type": None,
                        "name": None,
                        "created_on": None,
                        "modified_on": None,
                        "text": None,
                    },
                    "voice": {"provider": None},
                    "ellm_model": {"allow_short_responses": None},
                    "timeouts": {"inactivity": {"enabled": None}, "max_duration": {"enabled": None}},
                }
            },
        ),
    }
    response = client.empathic_voice.configs.list_config_versions(id="id")
    validate_response(response, expected_response, expected_types)

    async_response = await async_client.empathic_voice.configs.list_config_versions(id="id")
    validate_response(async_response, expected_response, expected_types)


async def test_create_config_version(client: HumeClient, async_client: AsyncHumeClient) -> None:
    expected_response: typing.Any = {
        "id": "id",
        "version": 1,
        "version_description": "version_description",
        "name": "name",
        "created_on": 1000000,
        "modified_on": 1000000,
        "prompt": {
            "id": "id",
            "version": 1,
            "version_type": "FIXED",
            "version_description": "version_description",
            "name": "name",
            "created_on": 1000000,
            "modified_on": 1000000,
            "text": "text",
        },
        "voice": {"provider": "HUME_AI", "name": "ITO"},
        "language_model": {"model_provider": "OPEN_AI", "model_resource": "model_resource", "temperature": 1.1},
        "ellm_model": {"allow_short_responses": True},
        "tools": [
            {
                "tool_type": "BUILTIN",
                "id": "id",
                "version": 1,
                "version_type": "FIXED",
                "version_description": "version_description",
                "name": "name",
                "created_on": 1000000,
                "modified_on": 1000000,
                "fallback_content": "fallback_content",
                "description": "description",
                "parameters": "parameters",
            }
        ],
        "builtin_tools": [{"tool_type": "BUILTIN", "name": "name", "fallback_content": "fallback_content"}],
        "event_messages": {
            "on_new_chat": {"enabled": True, "text": "text"},
            "on_inactivity_timeout": {"enabled": True, "text": "text"},
            "on_max_duration_timeout": {"enabled": True, "text": "text"},
        },
        "timeouts": {
            "inactivity": {"enabled": True, "duration_secs": 1},
            "max_duration": {"enabled": True, "duration_secs": 1},
        },
    }
    expected_types: typing.Any = {
        "id": None,
        "version": "integer",
        "version_description": None,
        "name": None,
        "created_on": None,
        "modified_on": None,
        "prompt": {
            "id": None,
            "version": "integer",
            "version_type": None,
            "version_description": None,
            "name": None,
            "created_on": None,
            "modified_on": None,
            "text": None,
        },
        "voice": {"provider": None, "name": None},
        "language_model": {"model_provider": None, "model_resource": None, "temperature": None},
        "ellm_model": {"allow_short_responses": None},
        "tools": (
            "list",
            {
                0: {
                    "tool_type": None,
                    "id": None,
                    "version": "integer",
                    "version_type": None,
                    "version_description": None,
                    "name": None,
                    "created_on": None,
                    "modified_on": None,
                    "fallback_content": None,
                    "description": None,
                    "parameters": None,
                }
            },
        ),
        "builtin_tools": ("list", {0: {"tool_type": None, "name": None, "fallback_content": None}}),
        "event_messages": {
            "on_new_chat": {"enabled": None, "text": None},
            "on_inactivity_timeout": {"enabled": None, "text": None},
            "on_max_duration_timeout": {"enabled": None, "text": None},
        },
        "timeouts": {
            "inactivity": {"enabled": None, "duration_secs": "integer"},
            "max_duration": {"enabled": None, "duration_secs": "integer"},
        },
    }
    response = client.empathic_voice.configs.create_config_version(id="id")
    validate_response(response, expected_response, expected_types)

    async_response = await async_client.empathic_voice.configs.create_config_version(id="id")
    validate_response(async_response, expected_response, expected_types)


async def test_delete_config(client: HumeClient, async_client: AsyncHumeClient) -> None:
    # Type ignore to avoid mypy complaining about the function not being meant to return a value
    assert client.empathic_voice.configs.delete_config(id="id") is None  # type: ignore[func-returns-value]

    assert await async_client.empathic_voice.configs.delete_config(id="id") is None  # type: ignore[func-returns-value]


async def test_update_config_name(client: HumeClient, async_client: AsyncHumeClient) -> None:
    expected_response: typing.Any = "string"
    expected_types: typing.Any = None
    response = client.empathic_voice.configs.update_config_name(id="string", name="string")
    validate_response(response, expected_response, expected_types)

    async_response = await async_client.empathic_voice.configs.update_config_name(id="string", name="string")
    validate_response(async_response, expected_response, expected_types)


async def test_get_config_version(client: HumeClient, async_client: AsyncHumeClient) -> None:
    expected_response: typing.Any = {
        "id": "id",
        "version": 1,
        "version_description": "version_description",
        "name": "name",
        "created_on": 1000000,
        "modified_on": 1000000,
        "prompt": {
            "id": "id",
            "version": 1,
            "version_type": "FIXED",
            "version_description": "version_description",
            "name": "name",
            "created_on": 1000000,
            "modified_on": 1000000,
            "text": "text",
        },
        "voice": {"provider": "HUME_AI", "name": "ITO"},
        "language_model": {"model_provider": "OPEN_AI", "model_resource": "model_resource", "temperature": 1.1},
        "ellm_model": {"allow_short_responses": True},
        "tools": [
            {
                "tool_type": "BUILTIN",
                "id": "id",
                "version": 1,
                "version_type": "FIXED",
                "version_description": "version_description",
                "name": "name",
                "created_on": 1000000,
                "modified_on": 1000000,
                "fallback_content": "fallback_content",
                "description": "description",
                "parameters": "parameters",
            }
        ],
        "builtin_tools": [{"tool_type": "BUILTIN", "name": "name", "fallback_content": "fallback_content"}],
        "event_messages": {
            "on_new_chat": {"enabled": True, "text": "text"},
            "on_inactivity_timeout": {"enabled": True, "text": "text"},
            "on_max_duration_timeout": {"enabled": True, "text": "text"},
        },
        "timeouts": {
            "inactivity": {"enabled": True, "duration_secs": 1},
            "max_duration": {"enabled": True, "duration_secs": 1},
        },
    }
    expected_types: typing.Any = {
        "id": None,
        "version": "integer",
        "version_description": None,
        "name": None,
        "created_on": None,
        "modified_on": None,
        "prompt": {
            "id": None,
            "version": "integer",
            "version_type": None,
            "version_description": None,
            "name": None,
            "created_on": None,
            "modified_on": None,
            "text": None,
        },
        "voice": {"provider": None, "name": None},
        "language_model": {"model_provider": None, "model_resource": None, "temperature": None},
        "ellm_model": {"allow_short_responses": None},
        "tools": (
            "list",
            {
                0: {
                    "tool_type": None,
                    "id": None,
                    "version": "integer",
                    "version_type": None,
                    "version_description": None,
                    "name": None,
                    "created_on": None,
                    "modified_on": None,
                    "fallback_content": None,
                    "description": None,
                    "parameters": None,
                }
            },
        ),
        "builtin_tools": ("list", {0: {"tool_type": None, "name": None, "fallback_content": None}}),
        "event_messages": {
            "on_new_chat": {"enabled": None, "text": None},
            "on_inactivity_timeout": {"enabled": None, "text": None},
            "on_max_duration_timeout": {"enabled": None, "text": None},
        },
        "timeouts": {
            "inactivity": {"enabled": None, "duration_secs": "integer"},
            "max_duration": {"enabled": None, "duration_secs": "integer"},
        },
    }
    response = client.empathic_voice.configs.get_config_version(id="id", version=1)
    validate_response(response, expected_response, expected_types)

    async_response = await async_client.empathic_voice.configs.get_config_version(id="id", version=1)
    validate_response(async_response, expected_response, expected_types)


async def test_delete_config_version(client: HumeClient, async_client: AsyncHumeClient) -> None:
    # Type ignore to avoid mypy complaining about the function not being meant to return a value
    assert client.empathic_voice.configs.delete_config_version(id="id", version=1) is None  # type: ignore[func-returns-value]

    assert await async_client.empathic_voice.configs.delete_config_version(id="id", version=1) is None  # type: ignore[func-returns-value]


async def test_update_config_description(client: HumeClient, async_client: AsyncHumeClient) -> None:
    expected_response: typing.Any = {
        "id": "id",
        "version": 1,
        "version_description": "version_description",
        "name": "name",
        "created_on": 1000000,
        "modified_on": 1000000,
        "prompt": {
            "id": "id",
            "version": 1,
            "version_type": "FIXED",
            "version_description": "version_description",
            "name": "name",
            "created_on": 1000000,
            "modified_on": 1000000,
            "text": "text",
        },
        "voice": {"provider": "HUME_AI", "name": "ITO"},
        "language_model": {"model_provider": "OPEN_AI", "model_resource": "model_resource", "temperature": 1.1},
        "ellm_model": {"allow_short_responses": True},
        "tools": [
            {
                "tool_type": "BUILTIN",
                "id": "id",
                "version": 1,
                "version_type": "FIXED",
                "version_description": "version_description",
                "name": "name",
                "created_on": 1000000,
                "modified_on": 1000000,
                "fallback_content": "fallback_content",
                "description": "description",
                "parameters": "parameters",
            }
        ],
        "builtin_tools": [{"tool_type": "BUILTIN", "name": "name", "fallback_content": "fallback_content"}],
        "event_messages": {
            "on_new_chat": {"enabled": True, "text": "text"},
            "on_inactivity_timeout": {"enabled": True, "text": "text"},
            "on_max_duration_timeout": {"enabled": True, "text": "text"},
        },
        "timeouts": {
            "inactivity": {"enabled": True, "duration_secs": 1},
            "max_duration": {"enabled": True, "duration_secs": 1},
        },
    }
    expected_types: typing.Any = {
        "id": None,
        "version": "integer",
        "version_description": None,
        "name": None,
        "created_on": None,
        "modified_on": None,
        "prompt": {
            "id": None,
            "version": "integer",
            "version_type": None,
            "version_description": None,
            "name": None,
            "created_on": None,
            "modified_on": None,
            "text": None,
        },
        "voice": {"provider": None, "name": None},
        "language_model": {"model_provider": None, "model_resource": None, "temperature": None},
        "ellm_model": {"allow_short_responses": None},
        "tools": (
            "list",
            {
                0: {
                    "tool_type": None,
                    "id": None,
                    "version": "integer",
                    "version_type": None,
                    "version_description": None,
                    "name": None,
                    "created_on": None,
                    "modified_on": None,
                    "fallback_content": None,
                    "description": None,
                    "parameters": None,
                }
            },
        ),
        "builtin_tools": ("list", {0: {"tool_type": None, "name": None, "fallback_content": None}}),
        "event_messages": {
            "on_new_chat": {"enabled": None, "text": None},
            "on_inactivity_timeout": {"enabled": None, "text": None},
            "on_max_duration_timeout": {"enabled": None, "text": None},
        },
        "timeouts": {
            "inactivity": {"enabled": None, "duration_secs": "integer"},
            "max_duration": {"enabled": None, "duration_secs": "integer"},
        },
    }
    response = client.empathic_voice.configs.update_config_description(id="id", version=1)
    validate_response(response, expected_response, expected_types)

    async_response = await async_client.empathic_voice.configs.update_config_description(id="id", version=1)
    validate_response(async_response, expected_response, expected_types)
