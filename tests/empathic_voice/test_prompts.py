# This file was auto-generated by Fern from our API Definition.

import typing

from hume.client import AsyncHumeClient, HumeClient

from ..utilities import validate_response


async def test_create_prompt(client: HumeClient, async_client: AsyncHumeClient) -> None:
    expected_response: typing.Any = {
        "id": "af699d45-2985-42cc-91b9-af9e5da3bac5",
        "version": 0,
        "version_type": "FIXED",
        "name": "Weather Assistant Prompt",
        "created_on": 1722633247488,
        "modified_on": 1722633247488,
        "text": "<role>You are an AI weather assistant providing users with accurate and up-to-date weather information. Respond to user queries concisely and clearly. Use simple language and avoid technical jargon. Provide temperature, precipitation, wind conditions, and any weather alerts. Include helpful tips if severe weather is expected.</role>",
    }
    expected_types: typing.Any = {
        "id": None,
        "version": "integer",
        "version_type": None,
        "name": None,
        "created_on": None,
        "modified_on": None,
        "text": None,
    }
    response = client.empathic_voice.prompts.create_prompt(
        name="Weather Assistant Prompt",
        text="<role>You are an AI weather assistant providing users with accurate and up-to-date weather information. Respond to user queries concisely and clearly. Use simple language and avoid technical jargon. Provide temperature, precipitation, wind conditions, and any weather alerts. Include helpful tips if severe weather is expected.</role>",
    )
    validate_response(response, expected_response, expected_types)

    async_response = await async_client.empathic_voice.prompts.create_prompt(
        name="Weather Assistant Prompt",
        text="<role>You are an AI weather assistant providing users with accurate and up-to-date weather information. Respond to user queries concisely and clearly. Use simple language and avoid technical jargon. Provide temperature, precipitation, wind conditions, and any weather alerts. Include helpful tips if severe weather is expected.</role>",
    )
    validate_response(async_response, expected_response, expected_types)


async def test_list_prompt_versions(client: HumeClient, async_client: AsyncHumeClient) -> None:
    expected_response: typing.Any = {
        "page_number": 0,
        "page_size": 10,
        "total_pages": 1,
        "prompts_page": [
            {
                "id": "af699d45-2985-42cc-91b9-af9e5da3bac5",
                "version": 0,
                "version_type": "FIXED",
                "version_description": "",
                "name": "Weather Assistant Prompt",
                "created_on": 1722633247488,
                "modified_on": 1722633247488,
                "text": "<role>You are an AI weather assistant providing users with accurate and up-to-date weather information. Respond to user queries concisely and clearly. Use simple language and avoid technical jargon. Provide temperature, precipitation, wind conditions, and any weather alerts. Include helpful tips if severe weather is expected.</role>",
            }
        ],
    }
    expected_types: typing.Any = {
        "page_number": "integer",
        "page_size": "integer",
        "total_pages": "integer",
        "prompts_page": (
            "list",
            {
                0: {
                    "id": None,
                    "version": "integer",
                    "version_type": None,
                    "version_description": None,
                    "name": None,
                    "created_on": None,
                    "modified_on": None,
                    "text": None,
                }
            },
        ),
    }
    response = client.empathic_voice.prompts.list_prompt_versions(id="af699d45-2985-42cc-91b9-af9e5da3bac5")
    validate_response(response, expected_response, expected_types)

    async_response = await async_client.empathic_voice.prompts.list_prompt_versions(
        id="af699d45-2985-42cc-91b9-af9e5da3bac5"
    )
    validate_response(async_response, expected_response, expected_types)


async def test_create_prompt_verison(client: HumeClient, async_client: AsyncHumeClient) -> None:
    expected_response: typing.Any = {
        "id": "af699d45-2985-42cc-91b9-af9e5da3bac5",
        "version": 1,
        "version_type": "FIXED",
        "version_description": "This is an updated version of the Weather Assistant Prompt.",
        "name": "Weather Assistant Prompt",
        "created_on": 1722633247488,
        "modified_on": 1722635140150,
        "text": "<role>You are an updated version of an AI weather assistant providing users with accurate and up-to-date weather information. Respond to user queries concisely and clearly. Use simple language and avoid technical jargon. Provide temperature, precipitation, wind conditions, and any weather alerts. Include helpful tips if severe weather is expected.</role>",
    }
    expected_types: typing.Any = {
        "id": None,
        "version": "integer",
        "version_type": None,
        "version_description": None,
        "name": None,
        "created_on": None,
        "modified_on": None,
        "text": None,
    }
    response = client.empathic_voice.prompts.create_prompt_verison(
        id="af699d45-2985-42cc-91b9-af9e5da3bac5",
        text="<role>You are an updated version of an AI weather assistant providing users with accurate and up-to-date weather information. Respond to user queries concisely and clearly. Use simple language and avoid technical jargon. Provide temperature, precipitation, wind conditions, and any weather alerts. Include helpful tips if severe weather is expected.</role>",
        version_description="This is an updated version of the Weather Assistant Prompt.",
    )
    validate_response(response, expected_response, expected_types)

    async_response = await async_client.empathic_voice.prompts.create_prompt_verison(
        id="af699d45-2985-42cc-91b9-af9e5da3bac5",
        text="<role>You are an updated version of an AI weather assistant providing users with accurate and up-to-date weather information. Respond to user queries concisely and clearly. Use simple language and avoid technical jargon. Provide temperature, precipitation, wind conditions, and any weather alerts. Include helpful tips if severe weather is expected.</role>",
        version_description="This is an updated version of the Weather Assistant Prompt.",
    )
    validate_response(async_response, expected_response, expected_types)


async def test_delete_prompt(client: HumeClient, async_client: AsyncHumeClient) -> None:
    # Type ignore to avoid mypy complaining about the function not being meant to return a value
    assert client.empathic_voice.prompts.delete_prompt(id="af699d45-2985-42cc-91b9-af9e5da3bac5") is None  # type: ignore[func-returns-value]

    assert await async_client.empathic_voice.prompts.delete_prompt(id="af699d45-2985-42cc-91b9-af9e5da3bac5") is None  # type: ignore[func-returns-value]


async def test_update_prompt_name(client: HumeClient, async_client: AsyncHumeClient) -> None:
    # Type ignore to avoid mypy complaining about the function not being meant to return a value
    assert client.empathic_voice.prompts.update_prompt_name(id="af699d45-2985-42cc-91b9-af9e5da3bac5", name="Updated Weather Assistant Prompt Name") is None  # type: ignore[func-returns-value]

    assert await async_client.empathic_voice.prompts.update_prompt_name(id="af699d45-2985-42cc-91b9-af9e5da3bac5", name="Updated Weather Assistant Prompt Name") is None  # type: ignore[func-returns-value]


async def test_get_prompt_version(client: HumeClient, async_client: AsyncHumeClient) -> None:
    expected_response: typing.Any = {
        "id": "af699d45-2985-42cc-91b9-af9e5da3bac5",
        "version": 0,
        "version_type": "FIXED",
        "version_description": "",
        "name": "Weather Assistant Prompt",
        "created_on": 1722633247488,
        "modified_on": 1722633247488,
        "text": "<role>You are an AI weather assistant providing users with accurate and up-to-date weather information. Respond to user queries concisely and clearly. Use simple language and avoid technical jargon. Provide temperature, precipitation, wind conditions, and any weather alerts. Include helpful tips if severe weather is expected.</role>",
    }
    expected_types: typing.Any = {
        "id": None,
        "version": "integer",
        "version_type": None,
        "version_description": None,
        "name": None,
        "created_on": None,
        "modified_on": None,
        "text": None,
    }
    response = client.empathic_voice.prompts.get_prompt_version(id="af699d45-2985-42cc-91b9-af9e5da3bac5", version=0)
    validate_response(response, expected_response, expected_types)

    async_response = await async_client.empathic_voice.prompts.get_prompt_version(
        id="af699d45-2985-42cc-91b9-af9e5da3bac5", version=0
    )
    validate_response(async_response, expected_response, expected_types)


async def test_delete_prompt_version(client: HumeClient, async_client: AsyncHumeClient) -> None:
    # Type ignore to avoid mypy complaining about the function not being meant to return a value
    assert client.empathic_voice.prompts.delete_prompt_version(id="af699d45-2985-42cc-91b9-af9e5da3bac5", version=1) is None  # type: ignore[func-returns-value]

    assert await async_client.empathic_voice.prompts.delete_prompt_version(id="af699d45-2985-42cc-91b9-af9e5da3bac5", version=1) is None  # type: ignore[func-returns-value]


async def test_update_prompt_description(client: HumeClient, async_client: AsyncHumeClient) -> None:
    expected_response: typing.Any = {
        "id": "af699d45-2985-42cc-91b9-af9e5da3bac5",
        "version": 1,
        "version_type": "FIXED",
        "version_description": "This is an updated version_description.",
        "name": "string",
        "created_on": 1722633247488,
        "modified_on": 1722634770585,
        "text": "<role>You are an AI weather assistant providing users with accurate and up-to-date weather information. Respond to user queries concisely and clearly. Use simple language and avoid technical jargon. Provide temperature, precipitation, wind conditions, and any weather alerts. Include helpful tips if severe weather is expected.</role>",
    }
    expected_types: typing.Any = {
        "id": None,
        "version": "integer",
        "version_type": None,
        "version_description": None,
        "name": None,
        "created_on": None,
        "modified_on": None,
        "text": None,
    }
    response = client.empathic_voice.prompts.update_prompt_description(
        id="af699d45-2985-42cc-91b9-af9e5da3bac5",
        version=1,
        version_description="This is an updated version_description.",
    )
    validate_response(response, expected_response, expected_types)

    async_response = await async_client.empathic_voice.prompts.update_prompt_description(
        id="af699d45-2985-42cc-91b9-af9e5da3bac5",
        version=1,
        version_description="This is an updated version_description.",
    )
    validate_response(async_response, expected_response, expected_types)
