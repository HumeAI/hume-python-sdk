[project]
name = "hume"

[tool.poetry]
name = "hume"
version = "0.11.3"
description = "A Python SDK for Hume AI"
readme = "README.md"
authors = []
keywords = [
    "hume",
    "ai",
    "evi",
    "empathic",
    "multimodal",
    "expression",
    "analysis",
    "sentiment",
    "voice",
    "recognition",
    "detection",
    "emotion",
    "interface",
    "speech",
    "audio",
    "vision",
    "expressive",
    "embeddings",
    "communication",
    "learning"
]
license = "MIT"
classifiers = [
    "Intended Audience :: Developers",
    "Programming Language :: Python",
    "Programming Language :: Python :: 3",
    "Programming Language :: Python :: 3.8",
    "Programming Language :: Python :: 3.9",
    "Programming Language :: Python :: 3.10",
    "Programming Language :: Python :: 3.11",
    "Programming Language :: Python :: 3.12",
    "Operating System :: OS Independent",
    "Operating System :: POSIX",
    "Operating System :: MacOS",
    "Operating System :: POSIX :: Linux",
    "Operating System :: Microsoft :: Windows",
    "Topic :: Software Development :: Libraries :: Python Modules",
    "Typing :: Typed",
    "License :: OSI Approved :: MIT License"
]
packages = [
    { include = "hume", from = "src"}
]

[project.urls]
Documentation = 'https://dev.hume.ai'
Homepage = 'https://www.hume.ai/'
Repository = 'https://github.com/HumeAI/hume-python-sdk'

[tool.poetry.dependencies]
python = ">=3.9,<4"
aiofiles = "^24.1.0"
eval-type-backport = "^0.2.0"
exceptiongroup = "^1.3.0"
httpx = ">=0.21.2"
jupyter = { version = "^1.0.0", optional = true}
pydantic = ">= 1.9.2"
pydantic-core = "^2.18.2"
sounddevice = { version = "^0.4.6", optional = true}
typing_extensions = ">= 4.0.0"
websockets = "^13.1"

[tool.poetry.group.dev.dependencies]
mypy = "==1.13.0"
pytest = "^7.4.0"
pytest-asyncio = "^0.23.5"
python-dateutil = "^2.9.0"
types-python-dateutil = "^2.9.0.20240316"
covcheck = { version = "^0.4.3", extras = ["toml"]}
pydocstyle = "^6.1.1"
pydub-stubs = "^0.25.1"
pylint = "^2.16.2"
pytest-cov = "^4.0.0"
ruff = "==0.11.5"
semver = "^2.13.0"
testbook = "^0.4.2"
types-aiofiles = "^24.1.0.20240626"

[tool.pytest.ini_options]
testpaths = [ "tests" ]
asyncio_mode = "auto"

[tool.mypy]
plugins = ["pydantic.mypy"]

[tool.ruff]
line-length = 120

[tool.ruff.lint]
select = [
    "E",  # pycodestyle errors
    "F",  # pyflakes
    "I",  # isort
]
ignore = [
    "E402",  # Module level import not at top of file
    "E501",  # Line too long
    "E711",  # Comparison to `None` should be `cond is not None`
    "E712",  # Avoid equality comparisons to `True`; use `if ...:` checks
    "E721",  # Use `is` and `is not` for type comparisons, or `isinstance()` for insinstance checks
    "E722",  # Do not use bare `except`
    "E731",  # Do not assign a `lambda` expression, use a `def`
    "F821",  # Undefined name
    "F841"   # Local variable ... is assigned to but never used
]

[tool.ruff.lint.isort]
section-order = ["future", "standard-library", "third-party", "first-party"]

[build-system]
requires = ["poetry-core"]
build-backend = "poetry.core.masonry.api"

[tool.poetry.extras]
examples=["jupyter"]
microphone=["sounddevice"]
