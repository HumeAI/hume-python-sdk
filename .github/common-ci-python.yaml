name: Python-Common-CI

on:
  workflow_call:
    inputs:
      package_name:
        description: Name of the package
        type: string
        required: true

      package_source_path:
        description: Path to package source in repo
        type: string
        required: true

      package_tests_path:
        description: Path to package tests in repo
        type: string
        required: true

      artifact_registry_project:
        description: Google Cloud artifact registry project
        type: string
        required: true

      artifact_registry_region:
        description: Google Cloud artifact registry region
        type: string
        required: true

      artifact_registry_repo:
        description: Google Cloud artifact registry repository
        type: string
        required: true

      type_checking_enabled:
        description: Whether mypy type checking is enabled
        type: boolean
        default: true
        required: false

      filter_paths:
        description: Paths to files that should trigger this workflow
        type: string
        required: true

    secrets:
      aws_access_key_id:
        description: AWS Access Key ID
        required: true

      aws_secret_access_key:
        description: AWS Secret Access Key
        required: true

      aws_default_region:
        description: AWS Default Region
        required: true

      gcp_account_password:
        description: Password for GCP account (used to install private packages)
        required: true

      gcp_account_credentials:
        description: JSON GCP service account credentials (used for tests)
        required: true

      hume_dev_api_key:
        description: Hume API key for dev account (used for tests)
        required: false

jobs:
  ci-common-python:
    runs-on: ubuntu-latest

    strategy:
      matrix:
        python-version:
          - 3.7
          - 3.8
          - 3.9

    steps:
      - uses: actions/checkout@v2

      - id: filter
        uses: dorny/paths-filter@v2
        with:
          filters: ${{ inputs.filter_paths }}

      - name: Python ${{ matrix.python-version }} Setup
        uses: actions/setup-python@v2
        with:
          python-version: ${{ matrix.python-version }}
        if: steps.filter.outputs.src == 'true'

      - name: Install system dependencies
        shell: bash
        run: |
          sudo apt-get --yes update
          sudo apt-get --yes install libsndfile1 ffmpeg
        if: steps.filter.outputs.src == 'true'

      - name: Install Python dependencies
        shell: bash
        run: |
          pip install poetry

          if [ -d /poetryenvs ]; then rm -rf ~/poetryenvs; fi
          poetry config virtualenvs.path ~/poetryenvs

          poetry config repositories.${{ inputs.artifact_registry_repo }} https://${{ inputs.artifact_registry_region }}-python.pkg.dev/${{ inputs.artifact_registry_project }}/${{ inputs.artifact_registry_repo }}
          poetry config http-basic.${{ inputs.artifact_registry_repo }} _json_key_base64 ${{ secrets.gcp_account_password }}

          poetry install
        working-directory: ${{ inputs.package_source_path }}
        if: steps.filter.outputs.src == 'true'

      - name: Run flake8
        shell: bash
        run: |
          poetry run pflake8 . --config pyproject.toml
          poetry run pflake8 $GITHUB_WORKSPACE/${{ inputs.package_tests_path }} --config pyproject.toml
        working-directory: ${{ inputs.package_source_path }}
        if: steps.filter.outputs.src == 'true'

      - name: Run pylint
        shell: bash
        run: |
          poetry run pylint humeai --rcfile pyproject.toml
        working-directory: ${{ inputs.package_source_path }}
        if: steps.filter.outputs.src == 'true'

      - name: Run mypy
        shell: bash
        run: |
          poetry run mypy . --config pyproject.toml
        working-directory: ${{ inputs.package_source_path }}
        if: steps.filter.outputs.src == 'true' && inputs.type_checking_enabled

      - name: Run pytest
        shell: bash
        env:
          AWS_ACCESS_KEY_ID: ${{ secrets.aws_access_key_id }}
          AWS_SECRET_ACCESS_KEY: ${{ secrets.aws_secret_access_key }}
          AWS_DEFAULT_REGION: ${{ secrets.aws_default_region }}
          GCP_CREDENTIALS_JSON: ${{ secrets.gcp_account_credentials }}
          GOOGLE_APPLICATION_CREDENTIALS: /home/runner/gcp-credentials.json
          HUME_DEV_API_KEY: ${{ secrets.hume_dev_api_key }}
        run: |
          # Create credentials file to be used by E2E tests
          echo "$GCP_CREDENTIALS_JSON" > /home/runner/gcp-credentials.json

          poetry run pytest $GITHUB_WORKSPACE/${{ inputs.package_tests_path }} --cov=. --cov-report=html --cov-report=xml --cov-branch
        working-directory: ${{ inputs.package_source_path }}
        if: steps.filter.outputs.src == 'true'

      - name: Upload HTML Coverage
        uses: actions/upload-artifact@v2
        with:
          name: ${{ inputs.package_name }}-coverage-html
          path: ${{ inputs.package_source_path }}/htmlcov
        if: steps.filter.outputs.src == 'true'

      - name: Upload XML Coverage
        uses: actions/upload-artifact@v2
        with:
          name: ${{ inputs.package_name }}-coverage-xml
          path: ${{ inputs.package_source_path }}/coverage.xml
        if: steps.filter.outputs.src == 'true'

      - name: Check Coverage
        shell: bash
        run: |
          poetry run covcheck coverage.xml --config pyproject.toml
        working-directory: ${{ inputs.package_source_path }}
        if: steps.filter.outputs.src == 'true'

      - name: Check Path Dependencies
        uses: ./.github/actions/check-poetry-path-deps
        with:
          filepath: ${{ inputs.package_source_path }}/pyproject.toml
