types:
  ReturnUserDefinedTool:
    docs: A specific tool version returned from the server
    properties:
      tool_type:
        type: string
        docs: Type of Tool. Values from the ToolType enum.
      id:
        type: string
        docs: Identifier for a Tool. Formatted as a UUID.
      version:
        type: integer
        docs: >-
          Version number for a Tool. Version numbers should be integers. The
          combination of configId and version number is unique.
      version_type:
        type: string
        docs: >-
          Inidicates whether this tool is using a fixed version number or
          auto-updating to the latest version. Values from the VersionType enum.
      version_description:
        type: optional<string>
        docs: Description that is appended to a specific version of a Tool.
      name:
        type: string
        docs: Name applied to all versions of a particular Tool.
      created_on:
        type: integer
        docs: The timestamp when the first version of this tool was created.
      modified_on:
        type: integer
        docs: The timestamp when this version of the tool was created.
      fallback_content:
        type: optional<string>
        docs: Text to use if the tool fails to generate content.
      description:
        type: optional<string>
        docs: Text describing what the tool does.
      parameters:
        type: string
        docs: >-
          Stringified JSON defining the parameters used by this version of the
          Tool.
  ReturnPrompt:
    docs: A specific prompt version returned from the server
    properties:
      id:
        type: string
        docs: Identifier for a Prompt. Formatted as a UUID.
      version:
        type: integer
        docs: >-
          Version number for a Prompt. Version numbers should be integers. The
          combination of configId and version number is unique.
      version_type:
        type: string
        docs: >-
          Inidicates whether this prompt is using a fixed version number or
          auto-updating to the latest version. Values from the VersionType enum.
      version_description:
        type: optional<string>
        docs: Description that is appended to a specific version of a Prompt.
      name:
        type: string
        docs: Name applied to all versions of a particular Prompt.
      created_on:
        type: integer
        docs: The timestamp when the first version of this prompt was created.
      modified_on:
        type: integer
        docs: The timestamp when this version of the prompt was created.
      text:
        type: string
        docs: Text used for this version of the Prompt.
  PostedBuiltinTool:
    docs: A configuration of a built-in tool to be posted to the server
    properties:
      name:
        type: string
        docs: Name applied to all versions of a particular Tool.
      fallback_content:
        type: optional<string>
        docs: Text to use if the tool fails to generate content.
  PostedLanguageModelModelProvider:
    enum:
      - OPEN_AI
      - CUSTOM_LANGUAGE_MODEL
      - ANTHROPIC
      - FIREWORKS
      - GROQ
    docs: The provider of this model. Based on the enum modelProvider.
  PostedLanguageModel:
    docs: A LanguageModel to be posted to the server
    properties:
      model_provider:
        type: optional<PostedLanguageModelModelProvider>
        docs: The provider of this model. Based on the enum modelProvider.
      model_resource:
        type: optional<string>
        docs: String that specifies the model to use with modelProvider.
      temperature:
        type: optional<double>
        docs: Model temperature.
  PostedPromptSpec:
    docs: A specific prompt identifier to be posted to the server
    properties:
      id:
        type: string
        docs: Identifier for a Prompt. Formatted as a UUID.
      version:
        type: optional<integer>
        docs: >-
          Version number for a Prompt. Version numbers should be integers. The
          combination of configId and version number is unique.
  PostedUserDefinedToolSpec:
    docs: A specific tool identifier to be posted to the server
    properties:
      id:
        type: string
        docs: Identifier for a Tool. Formatted as a UUID.
      version:
        type: optional<integer>
        docs: >-
          Version number for a Tool. Version numbers should be integers. The
          combination of configId and version number is unique.
  PostedVoiceName:
    enum:
      - ITO
      - DACHER
    docs: String with the name of the voice to use.
  PostedVoice:
    docs: A Voice specification posted to the server
    properties:
      provider:
        type: optional<literal<"HUME_AI">>
        docs: The provider of the voice to use.
      name:
        type: PostedVoiceName
        docs: String with the name of the voice to use.
  ReturnBuiltinTool:
    docs: A specific builtin tool version returned from the server
    properties:
      tool_type:
        type: string
        docs: Type of Tool. Values from the ToolType enum.
      name:
        type: string
        docs: Name applied to all versions of a particular Tool.
      fallback_content:
        type: optional<string>
        docs: Text to use if the tool fails to generate content.
  ReturnConfig:
    docs: A specific config version returned from the server
    properties:
      id:
        type: optional<string>
        docs: Identifier for a Config. Formatted as a UUID.
      version:
        type: optional<integer>
        docs: >-
          Version number for a Config. Version numbers should be integers. The
          combination of configId and version number is unique.
      version_description:
        type: optional<string>
        docs: Description that is appended to a specific version of a Config.
      name:
        type: optional<string>
        docs: Name applied to all versions of a particular Config.
      created_on:
        type: optional<integer>
        docs: The timestamp when the first version of this config was created.
      modified_on:
        type: optional<integer>
        docs: The timestamp when this version of the config was created.
      prompt: optional<ReturnPrompt>
      voice: optional<ReturnVoice>
      language_model: optional<ReturnLanguageModel>
      tools:
        type: optional<list<optional<ReturnUserDefinedTool>>>
        docs: List of user-defined tools associated with this config.
      builtin_tools:
        type: optional<list<optional<ReturnBuiltinTool>>>
        docs: List of built-in tools associated with this config
  ReturnLanguageModel:
    docs: A specific LanguageModel
    properties:
      model_provider:
        type: optional<string>
        docs: The provider of this model. Based on the enum modelProvider.
      model_resource:
        type: optional<string>
        docs: String that specifies the model to use with modelProvider.
      temperature:
        type: optional<double>
        docs: Model temperature.
  ReturnVoice:
    docs: A specific voice specification
    properties:
      provider:
        type: string
        docs: The provider of the voice to use. Based on the enum VoiceProvider.
      name:
        type: string
        docs: String with the name of the voice to use.
  ReturnPagedUserDefinedTools:
    docs: A paginated list of user defined tool versions returned from the server
    properties:
      page_number:
        type: integer
        docs: The page number of the returned results.
      page_size:
        type: integer
        docs: The number of results returned per page.
      tools_page:
        docs: List of tools returned for the specified page number and page size.
        type: list<optional<ReturnUserDefinedTool>>
  ReturnPagedPrompts:
    docs: A paginated list of prompt versions returned from the server
    properties:
      page_number:
        type: integer
        docs: The page number of the returned results.
      page_size:
        type: integer
        docs: The number of results returned per page.
      prompts_page:
        docs: List of prompts returned for the specified page number and page size.
        type: list<optional<ReturnPrompt>>
  ReturnPagedConfigs:
    docs: A paginated list of config versions returned from the server
    properties:
      page_number:
        type: optional<integer>
        docs: The page number of the returned results.
      page_size:
        type: optional<integer>
        docs: The number of results returned per page.
      configs_page:
        type: optional<list<ReturnConfig>>
        docs: List of prompts returned for the specified page number and page size.
  ReturnChat:
    docs: A description of chat and its status
    properties:
      id:
        type: string
        docs: Identifier for a chat. Formatted as a UUID.
      chat_group_id:
        type: string
        docs: >-
          Identifier for the chat group. Any chat resumed from this chat will
          have the same chat_group_id. Formatted as a UUID.
      tag:
        type: optional<string>
        docs: >-
          Optional tag applied to this chat used to group chats by user,
          application, etc.
      status:
        type: string
        docs: The status of the chat. Values from the ChatStatus enum.
      start_timestamp:
        type: integer
        docs: >-
          The timestamp when the chat started, formatted as a Unix epoch
          milliseconds.
      end_timestamp:
        type: optional<integer>
        docs: >-
          The timestamp when the chat ended, formatted as a Unix epoch
          milliseconds.
      event_count:
        type: optional<integer>
        docs: The total number of events currently in this chat.
      metadata:
        type: optional<string>
        docs: Stringified JSON with additional metadata about the chat.
      config: optional<ReturnConfigSpec>
  ReturnConfigSpec:
    docs: An id/version number for a specific config version
    properties:
      id:
        type: string
        docs: Identifier for a Config. Formatted as a UUID.
      version:
        type: optional<integer>
        docs: >-
          Version number for a Config. Version numbers should be integers. The
          combination of configId and version number is unique.
  ReturnPagedChats:
    docs: A paginated list of chats returned from the server
    properties:
      page_number:
        type: integer
        docs: The page number of the returned results.
      page_size:
        type: integer
        docs: The number of results returned per page.
      chats_page:
        docs: >-
          List of chats and their metadata returned for the specified page
          number and page size.
        type: list<ReturnChat>
  ReturnChatEvent:
    docs: A description of a single event in a chat returned from the server
    properties:
      id:
        type: string
        docs: Identifier for a chat event. Formatted as a UUID.
      chat_id:
        type: string
        docs: Identifier for the chat this event occurred in. Formatted as a UUID.
      timestamp:
        type: integer
        docs: >-
          The timestamp when the chat event occurred, formatted as a Unix epoch
          milliseconds.
      role:
        type: string
        docs: >-
          The role of the user who generated the chat event. Values from the
          Role enum.
      type:
        type: string
        docs: The type of chat event. Values from the ChatEventType enum.
      message_text:
        type: optional<string>
        docs: >-
          The text of the chat message, either transcribed from speaker audio or
          generated by the agent.
      emotion_features:
        type: optional<string>
        docs: >-
          Stringified JSON with data about emotional content/prosody of the
          event.
      metadata:
        type: optional<string>
        docs: Stringified JSON with additional metadata about the chat event.
  ReturnChatPagedEvents:
    docs: >-
      A description of chat status with a paginated list of chat events returned
      from the server
    properties:
      id:
        type: string
        docs: Identifier for a chat. Formatted as a UUID.
      chat_group_id:
        type: string
        docs: >-
          Identifier for the chat group. Any chat resumed from this chat will
          have the same chat_group_id. Formatted as a UUID.
      tag:
        type: optional<string>
        docs: >-
          Optional tag applied to this chat used to group chats by user,
          application, etc.
      status:
        type: string
        docs: The status of the chat. Values from the ChatStatus enum.
      start_timestamp:
        type: integer
        docs: >-
          The timestamp when the chat started, formatted as a Unix epoch
          milliseconds.
      end_timestamp:
        type: optional<integer>
        docs: >-
          The timestamp when the chat ended, formatted as a Unix epoch
          milliseconds.
      events_page:
        docs: List of chat events with the specified page number and page size.
        type: list<ReturnChatEvent>
      metadata:
        type: optional<string>
        docs: Stringified JSON with additional metadata about the chat.
      page_number:
        type: integer
        docs: The page number of the returned results.
      page_size:
        type: integer
        docs: The number of results returned per page.
      config: optional<ReturnConfigSpec>
  ReturnActiveChatCount:
    docs: A description of current chat chat sessions for a user
    properties:
      timestamp:
        type: integer
        docs: >-
          The timestamp for when chat status was measured. Formatted as a Unix
          epoch milliseconds.
      total_user_active_chats:
        type: integer
        docs: The total number of active chats for this user.
      max_allowed_active_chats:
        type: optional<integer>
        docs: The maximum number of concurrent active chats for this user.
      more_active_chats_allowed:
        type: boolean
        docs: Boolean indicating if the user is allowed to start more chats.
      per_tag:
        type: optional<list<optional<ReturnActiveChatCountPerTag>>>
        docs: Optional List of chat counts per tag.
  ReturnActiveChatCountPerTag:
    docs: A description of current chat chat sessions per tag
    properties:
      tag:
        type: string
        docs: User tag applied to a chat.
      total_tag_active_chats:
        type: integer
        docs: The total number of active chats for this user with the specified tag.
  ReturnChatGroupPagedEvents:
    docs: >-
      A paginated list of chat events that occurred across chats in this
      chat_group from the server
    properties:
      id:
        type: string
        docs: >-
          Identifier for the chat group. Any chat resumed from this chat will
          have the same chat_group_id. Formatted as a UUID.
      page_number:
        type: integer
        docs: The page number of the returned results.
      page_size:
        type: integer
        docs: The number of results returned per page.
      pagination_direction:
        type: string
        docs: The direction of the pagination (ASC or DESC).
      events_page:
        docs: >-
          List of chat_events returned for the specified page number and page
          size.
        type: list<ReturnChatEvent>
  ReturnChatGroupPagedChats:
    docs: >-
      A description of chat_group and its status with a paginated list of each
      chat in the chat_group
    properties:
      id:
        type: string
        docs: >-
          Identifier for the chat group. Any chat resumed from this chat will
          have the same chat_group_id. Formatted as a UUID.
      first_start_timestamp:
        type: integer
        docs: >-
          The timestamp when the first chat in this chat group started,
          formatted as a Unix epoch milliseconds.
      most_recent_start_timestamp:
        type: integer
        docs: >-
          The timestamp when the most recent chat in this chat group started,
          formatted as a Unix epoch milliseconds.
      num_chats:
        type: integer
        docs: The total number of chats in this chat group.
      page_number:
        type: integer
        docs: The page number of the returned results.
      page_size:
        type: integer
        docs: The number of results returned per page.
      chats_page:
        docs: >-
          List of chats and their metadata returned for the specified page
          number and page size.
        type: list<ReturnChat>
      active: optional<boolean>
  ReturnChatGroup:
    docs: A description of chat_group and its status
    properties:
      id:
        type: string
        docs: >-
          Identifier for the chat group. Any chat resumed from this chat will
          have the same chat_group_id. Formatted as a UUID.
      first_start_timestamp:
        type: integer
        docs: >-
          The timestamp when the first chat in this chat group started,
          formatted as a Unix epoch milliseconds.
      most_recent_start_timestamp:
        type: integer
        docs: >-
          The timestamp when the most recent chat in this chat group started,
          formatted as a Unix epoch milliseconds.
      most_recent_chat_id:
        type: optional<string>
        docs: >-
          The chat_id of the most recent chat in this chat group. Formatted as a
          UUID.
      num_chats:
        type: integer
        docs: The total number of chats in this chat group.
      active: optional<boolean>
  ReturnPagedChatGroups:
    docs: A paginated list of chat_groups returned from the server
    properties:
      page_number:
        type: integer
        docs: The page number of the returned results.
      page_size:
        type: integer
        docs: The number of results returned per page.
      chat_groups_page:
        docs: >-
          List of chat_groups and their metadata returned for the specified page
          number and page size.
        type: list<ReturnChatGroup>
  AssistantEnd:
    docs: When provided, the output is an assistant end message.
    properties:
      custom_session_id:
        type: optional<string>
        docs: >-
          Used to manage conversational state, correlate frontend and backend
          data, and persist conversations across EVI sessions.
      type:
        type: literal<"assistant_end">
        docs: >-
          The type of message sent through the socket; for an Assistant End
          message, this must be 'assistant_end'.
  AssistantInput:
    docs: When provided, the input is spoken by EVI.
    properties:
      custom_session_id:
        type: optional<string>
        docs: >-
          Used to manage conversational state, correlate frontend and backend
          data, and persist conversations across EVI sessions.
      text:
        type: string
        docs: Text to be synthesized.
      type:
        type: literal<"assistant_input">
        docs: >-
          The type of message sent through the socket; for an Assistant Input
          message, this must be 'assistant_input'.
  AssistantMessage:
    docs: When provided, the output is an assistant message.
    properties:
      custom_session_id:
        type: optional<string>
        docs: >-
          Used to manage conversational state, correlate frontend and backend
          data, and persist conversations across EVI sessions.
      from_text:
        type: boolean
        docs: Indicates if this message was constructed from a text input message.
      id:
        type: optional<string>
        docs: ID of the assistant message.
      message:
        type: ChatMessage
        docs: Transcript of the message.
      models:
        type: Inference
        docs: Inference model results.
      type:
        type: literal<"assistant_message">
        docs: >-
          The type of message sent through the socket; for an Assistant Message,
          this must be 'assistant_message'.
  AudioConfiguration:
    properties:
      channels:
        type: integer
        docs: Number of channels.
      encoding:
        type: Encoding
        docs: Audio encoding.
      sample_rate:
        type: integer
        docs: Audio sample rate.
  AudioInput:
    docs: When provided, the input is audio.
    properties:
      custom_session_id:
        type: optional<string>
        docs: >-
          Used to manage conversational state, correlate frontend and backend
          data, and persist conversations across EVI sessions.
      data:
        type: string
        docs: Base64 encoded audio input.
        validation:
          format: base64
      type:
        type: literal<"audio_input">
        docs: >-
          The type of message sent through the socket; for an Audio Input
          message, this must be 'audio_input'.
  AudioOutput:
    docs: When provided, the output is audio.
    properties:
      custom_session_id:
        type: optional<string>
        docs: >-
          Used to manage conversational state, correlate frontend and backend
          data, and persist conversations across EVI sessions.
      data:
        type: string
        docs: Base64 encoded audio output.
        validation:
          format: base64
      id:
        type: string
        docs: ID of the audio output.
      type:
        type: literal<"audio_output">
        docs: >-
          The type of message sent through the socket; for an Audio Output
          message, this must be 'audio_output'.
  BuiltInTool: literal<"web_search">
  BuiltinToolConfig:
    properties:
      fallback_content: optional<string>
      name: BuiltInTool
  ChatMessageToolResult:
    discriminated: false
    docs: Function call response from client.
    union:
      - ToolResponseMessage
      - ToolErrorMessage
  ChatMessage:
    properties:
      content:
        type: optional<string>
        docs: Transcript of the message.
      role:
        type: Role
        docs: Role of who is providing the message.
      tool_call:
        type: optional<ToolCallMessage>
        docs: Function call name and arguments.
      tool_result:
        type: optional<ChatMessageToolResult>
        docs: Function call response from client.
  ChatMetadata:
    docs: When provided, the output is a chat metadata message.
    properties:
      chat_group_id:
        type: string
        docs: ID of the chat group. Used to resume a chat.
      chat_id:
        type: string
        docs: ID of the chat.
      custom_session_id:
        type: optional<string>
        docs: >-
          Used to manage conversational state, correlate frontend and backend
          data, and persist conversations across EVI sessions.
      type:
        type: literal<"chat_metadata">
        docs: >-
          The type of message sent through the socket; for a Chat Metadata
          message, this must be 'chat_metadata'.
  Context:
    properties:
      text:
        type: string
        docs: User context to inject.
      type:
        type: optional<ContextType>
        docs: The persistence level of the injected context.
  ContextType:
    enum:
      - editable
      - persistent
      - temporary
  EmotionScores:
    properties:
      Admiration: double
      Adoration: double
      Aesthetic Appreciation: double
      Amusement: double
      Anger: double
      Anxiety: double
      Awe: double
      Awkwardness: double
      Boredom: double
      Calmness: double
      Concentration: double
      Confusion: double
      Contemplation: double
      Contempt: double
      Contentment: double
      Craving: double
      Desire: double
      Determination: double
      Disappointment: double
      Disgust: double
      Distress: double
      Doubt: double
      Ecstasy: double
      Embarrassment: double
      Empathic Pain: double
      Entrancement: double
      Envy: double
      Excitement: double
      Fear: double
      Guilt: double
      Horror: double
      Interest: double
      Joy: double
      Love: double
      Nostalgia: double
      Pain: double
      Pride: double
      Realization: double
      Relief: double
      Romance: double
      Sadness: double
      Satisfaction: double
      Shame: double
      Surprise (negative): double
      Surprise (positive): double
      Sympathy: double
      Tiredness: double
      Triumph: double
  Encoding: literal<"linear16">
  WebSocketError:
    docs: When provided, the output is an error message.
    properties:
      code:
        type: string
        docs: Error code.
      custom_session_id:
        type: optional<string>
        docs: >-
          Used to manage conversational state, correlate frontend and backend
          data, and persist conversations across EVI sessions.
      message:
        type: string
        docs: Error message.
      slug:
        type: string
        docs: Error slug.
      type:
        type: literal<"error">
        docs: >-
          The type of message sent through the socket; for a Web Socket Error
          message, this must be 'error'.
  ErrorLevel: literal<"warn">
  Inference:
    properties:
      prosody:
        type: optional<ProsodyInference>
        docs: Prosody model inference results.
  MillisecondInterval:
    properties:
      begin:
        type: integer
        docs: Start time of the interval in milliseconds.
      end:
        type: integer
        docs: End time of the interval in milliseconds.
  PauseAssistantMessage:
    docs: >-
      Pause responses from EVI. Chat history is still saved and sent after
      resuming. 
    properties:
      custom_session_id:
        type: optional<string>
        docs: >-
          Used to manage conversational state, correlate frontend and backend
          data, and persist conversations across EVI sessions.
      type:
        type: optional<literal<"pause_assistant_message">>
        docs: >-
          The type of message sent through the socket; for a Pause Assistant
          message, this must be 'pause_assistant_message'.
  ProsodyInference:
    properties:
      scores: EmotionScores
  ResumeAssistantMessage:
    docs: >-
      Resume responses from EVI. Chat history sent while paused will now be
      sent. 
    properties:
      custom_session_id:
        type: optional<string>
        docs: >-
          Used to manage conversational state, correlate frontend and backend
          data, and persist conversations across EVI sessions.
      type:
        type: optional<literal<"resume_assistant_message">>
        docs: >-
          The type of message sent through the socket; for a Resume Assistant
          message, this must be 'resume_assistant_message'.
  Role:
    enum:
      - assistant
      - system
      - user
      - all
      - tool
  SessionSettings:
    docs: Settings for this chat session.
    properties:
      audio:
        type: optional<AudioConfiguration>
        docs: Audio configuration.
      builtin_tools:
        type: optional<list<BuiltinToolConfig>>
        docs: List of builtin tools to enable.
      custom_session_id:
        type: optional<string>
        docs: >-
          Used to manage conversational state, correlate frontend and backend
          data, and persist conversations across EVI sessions.
      language_model_api_key:
        type: optional<string>
        docs: Third party API key for the language model used for non-Hume models.
      system_prompt:
        type: optional<string>
        docs: >-
          Instructions for how the system should respond to the user. Set to
          null to use the default system prompt.
      tools:
        type: optional<list<Tool>>
        docs: List of tools to enable.
      type:
        type: literal<"session_settings">
        docs: >-
          The type of message sent through the socket; for a Session Settings
          message, this must be 'session_settings'.
  Tool:
    properties:
      description:
        type: optional<string>
        docs: Description of the function.
      fallback_content:
        type: optional<string>
        docs: >-
          Fallback content of the tool, passed to the LLM if the function call
          response fails.
      name:
        type: string
        docs: Name of the tool.
      parameters:
        type: string
        docs: Parameters of the tool. Is a stringified JSON schema.
      type:
        type: ToolType
        docs: Type of tool.
  ToolCallMessage:
    docs: When provided, the output is a tool call.
    properties:
      custom_session_id:
        type: optional<string>
        docs: >-
          Used to manage conversational state, correlate frontend and backend
          data, and persist conversations across EVI sessions.
      name:
        type: string
        docs: Name of the tool called.
      parameters:
        type: string
        docs: Parameters of the tool call. Is a stringified JSON schema.
      response_required:
        type: boolean
        docs: Whether a response is required from the developer.
      tool_call_id:
        type: string
        docs: ID of the tool call.
      tool_type:
        type: ToolType
        docs: Type of tool called, either 'builtin' or 'function'.
      type:
        type: optional<literal<"tool_call">>
        docs: >-
          The type of message sent through the socket; for a Tool Call message,
          this must be 'tool_call'.
  ToolErrorMessage:
    docs: When provided, the output is a function call error.
    properties:
      code:
        type: optional<string>
        docs: Error code.
      content:
        type: optional<string>
        docs: The content passed to the LLM in place of the tool response.
      custom_session_id:
        type: optional<string>
        docs: >-
          Used to manage conversational state, correlate frontend and backend
          data, and persist conversations across EVI sessions.
      error:
        type: string
        docs: Error message from the tool call, not exposed to the LLM or user.
      level:
        type: optional<ErrorLevel>
        docs: Error level.
      tool_call_id:
        type: string
        docs: ID of the tool call.
      tool_type:
        type: optional<ToolType>
        docs: Type of tool called, either 'builtin' or 'function'.
      type:
        type: optional<literal<"tool_error">>
        docs: >-
          The type of message sent through the socket; for a Tool Error message,
          this must be 'tool_error'.
  ToolResponseMessage:
    docs: When provided, the output is a function call response.
    properties:
      content:
        type: string
        docs: Return value of the tool call.
      custom_session_id:
        type: optional<string>
        docs: >-
          Used to manage conversational state, correlate frontend and backend
          data, and persist conversations across EVI sessions.
      tool_call_id:
        type: string
        docs: ID of the tool call.
      tool_name: optional<string>
      tool_type: optional<ToolType>
      type:
        type: optional<literal<"tool_response">>
        docs: >-
          The type of message sent through the socket; for a Tool Response
          message, this must be ‘tool_response’.
  ToolType:
    enum:
      - builtin
      - function
  UserInput:
    docs: User text to insert into the conversation.
    properties:
      custom_session_id:
        type: optional<string>
        docs: >-
          Used to manage conversational state, correlate frontend and backend
          data, and persist conversations across EVI sessions.
      text:
        type: string
        docs: User text to insert into the conversation.
      type:
        type: literal<"user_input">
        docs: >-
          The type of message sent through the socket; for a User Input message,
          this must be ‘user_input’.
  UserInterruption:
    docs: When provided, the output is an interruption.
    properties:
      custom_session_id:
        type: optional<string>
        docs: >-
          Used to manage conversational state, correlate frontend and backend
          data, and persist conversations across EVI sessions.
      time:
        type: integer
        docs: Unix timestamp of the detected user interruption.
      type:
        type: literal<"user_interruption">
        docs: >-
          The type of message sent through the socket; for a User Interruption
          message, this must be 'user_interruption'.
  UserMessage:
    docs: When provided, the output is a user message.
    properties:
      custom_session_id:
        type: optional<string>
        docs: >-
          Used to manage conversational state, correlate frontend and backend
          data, and persist conversations across EVI sessions.
      from_text:
        type: boolean
        docs: Indicates if this message was constructed from a text input message.
      message:
        type: ChatMessage
        docs: Transcript of the message.
      models:
        type: Inference
        docs: Inference model results.
      time:
        type: MillisecondInterval
        docs: Start and End time of user message.
      type: literal<"user_message">
  TtsInput:
    properties:
      type: optional<literal<"tts">>
  TextInput:
    properties:
      type: optional<literal<"text_input">>
  FunctionCallResponseInput:
    properties:
      type: optional<literal<"function_call_response">>
